<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>强子Mo的个人博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.juedigulang.com/"/>
  <updated>2018-11-08T16:04:40.744Z</updated>
  <id>http://www.juedigulang.com/</id>
  
  <author>
    <name>强子Mo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>并行流和串行流</title>
    <link href="http://www.juedigulang.com/2018/11/09/%E5%B9%B6%E8%A1%8C%E6%B5%81%E5%92%8C%E4%B8%B2%E8%A1%8C%E6%B5%81/"/>
    <id>http://www.juedigulang.com/2018/11/09/并行流和串行流/</id>
    <published>2018-11-08T16:00:14.332Z</published>
    <updated>2018-11-08T16:04:40.744Z</updated>
    
    <content type="html"><![CDATA[<h3 id="并行流"><a href="#并行流" class="headerlink" title="并行流"></a>并行流</h3><p>并行流就是把一个内容分成多个数据块，并用不同的线程分别处理每个数据块的流</p><h3 id="java8中进行的优化"><a href="#java8中进行的优化" class="headerlink" title="java8中进行的优化"></a>java8中进行的优化</h3><p>Java8中将并行进行了优化，我们可以很容易的对数据进行并行操作。Stream API 可以声明性地通过parallel()与sequential()在并行流与顺序流之间进行切换</p><h3 id="了解Fork-Join框架"><a href="#了解Fork-Join框架" class="headerlink" title="了解Fork/Join框架"></a>了解Fork/Join框架</h3><p>Fork/Join框架：就是在必要的情况下，将一个大任务，进行拆分（fork）成若干个小任务（拆分到不可在可拆时），再将一个个的小任务运算结果进行join汇总。<br><img src="https://i.imgur.com/hJyr6op.png" alt=""></p><h3 id="Fork-Join框架与传统线程池的区别"><a href="#Fork-Join框架与传统线程池的区别" class="headerlink" title="Fork/Join框架与传统线程池的区别"></a>Fork/Join框架与传统线程池的区别</h3><h4 id="Fork-Join采用“工作窃取”模式（work-stealing）"><a href="#Fork-Join采用“工作窃取”模式（work-stealing）" class="headerlink" title="Fork/Join采用“工作窃取”模式（work-stealing）"></a>Fork/Join采用“工作窃取”模式（work-stealing）</h4><p>当执行新的任务时它可以将其拆分分成更小的任务执行，并将小任务加到线程队列中，然后再从一个随机线程的队列中偷一个并把它放在自己的队列中</p><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><p>相对于一般的线程池实现，fork/join框架的优势体现在对其中包含的任务的处理方式上。在一般的线程池中，如果一个线程正在执行的任务由于某些原因无法继续运行，那么该线程会处于等待状态。而在fork/join框架实现中，如果某个子问题由于等待另外一个子问题的完成而无法继续完成。那么处理该子问题的线程会主动寻找其他尚未运行的子问题来执行。这种方式减少了线程的等待时间，提高了性能。</p><h4 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h4><pre><code>import javafx.application.Application;import javafx.stage.Stage;import java.time.Duration;import java.time.Instant;import java.util.concurrent.ForkJoinPool;import java.util.concurrent.ForkJoinTask;import java.util.concurrent.RecursiveTask;public class ForkJoinCalculate extends RecursiveTask&lt;Long&gt;     {private static final long serialVersionUID = -8329979697027097721L;private long start;private long end;private static final long THRESHOLD = 10000;public ForkJoinCalculate(long start, long end) {    this.start = start;    this.end = end;}@Overrideprotected Long compute() {    long length = end - start;    if(length &lt;= THRESHOLD){        long sum = 0;        for (long i = start; i &lt;= end ; i++) {            sum += i;        }        return sum;    }else{        long middle = (start + end) / 2;        ForkJoinCalculate left = new ForkJoinCalculate(start,middle );        left.fork();//拆分子任务，同时压入线程队列        ForkJoinCalculate right = new ForkJoinCalculate(middle+1,end);        right.fork();        return left.join() + right.join();    }}public static void main(String[] args) {    Instant start = Instant.now();    ForkJoinPool pool = new ForkJoinPool();    ForkJoinTask&lt;Long&gt; task = new ForkJoinCalculate(0,10000000000L);    Long sum = pool.invoke(task);    System.out.println(sum);    Instant end = Instant.now();    System.out.println(&quot;耗费时间为&quot;+Duration.between(start,end).toMillis());//6366}}</code></pre><h4 id="普通方式"><a href="#普通方式" class="headerlink" title="普通方式"></a>普通方式</h4><pre><code>@Testpublic static void test2(){    Instant start = Instant.now();    long sum = 0L;    for (long i = 0; i &lt;10000000000L ; i++) {        sum += i;    }    System.out.println(sum);    Instant end = Instant.now();    System.out.println(&quot;耗费时间为&quot;+Duration.between(start,end).toMillis());//5579}</code></pre><h4 id="java8的方式"><a href="#java8的方式" class="headerlink" title="java8的方式"></a>java8的方式</h4><pre><code>//java8public static void test3(){    Instant start = Instant.now();    LongStream.rangeClosed(0,10000000000L).parallel().reduce(0,Long::sum);    Instant end = Instant.now();    System.out.println(&quot;耗费时间为&quot;+Duration.between(start,end).toMillis());//4369}</code></pre>]]></content>
    
    <summary type="html">
    
      并行流和串行流
    
    </summary>
    
      <category term="jdk8新特性" scheme="http://www.juedigulang.com/categories/jdk8%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
    
      <category term="java8" scheme="http://www.juedigulang.com/tags/java8/"/>
    
  </entry>
  
  <entry>
    <title>StreamAPI终止操作</title>
    <link href="http://www.juedigulang.com/2018/11/08/StreamAPI%E7%BB%88%E6%AD%A2%E6%93%8D%E4%BD%9C/"/>
    <id>http://www.juedigulang.com/2018/11/08/StreamAPI终止操作/</id>
    <published>2018-11-08T15:40:25.493Z</published>
    <updated>2018-11-08T15:40:25.851Z</updated>
    
    <content type="html"><![CDATA[<h3 id="何为终止操作"><a href="#何为终止操作" class="headerlink" title="何为终止操作"></a>何为终止操作</h3><p>终端操作会从流的流水线生成结果。其结果可以是任何不是流的值。例如：List、Integer，甚至是void</p><h3 id="查找与匹配"><a href="#查找与匹配" class="headerlink" title="查找与匹配"></a>查找与匹配</h3><h4 id="1-allMatch–检查是否匹配所有元素"><a href="#1-allMatch–检查是否匹配所有元素" class="headerlink" title="1.allMatch–检查是否匹配所有元素"></a>1.allMatch–检查是否匹配所有元素</h4><pre><code>@Testpublic void test9(){    //allMatch--检查是否匹配所有元素    boolean b = employees.stream()            .allMatch((e) -&gt; e.getStatus().equals(Employee.Status.FREE));    System.out.println(b);//false}</code></pre><h4 id="2-anyMatch–检查是否至少匹配一个元素"><a href="#2-anyMatch–检查是否至少匹配一个元素" class="headerlink" title="2.anyMatch–检查是否至少匹配一个元素"></a>2.anyMatch–检查是否至少匹配一个元素</h4><pre><code>@Testpublic void test9(){    //anyMatch--检查是否至少匹配一个元素    boolean b1 = employees.stream()            .anyMatch((e) -&gt; e.getStatus().equals(Employee.Status.BUSY));    System.out.println(b1);//true}</code></pre><h4 id="3-noneMatch–检查是否没有匹配所有元素"><a href="#3-noneMatch–检查是否没有匹配所有元素" class="headerlink" title="3.noneMatch–检查是否没有匹配所有元素"></a>3.noneMatch–检查是否没有匹配所有元素</h4><pre><code>@Testpublic void test9(){    //noneMatch--检查是否没有匹配所有元素    boolean b2 = employees.stream()            .noneMatch((e) -&gt; e.getStatus().equals(Employee.Status.BUSY));    System.out.println(b2);//false}</code></pre><h4 id="4-findFirst–返回第一个元素"><a href="#4-findFirst–返回第一个元素" class="headerlink" title="4.findFirst–返回第一个元素"></a>4.findFirst–返回第一个元素</h4><pre><code>@Testpublic void test9(){    //findFirst--返回第一个元素    Optional&lt;Employee&gt; op = employees.stream()            .sorted((e1, e2) -&gt; -Double.compare(e1.getSalary(), e2.getSalary()))            .findFirst();    System.out.println(op.get());}</code></pre><h4 id="5-findAny–返回当前流中任意元素"><a href="#5-findAny–返回当前流中任意元素" class="headerlink" title="5.findAny–返回当前流中任意元素"></a>5.findAny–返回当前流中任意元素</h4><pre><code>@Testpublic void test9(){    //findAny--返回当前流中任意元素   Optional&lt;Employee&gt; op2 = employees.parallelStream()            .filter((e) -&gt; e.getStatus().equals(Employee.Status.FREE))            .findAny();    System.out.println(op2.get());}</code></pre><h4 id="6-count–返回流中元素的总个数"><a href="#6-count–返回流中元素的总个数" class="headerlink" title="6.count–返回流中元素的总个数"></a>6.count–返回流中元素的总个数</h4><pre><code>@Testpublic void test9(){    //count--返回流中元素的总个数    long count = employees.stream().count();    System.out.println(count);}</code></pre><h4 id="7-max–返回流中最大值"><a href="#7-max–返回流中最大值" class="headerlink" title="7.max–返回流中最大值"></a>7.max–返回流中最大值</h4><pre><code>@Testpublic void test9(){    //max--返回流中最大值    Optional&lt;Employee&gt; op3 = employees.stream()            .max((e1, e2) -&gt; Double.compare(e1.getSalary(), e2.getSalary()));    System.out.println(op3.get());}</code></pre><h4 id="8-min–返回流中最小值"><a href="#8-min–返回流中最小值" class="headerlink" title="8.min–返回流中最小值"></a>8.min–返回流中最小值</h4><pre><code>@Testpublic void test9(){   //min--返回流中最小值    Optional&lt;Double&gt; op4 = employees.stream()            .map(Employee::getSalary)            .min(Double::compareTo);    System.out.println(op4.get());}</code></pre><h3 id="规约"><a href="#规约" class="headerlink" title="规约"></a>规约</h3><h4 id="reduce-T-identity-BinaryOperator-reduce-BinaryOPerator-–可以将流中元素反复结合起来，得到一个值"><a href="#reduce-T-identity-BinaryOperator-reduce-BinaryOPerator-–可以将流中元素反复结合起来，得到一个值" class="headerlink" title="reduce(T identity,BinaryOperator)/reduce(BinaryOPerator)–可以将流中元素反复结合起来，得到一个值"></a>reduce(T identity,BinaryOperator)/reduce(BinaryOPerator)–可以将流中元素反复结合起来，得到一个值</h4><pre><code>@org.junit.Testpublic void test3(){    List&lt;Integer&gt; list = Arrays.asList(1,2,3,4,5,6,7,8,9,10);    Integer reduce = list.stream()            .reduce(0, (x, y) -&gt; x + y);    System.out.println(reduce);    System.out.println(&quot;-------------------------------&quot;);    //计算所有工资    Optional&lt;Double&gt; reduce1 = employees.stream()            .map(Employee::getSalary)            .reduce(Double::sum);    System.out.println(reduce1.get());    System.out.println(&quot;-------------------------------&quot;);    Optional&lt;Integer&gt; reduce2 = employees.stream().map(Employee::getAge).reduce(Integer::max);    System.out.println(reduce2.get());}</code></pre><h4 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h4><p>map和reduce的连接通常称为map-reduce模式，因Goolge用它来进行网络搜索而出名</p><h3 id="收集"><a href="#收集" class="headerlink" title="收集"></a>收集</h3><p>collect：将流转换为其他形式，接受一个Collector接口的实现，用于给Stream中元素做汇总的方法</p><p>####Collector接口<br> Collector接口中的方法的实现决定了如何对流执行收集操作（如收集到List，Set，Map）。但是Collectors实用类提供了很多静态方法，可以方便地创建常见收集器实例。具体如下：</p><h5 id="1-toList：返回类型List-把流中元素收集到List中"><a href="#1-toList：返回类型List-把流中元素收集到List中" class="headerlink" title="1.toList：返回类型List,把流中元素收集到List中"></a>1.toList：返回类型List<t>,把流中元素收集到List中</t></h5><pre><code>@Testpublic void test9(){   //toList：返回类型List&lt;T&gt;,把流中元素收集到List中    List&lt;String&gt; collect = employees.stream()            .map(Employee::getName)            .collect(Collectors.toList());    System.out.println(collect);}</code></pre><h5 id="2-toSet：返回类型Set-把流中元素收集到Set中"><a href="#2-toSet：返回类型Set-把流中元素收集到Set中" class="headerlink" title="2.toSet：返回类型Set,把流中元素收集到Set中"></a>2.toSet：返回类型Set<t>,把流中元素收集到Set中</t></h5><pre><code>@Testpublic void test9(){   //toSet：返回类型Set&lt;T&gt;,把流中元素收集到Set中    Set&lt;String&gt; collect1 = employees.stream()            .map(Employee::getName)            .collect(Collectors.toSet());    System.out.println(collect1);}</code></pre><h5 id="3-toCollection-返回类型Collection-把流中元素收集到创建的集合、"><a href="#3-toCollection-返回类型Collection-把流中元素收集到创建的集合、" class="headerlink" title="3.toCollection: 返回类型Collection,把流中元素收集到创建的集合、"></a>3.toCollection: 返回类型Collection<t>,把流中元素收集到创建的集合、</t></h5><pre><code>@Testpublic void test9(){   //toCollection: 返回类型Collection&lt;T&gt;,把流中元素收集到创建的集合    ArrayList&lt;Integer&gt; collect2 = employees.stream()            .map(Employee::getAge)            .collect(Collectors.toCollection(ArrayList::new));    System.out.println(collect2);}</code></pre><h5 id="4-counting-返回类型Long-计算流中总元素"><a href="#4-counting-返回类型Long-计算流中总元素" class="headerlink" title="4.counting:返回类型Long,计算流中总元素"></a>4.counting:返回类型Long,计算流中总元素</h5><pre><code>@Testpublic void test9(){   //counting:返回类型Long,计算流中总元素    Long collect3 = employees.stream()            //.map(Employee::getAge)            .collect(Collectors.counting());    System.out.println(collect3);}</code></pre><h5 id="5-averagingDouble-计算流中平均值"><a href="#5-averagingDouble-计算流中平均值" class="headerlink" title="5.averagingDouble:计算流中平均值"></a>5.averagingDouble:计算流中平均值</h5><pre><code>@Testpublic void test9(){   //averagingDouble:计算流中平均值    Double aDouble = employees.stream()            .collect(Collectors.averagingDouble(Employee::getSalary));    System.out.println(aDouble);}</code></pre><h5 id="6-summingDouble-计算流中总和"><a href="#6-summingDouble-计算流中总和" class="headerlink" title="6.summingDouble:计算流中总和"></a>6.summingDouble:计算流中总和</h5><pre><code>@Testpublic void test9(){    //summingDouble:计算流中总和    Integer collect4 = employees.stream()            .collect(Collectors.summingInt(Employee::getAge));    System.out.println(collect4);}</code></pre><h5 id="7-maxBy-返回类型Optional-根据比较器选择最大值"><a href="#7-maxBy-返回类型Optional-根据比较器选择最大值" class="headerlink" title="7.maxBy:返回类型Optional:根据比较器选择最大值"></a>7.maxBy:返回类型Optional<t>:根据比较器选择最大值</t></h5><pre><code>@Testpublic void test9(){    //maxBy:返回类型Optional&lt;T&gt;:根据比较器选择最大值    Optional&lt;Employee&gt; op = employees.stream()            .collect(Collectors.maxBy((e1, e2) -&gt; Double.compare(e1.getSalary(), e2.getSalary())));    System.out.println(op.get());}</code></pre><h5 id="8-minBy-返回类型Optional-根据比较器选择最小值"><a href="#8-minBy-返回类型Optional-根据比较器选择最小值" class="headerlink" title="8.minBy:返回类型Optional:根据比较器选择最小值"></a>8.minBy:返回类型Optional<t>:根据比较器选择最小值</t></h5><pre><code>@Testpublic void test9(){     //minBy:返回类型Optional&lt;T&gt;:根据比较器选择最小值    Optional&lt;Integer&gt; op2 = employees.stream()            .map(Employee::getAge)            .collect(Collectors.minBy(Integer::compare));    System.out.println(op2.get());}</code></pre><h5 id="8-groupingBy-范会类型Map"><a href="#8-groupingBy-范会类型Map" class="headerlink" title="8.groupingBy:范会类型Map"></a>8.groupingBy:范会类型Map<k,list<t>&gt;根据属型值对流分组</k,list<t></h5><pre><code>@Testpublic void test9(){    //groupingBy:范会类型Map&lt;k,List&lt;t&gt;&gt;根据属型值对流分组    Map&lt;Employee.Status, List&lt;Employee&gt;&gt; collect5 = employees.stream()            .collect(Collectors.groupingBy(Employee::getStatus));    System.out.println(collect5);    //{BUSY=[Employee{name=&apos;李四&apos;, age=58, salary=5555.55, status=BUSY}, Employee{name=&apos;田七&apos;, age=23, salary=8888.88, status=BUSY}], FREE=[Employee{name=&apos;张三&apos;, age=18, salary=9999.99, status=FREE}, Employee{name=&apos;赵六&apos;, age=36, salary=6666.66, status=FREE}], VOCATION=[Employee{name=&apos;王五&apos;, age=26, salary=3333.33, status=VOCATION}]}}</code></pre><h5 id="9-多级分组"><a href="#9-多级分组" class="headerlink" title="9.多级分组"></a>9.多级分组</h5><pre><code>@Testpublic void test9(){    //多级分组    Map&lt;Employee.Status, Map&lt;String, List&lt;Employee&gt;&gt;&gt; collect6 = employees.stream()            .collect(Collectors.groupingBy(Employee::getStatus, Collectors.groupingBy((Employee e) -&gt; {                if (e.getAge() &lt;= 35) {                    return &quot;青年&quot;;                } else if (e.getAge() &lt;= 50) {                    return &quot;中年&quot;;                } else {                    return &quot;老年&quot;;                }            })));    System.out.println(collect6);    //{BUSY={青年=[Employee{name=&apos;田七&apos;, age=23, salary=8888.88, status=BUSY}], 老年=[Employee{name=&apos;李四&apos;, age=58, salary=5555.55, status=BUSY}]}, FREE={青年=[Employee{name=&apos;张三&apos;, age=18, salary=9999.99, status=FREE}], 中年=[Employee{name=&apos;赵六&apos;, age=36, salary=6666.66, status=FREE}]}, VOCATION={青年=[Employee{name=&apos;王五&apos;, age=26, salary=3333.33, status=VOCATION}]}}}</code></pre><h5 id="10-partitioningBy-返回类型Map"><a href="#10-partitioningBy-返回类型Map" class="headerlink" title="10.//partitioningBy:返回类型Map"></a>10.//partitioningBy:返回类型Map<boolean,list<t>&gt;,根据true或者false进行分组</boolean,list<t></h5><pre><code>@Testpublic void test9(){     //partitioningBy:返回类型Map&lt;Boolean,List&lt;T&gt;&gt;,根据true或者false进行分组    Map&lt;Boolean, List&lt;Employee&gt;&gt; collect7 = employees.stream()            .collect(Collectors.partitioningBy((e) -&gt; e.getSalary() &gt; 8000));    System.out.println(collect7);}</code></pre><h5 id="11-sumarizingDouble-返回类型DoubleSummaryStatistics-收集流中Double属性的统计值"><a href="#11-sumarizingDouble-返回类型DoubleSummaryStatistics-收集流中Double属性的统计值" class="headerlink" title="11.sumarizingDouble:返回类型DoubleSummaryStatistics,收集流中Double属性的统计值"></a>11.sumarizingDouble:返回类型DoubleSummaryStatistics,收集流中Double属性的统计值</h5><pre><code>@Testpublic void test9(){     //sumarizingDouble:返回类    DoubleSummaryStatistics,收集流中Double属性的统计值    DoubleSummaryStatistics statistics = employees.stream()            .collect(Collectors.summarizingDouble(Employee::getSalary));    System.out.println(statistics.getCount());    System.out.println(statistics.getSum());}</code></pre><h5 id="12-joining-返回类型String-连接流中每个字符串"><a href="#12-joining-返回类型String-连接流中每个字符串" class="headerlink" title="12.joining:返回类型String,连接流中每个字符串"></a>12.joining:返回类型String,连接流中每个字符串</h5><pre><code>@Testpublic void test9(){    //joining:返回类型String,连接流中每个字符串    String s = employees.stream()            .map(Employee::getName)            .collect(Collectors.joining(&quot;,&quot;, &quot;---&quot;, &quot;---&quot;));    System.out.println(s);}</code></pre>]]></content>
    
    <summary type="html">
    
      StreamAPI终止操作
    
    </summary>
    
      <category term="jdk8新特性" scheme="http://www.juedigulang.com/categories/jdk8%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
    
      <category term="java8" scheme="http://www.juedigulang.com/tags/java8/"/>
    
  </entry>
  
  <entry>
    <title>StreamAPI--中间操作</title>
    <link href="http://www.juedigulang.com/2018/11/05/StreamAPI%E4%B8%AD%E9%97%B4%E6%93%8D%E4%BD%9C/"/>
    <id>http://www.juedigulang.com/2018/11/05/StreamAPI中间操作/</id>
    <published>2018-11-05T10:40:43.861Z</published>
    <updated>2018-11-05T08:59:37.073Z</updated>
    
    <content type="html"><![CDATA[<h3 id="惰性求值"><a href="#惰性求值" class="headerlink" title="惰性求值"></a>惰性求值</h3><p>多个中间操作可以连接起来行程一个流水线，除非流水线上触发终止操作，否则中间操作不会执行任何的处理！而在终止操作时一次性全部处理，称为“惰性求值”</p><h3 id="筛选与切片"><a href="#筛选与切片" class="headerlink" title="筛选与切片"></a>筛选与切片</h3><h5 id="filter-Predicate-p-—接收lambda，从流中排除某些元素"><a href="#filter-Predicate-p-—接收lambda，从流中排除某些元素" class="headerlink" title="filter(Predicate p)—接收lambda，从流中排除某些元素"></a>filter(Predicate p)—接收lambda，从流中排除某些元素</h5><pre><code>//filter(Predicate p)----接收Lambda,从流中排除某些元素//内部迭代：迭代操作由StrameAPI来完成@Testpublic void test2(){    Stream&lt;Employee&gt; stream = list.stream().filter((e) -&gt;{        System.out.println(&quot;StreamApi的中间操作&quot;);        return e.getAge() &gt; 35;    });    //终止操作    stream.forEach(System.out::println);}//外部迭代@Testpublic void test3(){    Iterator&lt;Employee&gt; iter = list.iterator();    while (true){        System.out.println(iter.next());    }}</code></pre><h5 id="limit—截断流-使其元素不超过给定数量"><a href="#limit—截断流-使其元素不超过给定数量" class="headerlink" title="limit—截断流,使其元素不超过给定数量"></a>limit—截断流,使其元素不超过给定数量</h5><pre><code> //limit----截断流,使其元素不超过给定数量@Testpublic void test4(){    list.stream().filter((x) -&gt; {                System.out.println(&quot;短路&quot;);                 return x.getSalary()&gt;5000;             })            .limit(2)            .forEach(System.out::println);    /**     * 短路        Employee{name=&apos;张三&apos;, age=18, salary=9999}        短路        Employee{name=&apos;李四&apos;, age=59, salary=6666}     */}</code></pre><h5 id="skip—跳过元素-返回一个扔掉了前n个元素的流-若流中元素不满-足n个，则返回空流-与limit-n-互补"><a href="#skip—跳过元素-返回一个扔掉了前n个元素的流-若流中元素不满-足n个，则返回空流-与limit-n-互补" class="headerlink" title="skip—跳过元素,返回一个扔掉了前n个元素的流.若流中元素不满       足n个，则返回空流.与limit(n)互补"></a>skip—跳过元素,返回一个扔掉了前n个元素的流.若流中元素不满       足n个，则返回空流.与limit(n)互补</h5><pre><code>//skip----跳过元素,返回一个扔掉了前n个元素的流.若流中元素不满足n个，则返回空流.与limit(n)互补@Testpublic void test5(){    list.stream().filter((x) -&gt; x.getSalary()&gt;5000)                 .skip(2)                 .forEach(System.out::println);    /**     * Employee{name=&apos;赵六&apos;, age=8, salary=7777}       Employee{name=&apos;田七&apos;, age=38, salary=5555}     */}</code></pre><h5 id="distinct—通过流所生成元素的hashcode-和equals-去除重复元素"><a href="#distinct—通过流所生成元素的hashcode-和equals-去除重复元素" class="headerlink" title="distinct—通过流所生成元素的hashcode()和equals()去除重复元素"></a>distinct—通过流所生成元素的hashcode()和equals()去除重复元素</h5><pre><code>//distinct----通过流所生成元素的hashcode()和equals()去除重复元素@Testpublic void test6(){    list.stream().filter((x) -&gt; x.getSalary()&gt;5000)                 .skip(2)                 .distinct().forEach(System.out::println);}</code></pre><h3 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h3><h5 id="map—接收lambda-将元素转换成其他形式或提取信息-接收另一-个函数作为参数-该函数会被应用到每个元素上-并将其映射成一个-新元素"><a href="#map—接收lambda-将元素转换成其他形式或提取信息-接收另一-个函数作为参数-该函数会被应用到每个元素上-并将其映射成一个-新元素" class="headerlink" title="map—接收lambda,将元素转换成其他形式或提取信息.接收另一      个函数作为参数,该函数会被应用到每个元素上,并将其映射成一个      新元素"></a>map—接收lambda,将元素转换成其他形式或提取信息.接收另一      个函数作为参数,该函数会被应用到每个元素上,并将其映射成一个      新元素</h5><pre><code>//map----接收lambda,将元素转换成其他形式或提取信息.接收另一个函数作为参数,该函数会被应用到每个元素上,并将其映射成一个新元素@Testpublic void test7(){    List&lt;String&gt; list1 = Arrays.asList(&quot;aa&quot;,&quot;bb&quot;,&quot;cc&quot;,&quot;dd&quot;);    list1.stream().map((str) -&gt; str.toUpperCase()).forEach(System.out::println);    System.out.println(&quot;-----------------------------------------&quot;);//        list.stream().map((x) -&gt; x.getName())//                     .forEach(System.out::println);    list.stream().map(Employee::getName)//方法引用                 .forEach(System.out::println);    System.out.println(&quot;-----------------------------------------&quot;);    Stream&lt;Stream&lt;Character&gt;&gt; stream2= list1.stream().map(TestStreamAPI1::filterCharacter);    stream2.forEach((sm) -&gt;{        sm.forEach(System.out::println);    });}public static Stream&lt;Character&gt; filterCharacter(String str){    List&lt;Character&gt; characters = new ArrayList&lt;&gt;();    for (Character ch: str.toCharArray()) {        characters.add(ch);    }    return characters.stream();}</code></pre><h5 id="flatMap—接收一个函数作为参数，将流中每个值都换成另一个-流，然后把所有流连接成一个流"><a href="#flatMap—接收一个函数作为参数，将流中每个值都换成另一个-流，然后把所有流连接成一个流" class="headerlink" title="flatMap—接收一个函数作为参数，将流中每个值都换成另一个      流，然后把所有流连接成一个流"></a>flatMap—接收一个函数作为参数，将流中每个值都换成另一个      流，然后把所有流连接成一个流</h5><pre><code>//flatMap----接收一个函数作为参数，将流中每个值都换成另一个流，然后把所有流连接成一个流@Testpublic void test8(){    List&lt;String&gt; li = Arrays.asList(&quot;aa&quot;,&quot;bb&quot;,&quot;cc&quot;,&quot;dd&quot;);    Stream&lt;Character&gt; sm = li.stream().flatMap(TestStreamAPI1::filterCharacter);    sm.forEach(System.out::println);}public static Stream&lt;Character&gt; filterCharacter(String str){    List&lt;Character&gt; characters = new ArrayList&lt;&gt;();    for (Character ch: str.toCharArray()) {        characters.add(ch);    }    return characters.stream();}</code></pre><h5 id="mapToInt-ToIntFunction-f-—接收一个函数作为参数-该函数-会被应用到每个元素上-产生一个新的IntStream"><a href="#mapToInt-ToIntFunction-f-—接收一个函数作为参数-该函数-会被应用到每个元素上-产生一个新的IntStream" class="headerlink" title="mapToInt(ToIntFunction f)—接收一个函数作为参数,该函数      会被应用到每个元素上,产生一个新的IntStream"></a>mapToInt(ToIntFunction f)—接收一个函数作为参数,该函数      会被应用到每个元素上,产生一个新的IntStream</h5><pre><code>//mapToInt(ToIntFunction f)----接收一个函数作为参数,该函数会被应用到每个元素上,产生一个新的IntStream@Testpublic void test9(){    IntStream intStream = list.stream().mapToInt(Employee::getAge);    intStream.forEach(System.out::println);}</code></pre><h5 id="mapToLang-ToLangFunction-f-—接收一个函数作为参数-该-函数会被应用到每个元素上-产生一个新的LongStream"><a href="#mapToLang-ToLangFunction-f-—接收一个函数作为参数-该-函数会被应用到每个元素上-产生一个新的LongStream" class="headerlink" title="mapToLang(ToLangFunction f)—接收一个函数作为参数,该      函数会被应用到每个元素上,产生一个新的LongStream"></a>mapToLang(ToLangFunction f)—接收一个函数作为参数,该      函数会被应用到每个元素上,产生一个新的LongStream</h5><pre><code>//d.mapToLang(ToLangFunction f)----接收一个函数作为参数,该函数会被应用到每个元素上,产生一个新的LongStream@Testpublic void test10(){    LongStream longStream = list.stream().mapToLong(Employee::getSalary);    longStream.forEach(System.out::println);}</code></pre><h5 id="mapToDouble-ToDoubleFunction-f-—接收一个函数作为参-数-该函数会被应用到每个元素上-产生一个新的DoubleStream"><a href="#mapToDouble-ToDoubleFunction-f-—接收一个函数作为参-数-该函数会被应用到每个元素上-产生一个新的DoubleStream" class="headerlink" title="mapToDouble(ToDoubleFunction f)—接收一个函数作为参      数,该函数会被应用到每个元素上,产生一个新的DoubleStream"></a>mapToDouble(ToDoubleFunction f)—接收一个函数作为参      数,该函数会被应用到每个元素上,产生一个新的DoubleStream</h5><pre><code>//mapToDouble(ToDoubleFunction f)----接收一个函数作为参数,该函数会被应用到每个元素上,产生一个新的DoubleStream@Testpublic void test11(){    DoubleStream doubleStream = list.stream().mapToDouble(Employee::getSalary);    doubleStream.forEach(System.out::println);    //输出结果：9999.0,6666.0,3333.0.....}</code></pre><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><h5 id="sorted—自然排序"><a href="#sorted—自然排序" class="headerlink" title="sorted—自然排序"></a>sorted—自然排序</h5><pre><code>//sorted----自然排序@Testpublic void test12(){    List&lt;String&gt; strList = Arrays.asList(&quot;ccc&quot;,&quot;aaa&quot;,&quot;ddd&quot;,&quot;eee&quot;,&quot;bbb&quot;);    strList.stream().sorted().forEach(System.out::println);}</code></pre><h5 id="sorted-Comparator-comp-—定制排序"><a href="#sorted-Comparator-comp-—定制排序" class="headerlink" title="sorted(Comparator comp)—定制排序"></a>sorted(Comparator comp)—定制排序</h5><pre><code>//sorted(Comparator comp)----定制排序@Testpublic void test13(){    list.stream().sorted((e1,e2) -&gt;{       if(e1.getName().equals(e2.getName())){           return e1.getSex().compareTo(e2.getSex());       } else{           return e1.getName().compareTo(e2.getName());       }    }).forEach(System.out::println);}</code></pre>]]></content>
    
    <summary type="html">
    
      StreamAPI--中间操作
    
    </summary>
    
      <category term="jdk8新特性" scheme="http://www.juedigulang.com/categories/jdk8%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
    
      <category term="java" scheme="http://www.juedigulang.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>StreamAPI概述和创建</title>
    <link href="http://www.juedigulang.com/2018/11/05/Stream%E6%A6%82%E8%BF%B0%E5%92%8C%E5%88%9B%E5%BB%BA/"/>
    <id>http://www.juedigulang.com/2018/11/05/Stream概述和创建/</id>
    <published>2018-11-05T10:40:43.819Z</published>
    <updated>2018-11-05T15:30:15.726Z</updated>
    
    <content type="html"><![CDATA[<h3 id="了解Stream"><a href="#了解Stream" class="headerlink" title="了解Stream"></a>了解Stream</h3><p>Stream是Java8中处理集合的关键抽象概念，他可以指定你希望对集合进行的操作，可以执行非常复杂的查找、过滤、和映射数据等操作。使用StreamAPI对集合数据进行操作，就类似与使用SQL执行的数据库查询。也可以使用StreamAPI来并行执行操作。简而言之，StreamAPI提供了一种高效且易于使用的处理数据的方式。</p><h3 id="什么是Stream"><a href="#什么是Stream" class="headerlink" title="什么是Stream"></a>什么是Stream</h3><p>是数据渠道，用于操作数据源（集合、数组等）所生成的元素序列。“集合讲的是数据，流讲的是计算”</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><blockquote><p>Stream自己不会存储元素</p><p>Stream不会改变源对象。相反，他们会返回一个持有结果的新Stream</p><p>Stream操作是延迟的。这意味着他们会等到需要结果的时候才执行</p><h3 id="Stream操作的三个步骤"><a href="#Stream操作的三个步骤" class="headerlink" title="Stream操作的三个步骤"></a>Stream操作的三个步骤</h3><h5 id="创建Stream"><a href="#创建Stream" class="headerlink" title="创建Stream"></a>创建Stream</h5><p>一个数据源（如，集合、数组），获取一个流</p><h5 id="中间操作"><a href="#中间操作" class="headerlink" title="中间操作"></a>中间操作</h5><p>一个中间操作链，对数据源数据进行处理</p><h5 id="终止操作（终端操作）"><a href="#终止操作（终端操作）" class="headerlink" title="终止操作（终端操作）"></a>终止操作（终端操作）</h5><p>一个终止操作，执行中间操作链，并产生结果<br><img src="https://i.imgur.com/oRKJXHG.png" alt=""></p></blockquote><h3 id="创建Stream-1"><a href="#创建Stream-1" class="headerlink" title="创建Stream"></a>创建Stream</h3><h5 id="通过Collection系列集合提供Stream-或parallelStream"><a href="#通过Collection系列集合提供Stream-或parallelStream" class="headerlink" title="通过Collection系列集合提供Stream()或parallelStream()"></a>通过Collection系列集合提供Stream()或parallelStream()</h5><pre><code>@Testpublic void test(){    //1.通过Collection系列集合提供Stream()或parallelStream()    List&lt;String&gt; list = new ArrayList&lt;String&gt;();    Stream&lt;String&gt; stream1 = list.stream();    //Stream&lt;String&gt; stream1 = list.parallelStream();}</code></pre><h5 id="由数组创建流：通过Arrays中静态方法stream-获取数组流"><a href="#由数组创建流：通过Arrays中静态方法stream-获取数组流" class="headerlink" title="由数组创建流：通过Arrays中静态方法stream()获取数组流"></a>由数组创建流：通过Arrays中静态方法stream()获取数组流</h5><h6 id="重载形式，能够处理对应基本类型的数组"><a href="#重载形式，能够处理对应基本类型的数组" class="headerlink" title="重载形式，能够处理对应基本类型的数组"></a>重载形式，能够处理对应基本类型的数组</h6><blockquote><p>public static IntStream stream(int[] array)</p><p>public static LongStream stream(long[] array)</p><p>public static DoubleStream stream(double[] array)</p><pre><code>@Testpublic void test(){    //2.通过Arrays中静态方法stream()获取数组流    String[] str = new String[10];    Stream&lt;String&gt; stream2 = Arrays.stream(str);}</code></pre><h5 id="由值创建流：可以使用静态方法Stream-of-通过显示值创建流"><a href="#由值创建流：可以使用静态方法Stream-of-通过显示值创建流" class="headerlink" title="由值创建流：可以使用静态方法Stream.of(),通过显示值创建流"></a>由值创建流：可以使用静态方法Stream.of(),通过显示值创建流</h5><pre><code>@Testpublic void test(){</code></pre></blockquote><pre><code>    //3.可以使用静态方法Stream.of(),通过显示值创建流    Stream&lt;String&gt; stream3 = Stream.of(&quot;AA&quot;, &quot;BB&quot;, &quot;CC&quot;);}</code></pre><h5 id="由函数创建流：创建无限流–可以使用静态方法Stream-iterate-和Stream-generate"><a href="#由函数创建流：创建无限流–可以使用静态方法Stream-iterate-和Stream-generate" class="headerlink" title="由函数创建流：创建无限流–可以使用静态方法Stream.iterate()和Stream.generate()"></a>由函数创建流：创建无限流–可以使用静态方法Stream.iterate()和Stream.generate()</h5><pre><code> @Testpublic void test(){    //4.可以使用静态方法Stream.iterate()和Stream.generate()    //4.1迭代    Stream.iterate(0,(x) -&gt; x+2 ).limit(10).forEach(System.out::println);    System.out.println(&quot;----------------------------------------------&quot;);    //4.2生成    Stream.generate(() -&gt; Math.random()).limit(5).forEach(System.out::println);}</code></pre>]]></content>
    
    <summary type="html">
    
      StreamAPI概述和创建
    
    </summary>
    
      <category term="jdk8新特性" scheme="http://www.juedigulang.com/categories/jdk8%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
    
      <category term="java" scheme="http://www.juedigulang.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>java8构造器引用</title>
    <link href="http://www.juedigulang.com/2018/10/30/%E6%9E%84%E9%80%A0%E5%99%A8%E5%BC%95%E7%94%A8/"/>
    <id>http://www.juedigulang.com/2018/10/30/构造器引用/</id>
    <published>2018-10-30T13:18:29.453Z</published>
    <updated>2018-10-30T13:19:55.747Z</updated>
    
    <content type="html"><![CDATA[<h3 id="何为构造器引用"><a href="#何为构造器引用" class="headerlink" title="何为构造器引用"></a>何为构造器引用</h3><p>与函数式接口相结合，自动与函数式接口中方法兼容。</p><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><p>ClassName::new</p><p>有如下两种使用情况</p><h4 id="构造器引用"><a href="#构造器引用" class="headerlink" title="构造器引用"></a>构造器引用</h4><blockquote><p>构造器引用<br>ClassName::new</p></blockquote><pre><code>/** * 构造器引用 * ClassName::new */@Testpublic void test5(){    Supplier&lt;Employee&gt; sup = () -&gt; new Employee();    Employee emp = sup.get();    System.out.println(emp);    //默认的是类中的无参构造器    Supplier&lt;Employee&gt; sup1 = Employee::new;    Employee emp1 = sup1.get();    System.out.println(emp1);}@Testpublic void test6(){    Function&lt;Integer,Employee&gt; fun = (x) -&gt; new Employee(x);    Employee emp1 = fun.apply(121);    System.out.println(emp1);    Function&lt;Integer,Employee&gt; fun2 = Employee::new;    Employee emp2 = fun.apply(131);    System.out.println(emp2);    BiFunction&lt;Integer,Integer,Employee&gt; bifun = Employee::new;}</code></pre><h4 id="数组引用"><a href="#数组引用" class="headerlink" title="数组引用"></a>数组引用</h4><blockquote><p>数组引用<br>Type[]::new</p></blockquote><pre><code>/** * 数组引用 * Type[]::new */@Testpublic void test7(){    Function&lt;Integer,String[]&gt; fun = (x) -&gt; new String[x];    String[] app = fun.apply(5);    System.out.println(app.length);    Function&lt;Integer,String[]&gt; fun2 = String[]::new;    String[] app2 = fun2.apply(10);    System.out.println(app2.length);}</code></pre>]]></content>
    
    <summary type="html">
    
      java8构造器引用
    
    </summary>
    
      <category term="jdk8新特性" scheme="http://www.juedigulang.com/categories/jdk8%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
    
      <category term="java8" scheme="http://www.juedigulang.com/tags/java8/"/>
    
  </entry>
  
  <entry>
    <title>java8方法引用</title>
    <link href="http://www.juedigulang.com/2018/10/30/java8%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8/"/>
    <id>http://www.juedigulang.com/2018/10/30/java8方法引用/</id>
    <published>2018-10-30T13:18:29.450Z</published>
    <updated>2018-10-30T13:20:20.532Z</updated>
    
    <content type="html"><![CDATA[<h3 id="何是方法引用"><a href="#何是方法引用" class="headerlink" title="何是方法引用"></a>何是方法引用</h3><p>当要传递给Lambda体的操作，已经有实现的方法了，可以使用方法引用（Lambda表达式的另一种表达形式）</p><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><p>方法引用：使用操作符“::”将方法名和对象或类的名字分隔开来。有如下三种使用情况：</p><h4 id="对象-实例方法"><a href="#对象-实例方法" class="headerlink" title="对象::实例方法"></a>对象::实例方法</h4><blockquote><p>  对象实例方法<br>  对象::实例方法</p></blockquote><pre><code>/** * 对象实例方法 * 对象::实例方法 */@Testpublic void test1(){    Consumer&lt;String&gt; con1 = (x) -&gt; System.out.println(x);    con1.accept(&quot;孟楠&quot;);    Consumer&lt;String&gt; con2 = System.out::println;    con2.accept(&quot;院长&quot;);    PrintStream ps = System.out;    Consumer&lt;String&gt; con3 = ps :: println;    con3.accept(&quot;孟楠楠&quot;);    Consumer&lt;String&gt; con4 = (x) -&gt; ps.println(x);    con4.accept(&quot;梦喃喃&quot;);}@Testpublic void test2(){    Employee emp = new Employee();    //共给型函数    Supplier&lt;String&gt; sup = () -&gt; emp.getName();    String name = sup.get();    System.out.println(name);    Supplier&lt;Integer&gt; sup2 =  emp::getAge;    Integer age = sup2.get();    System.out.println(age);}</code></pre><h4 id="类-静态方法"><a href="#类-静态方法" class="headerlink" title="类::静态方法"></a>类::静态方法</h4><pre><code> @Testpublic void test3(){    Comparator&lt;Integer&gt; comp = (x,y) -&gt; Integer.compare(x,y);    System.out.println(comp.compare(3,5));    //使用类::静态方法    Comparator&lt;Integer&gt; comp2 = Integer::compare;    System.out.println(comp2.compare(6,5));}</code></pre><h4 id="类-实例方法"><a href="#类-实例方法" class="headerlink" title="类::实例方法"></a>类::实例方法</h4><pre><code>/** * 类::实例方法名 */@Testpublic void test4(){    BiPredicate&lt;String,String&gt; bi = (x,y) -&gt; x.equals(y);    System.out.println(bi.test(&quot;aa&quot;,&quot;bb&quot;));    BiPredicate&lt;String,String&gt; bi2 = String::equals;    System.out.println(bi.test(&quot;aa1&quot;,&quot;aa1&quot;));}</code></pre><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><blockquote><p>1、实现抽象方法的参数列表，必须与方法引用方法的参数列表保持一致</p><p>2、当需要引用方法的第一个参数是调用对象，并且第二个参数是需要引用方法的第二个参数（或无参数）时：ClassName::methodName</p></blockquote>]]></content>
    
    <summary type="html">
    
      java8方法引用
    
    </summary>
    
      <category term="jdk8新特性" scheme="http://www.juedigulang.com/categories/jdk8%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
    
      <category term="java8" scheme="http://www.juedigulang.com/tags/java8/"/>
    
  </entry>
  
  <entry>
    <title>java8内置四大核心函数式接口</title>
    <link href="http://www.juedigulang.com/2018/10/23/java8%E5%86%85%E7%BD%AE%E5%9B%9B%E5%A4%A7%E6%A0%B8%E5%BF%83%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3/"/>
    <id>http://www.juedigulang.com/2018/10/23/java8内置四大核心函数式接口/</id>
    <published>2018-10-23T12:33:02.777Z</published>
    <updated>2018-10-23T12:35:09.290Z</updated>
    
    <content type="html"><![CDATA[<h3 id="消费型接口"><a href="#消费型接口" class="headerlink" title="消费型接口"></a>消费型接口</h3><blockquote><p>  Consumer<t>:消费型接口</t></p><p> 包含方法：  void accept(T t)</p></blockquote><pre><code>@Testpublic void test1(){    happy(10000,(m) -&gt; System.out.println(&quot;买了个苹果本消费&quot;+m+&quot;元&quot;));}public void happy(double money, Consumer&lt;Double&gt; cons){    cons.accept(money);}</code></pre><h3 id="共给型接口"><a href="#共给型接口" class="headerlink" title="共给型接口"></a>共给型接口</h3><blockquote><p>Supplier<t>:共给型接口</t></p><p>包含方法： T get()</p></blockquote><pre><code>@Testpublic void test2(){    List&lt;Integer&gt; list = getNumList(10, () -&gt; (int) (Math.random() * 100));    for (Integer num : list) {        System.out.println(num);    }}//需求：产生指定个数的整数，并放入集合中public List&lt;Integer&gt; getNumList(int num, Supplier&lt;Integer&gt; sup){    List&lt;Integer&gt; list = new ArrayList&lt;&gt;();    for (int i = 0; i &lt; num; i++) {        Integer n = sup.get();        list.add(n);    }    return list;}</code></pre><h3 id="函数型接口"><a href="#函数型接口" class="headerlink" title="函数型接口"></a>函数型接口</h3><blockquote><p>Function<t,r>：函数型接口</t,r></p><p>包含方法： R apply(T t)</p></blockquote><pre><code>@Testpublic void test3(){    String st = strHandler(&quot;\t\t\t 我和我的祖国   &quot;, (str) -&gt; str.trim());    System.out.println(st);    String substr = strHandler(&quot;我和我的祖国&quot;, (str) -&gt; str.substring(2));    System.out.println(substr);}//需求：用于处理字符串public String strHandler(String str, Function&lt;String,String&gt; ss){   return ss.apply(str);}</code></pre><p>### </p><blockquote><p>Predicate&lt;T：断言型接口</p><p>包含方法：boolean test(T t)</p></blockquote><pre><code>@Testpublic void test4(){    List&lt;String&gt; list = Arrays.asList(&quot;hello&quot;,&quot;mengnan&quot;,&quot;wo&quot;,&quot;men&quot;,&quot;shi&quot;,&quot;nangua&quot;);    List&lt;String&gt; strList = filterStr(list, (str) -&gt; str.length() &gt; 3);    strList.forEach(System.out::println);}//需求：将满足条件的字符串放入到集合中public List&lt;String&gt; filterStr(List&lt;String&gt; list, Predicate&lt;String&gt; pre){    List&lt;String&gt; strList = new ArrayList&lt;&gt;();    for (String str: list) {        if(pre.test(str)){            strList.add(str);        }    }    return strList;}</code></pre>]]></content>
    
    <summary type="html">
    
      java8内置四大核心函数式接口
    
    </summary>
    
      <category term="jdk8新特性" scheme="http://www.juedigulang.com/categories/jdk8%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
    
      <category term="java8" scheme="http://www.juedigulang.com/tags/java8/"/>
    
  </entry>
  
  <entry>
    <title>springboot2整合mybatis</title>
    <link href="http://www.juedigulang.com/2018/10/22/springboot2%E6%95%B4%E5%90%88mybatis/"/>
    <id>http://www.juedigulang.com/2018/10/22/springboot2整合mybatis/</id>
    <published>2018-10-22T14:11:16.652Z</published>
    <updated>2018-10-22T14:42:03.461Z</updated>
    
    <content type="html"><![CDATA[<h3 id="项目使用环境"><a href="#项目使用环境" class="headerlink" title="项目使用环境"></a>项目使用环境</h3><blockquote><ol><li>开发工具：Intellij IDEA 2017.1.3</li><li>springboot: 2.0.3</li><li>jdk：1.8.0_45</li><li>maven:3.0.5</li></ol></blockquote><h3 id="额外增加功能"><a href="#额外增加功能" class="headerlink" title="额外增加功能"></a>额外增加功能</h3><blockquote><ol><li>PageHelper 分页插件</li><li>mybatis generator 自动生成代码插件</li></ol></blockquote><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><h4 id="1、创建一个springboot项目"><a href="#1、创建一个springboot项目" class="headerlink" title="1、创建一个springboot项目"></a>1、创建一个springboot项目</h4><p><img src="https://i.imgur.com/cmfDH6d.png" alt=""></p><h4 id="2、创建项目的文件结构以及jdk的版本"><a href="#2、创建项目的文件结构以及jdk的版本" class="headerlink" title="2、创建项目的文件结构以及jdk的版本"></a>2、创建项目的文件结构以及jdk的版本</h4><p><img src="https://i.imgur.com/BqvSnTe.png" alt=""></p><h4 id="3、选择项目所需要的依赖"><a href="#3、选择项目所需要的依赖" class="headerlink" title="3、选择项目所需要的依赖"></a>3、选择项目所需要的依赖</h4><p><img src="https://i.imgur.com/mI2uj1d.png" alt=""><br><img src="https://i.imgur.com/H6MhJV4.png" alt=""></p><h4 id="4、点击finish"><a href="#4、点击finish" class="headerlink" title="4、点击finish"></a>4、点击finish</h4><h4 id="5、查看pom-xml"><a href="#5、查看pom-xml" class="headerlink" title="5、查看pom.xml"></a>5、查看pom.xml</h4><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&lt;groupId&gt;com.nan&lt;/groupId&gt;&lt;artifactId&gt;blogs&lt;/artifactId&gt;&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;&lt;packaging&gt;jar&lt;/packaging&gt;&lt;name&gt;blogs&lt;/name&gt;&lt;description&gt;Demo project for Spring Boot&lt;/description&gt;&lt;parent&gt;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;&lt;version&gt;2.0.3.RELEASE&lt;/version&gt;&lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;&lt;/parent&gt;&lt;properties&gt;&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;&lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;&lt;java.version&gt;1.8&lt;/java.version&gt;&lt;/properties&gt;&lt;dependencies&gt;&lt;dependency&gt;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt;&lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;&lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;&lt;version&gt;1.3.2&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;&lt;groupId&gt;mysql&lt;/groupId&gt;&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;&lt;scope&gt;runtime&lt;/scope&gt;&lt;/dependency&gt;&lt;dependency&gt;&lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;&lt;artifactId&gt;jackson-annotations&lt;/artifactId&gt;&lt;version&gt;2.8.0&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;&lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;&lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;&lt;version&gt;2.8.8&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;&lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;&lt;artifactId&gt;jackson-core&lt;/artifactId&gt;&lt;version&gt;2.8.8&lt;/version&gt;&lt;/dependency&gt;&lt;!-- 分页插件 --&gt;&lt;dependency&gt;&lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;&lt;artifactId&gt;pagehelper-spring-boot-starter&lt;/artifactId&gt;&lt;version&gt;1.2.3&lt;/version&gt;&lt;/dependency&gt;&lt;!-- alibaba的druid数据库连接池 --&gt;&lt;dependency&gt;&lt;groupId&gt;com.alibaba&lt;/groupId&gt;&lt;artifactId&gt;druid&lt;/artifactId&gt;&lt;version&gt;1.1.0&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;!--添加通用Mapper依赖 --&gt;&lt;groupId&gt;tk.mybatis&lt;/groupId&gt;&lt;artifactId&gt;mapper-spring-boot-starter&lt;/artifactId&gt;&lt;version&gt;1.1.4&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;&lt;scope&gt;test&lt;/scope&gt;&lt;/dependency&gt;&lt;/dependencies&gt;&lt;build&gt;&lt;plugins&gt;&lt;plugin&gt;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;&lt;/plugin&gt;&lt;!-- mybatis generator 自动生成代码插件 --&gt;&lt;plugin&gt;&lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;&lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt;&lt;version&gt;1.3.2&lt;/version&gt;&lt;configuration&gt;&lt;configurationFile&gt;${basedir}/src/main/resources/generator/generatorConfig.xml&lt;/configurationFile&gt;&lt;overwrite&gt;true&lt;/overwrite&gt;&lt;verbose&gt;true&lt;/verbose&gt;&lt;/configuration&gt;&lt;/plugin&gt;&lt;/plugins&gt;&lt;/build&gt;&lt;/project&gt;</code></pre><h4 id="6、项目不使用application-properties文件-而使用更加简洁的application-yml文件："><a href="#6、项目不使用application-properties文件-而使用更加简洁的application-yml文件：" class="headerlink" title="6、项目不使用application.properties文件 而使用更加简洁的application.yml文件："></a>6、项目不使用application.properties文件 而使用更加简洁的application.yml文件：</h4><p>将原有的resource文件夹下的application.properties文件删除，创建一个新的application.yml配置文件， 文件的内容如下：</p><pre><code>#默认使用配置spring:profiles:active: dev#公共配置与profiles选择无关 mapperLocations指的路径是src/main/resourcesmybatis:typeAliasesPackage: com.nan.blogs.modelmapperLocations: classpath:mapping/*.xml---#开发配置spring:profiles: devdatasource:url: jdbc:mysql://localhost:3306/blogsusername: rootpassword: rootdriver-class-name: com.mysql.jdbc.Driver# 使用druid数据源type: com.alibaba.druid.pool.DruidDataSource#pagehelper分页插件pagehelper:helperDialect: mysqlreasonable: truesupportMethodsArguments: trueparams: count=countSql</code></pre><h4 id="7、使用mybatis-generator-自动生成代码："><a href="#7、使用mybatis-generator-自动生成代码：" class="headerlink" title="7、使用mybatis generator 自动生成代码："></a>7、使用mybatis generator 自动生成代码：</h4><p>a、配置pom.xml中generator 插件所对应的配置文件 ${basedir}/src/main/resources/generator/generatorConfig.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE generatorConfigurationPUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;&lt;generatorConfiguration&gt;&lt;!-- 数据库驱动:选择你的本地硬盘上面的数据库驱动包--&gt;&lt;classPathEntry location=&quot;D:\mavenLib\mysql\mysql-connector-java\5.1.34\mysql-connector-java-5.1.34.jar&quot;/&gt;&lt;context id=&quot;DB2Tables&quot; targetRuntime=&quot;MyBatis3&quot;&gt;&lt;commentGenerator&gt;&lt;property name=&quot;suppressDate&quot; value=&quot;true&quot;/&gt;&lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;&lt;property name=&quot;suppressAllComments&quot; value=&quot;true&quot;/&gt;&lt;/commentGenerator&gt;&lt;!--数据库链接URL，用户名、密码 --&gt;&lt;jdbcConnection driverClass=&quot;com.mysql.jdbc.Driver&quot; connectionURL=&quot;jdbc:mysql://127.0.0.1/blogs&quot; userId=&quot;root&quot; password=&quot;root&quot;&gt;&lt;/jdbcConnection&gt;&lt;javaTypeResolver&gt;&lt;property name=&quot;forceBigDecimals&quot; value=&quot;false&quot;/&gt;&lt;/javaTypeResolver&gt;&lt;!-- 生成模型的包名和位置--&gt;&lt;javaModelGenerator targetPackage=&quot;com.nan.blogs.model&quot; targetProject=&quot;src/main/java&quot;&gt;&lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;&lt;property name=&quot;trimStrings&quot; value=&quot;true&quot;/&gt;&lt;/javaModelGenerator&gt;&lt;!-- 生成映射文件的包名和位置--&gt;&lt;sqlMapGenerator targetPackage=&quot;mapping&quot; targetProject=&quot;src/main/resources&quot;&gt;&lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;&lt;/sqlMapGenerator&gt;&lt;!-- 生成DAO的包名和位置--&gt;&lt;javaClientGenerator type=&quot;XMLMAPPER&quot; targetPackage=&quot;com.nan.blogs.mapper&quot; targetProject=&quot;src/main/java&quot;&gt;&lt;property name=&quot;enableSubPackages&quot; value=&quot;true&quot;/&gt;&lt;/javaClientGenerator&gt;&lt;!-- 要生成的表 tableName是数据库中的表名或视图名 domainObjectName是实体类名--&gt;&lt;table tableName=&quot;user&quot; domainObjectName=&quot;User&quot; enableCountByExample=&quot;false&quot; enableUpdateByExample=&quot;false&quot; enableDeleteByExample=&quot;false&quot; enableSelectByExample=&quot;false&quot; selectByExampleQueryId=&quot;false&quot;&gt;&lt;/table&gt;&lt;/context&gt;&lt;/generatorConfiguration&gt;</code></pre><p>此处注意可能会报URI IS NOT REGISTER,此时需要将DTD的信息添加到配置中即可</p><h5 id="a、打开File—settings-即可"><a href="#a、打开File—settings-即可" class="headerlink" title="a、打开File—settings ,即可"></a>a、打开File—settings ,即可</h5><p><img src="https://i.imgur.com/wWBpQmA.png" alt=""></p><h5 id="b、点击run-Edit-Configurations"><a href="#b、点击run-Edit-Configurations" class="headerlink" title="b、点击run-Edit Configurations"></a>b、点击run-Edit Configurations</h5><p><img src="https://i.imgur.com/dDDwmtI.png" alt=""></p><h5 id="c、添加配置"><a href="#c、添加配置" class="headerlink" title="c、添加配置"></a>c、添加配置</h5><p><img src="https://i.imgur.com/4vnEwlJ.png" alt=""></p><h5 id="d、运行"><a href="#d、运行" class="headerlink" title="d、运行"></a>d、运行</h5><p><strong>注意！！！同一张表一定不要运行多次，因为mapper的映射文件中会生成多次的代码，导致报错，切记</strong></p><p><img src="https://i.imgur.com/TXEkk3M.png" alt=""></p><h4 id="8、生成的文件如下："><a href="#8、生成的文件如下：" class="headerlink" title="8、生成的文件如下："></a>8、生成的文件如下：</h4><h5 id="UserMapper-java"><a href="#UserMapper-java" class="headerlink" title="UserMapper.java"></a>UserMapper.java</h5><pre><code>package com.nan.blogs.mapper;import com.nan.blogs.model.User;import java.util.List;public interface UserMapper {int deleteByPrimaryKey(String id);int insert(User record);int insertSelective(User record);User selectByPrimaryKey(String id);int updateByPrimaryKeySelective(User record);int updateByPrimaryKey(User record);//自己加的List&lt;User&gt; selectAllUser();}</code></pre><h5 id="user-java"><a href="#user-java" class="headerlink" title="user.java"></a>user.java</h5><pre><code>package com.nan.blogs.model;import java.util.Date;public class User {private String id;private String account;private Date createddate;private String email;private String password;private String username;private Integer status;private Integer blogsstatus;public String getId() {return id;}public void setId(String id) {this.id = id == null ? null : id.trim();}public String getAccount() {return account;}public void setAccount(String account) {this.account = account == null ? null : account.trim();}public Date getCreateddate() {return createddate;}public void setCreateddate(Date createddate) {this.createddate = createddate;}public String getEmail() {return email;}public void setEmail(String email) {this.email = email == null ? null : email.trim();}public String getPassword() {return password;}public void setPassword(String password) {this.password = password == null ? null : password.trim();}public String getUsername() {return username;}public void setUsername(String username) {this.username = username == null ? null : username.trim();}public Integer getStatus() {return status;}public void setStatus(Integer status) {this.status = status;}public Integer getBlogsstatus() {return blogsstatus;}public void setBlogsstatus(Integer blogsstatus) {this.blogsstatus = blogsstatus;}}</code></pre><h5 id="UserMapper-xml"><a href="#UserMapper-xml" class="headerlink" title="UserMapper.xml"></a>UserMapper.xml</h5><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot; &gt;&lt;mapper namespace=&quot;com.nan.blogs.mapper.UserMapper&quot; &gt;&lt;resultMap id=&quot;BaseResultMap&quot; type=&quot;com.nan.blogs.model.User&quot; &gt;&lt;id column=&quot;id&quot; property=&quot;id&quot; jdbcType=&quot;VARCHAR&quot; /&gt;&lt;result column=&quot;account&quot; property=&quot;account&quot; jdbcType=&quot;VARCHAR&quot; /&gt;&lt;result column=&quot;createdDate&quot; property=&quot;createddate&quot; jdbcType=&quot;TIMESTAMP&quot; /&gt;&lt;result column=&quot;email&quot; property=&quot;email&quot; jdbcType=&quot;VARCHAR&quot; /&gt;&lt;result column=&quot;password&quot; property=&quot;password&quot; jdbcType=&quot;VARCHAR&quot; /&gt;&lt;result column=&quot;username&quot; property=&quot;username&quot; jdbcType=&quot;VARCHAR&quot; /&gt;&lt;result column=&quot;status&quot; property=&quot;status&quot; jdbcType=&quot;INTEGER&quot; /&gt;&lt;result column=&quot;blogsStatus&quot; property=&quot;blogsstatus&quot; jdbcType=&quot;INTEGER&quot; /&gt;&lt;/resultMap&gt;&lt;sql id=&quot;Base_Column_List&quot; &gt;id, account, createdDate, email, password, username, status, blogsStatus&lt;/sql&gt;&lt;select id=&quot;selectByPrimaryKey&quot; resultMap=&quot;BaseResultMap&quot; parameterType=&quot;java.lang.String&quot; &gt;select &lt;include refid=&quot;Base_Column_List&quot; /&gt;from userwhere id = #{id,jdbcType=VARCHAR}&lt;/select&gt;&lt;delete id=&quot;deleteByPrimaryKey&quot; parameterType=&quot;java.lang.String&quot; &gt;delete from userwhere id = #{id,jdbcType=VARCHAR}&lt;/delete&gt;&lt;insert id=&quot;insert&quot; parameterType=&quot;com.nan.blogs.model.User&quot; &gt;insert into user (id, account, createdDate, email, password, username, status, blogsStatus)values (#{id,jdbcType=VARCHAR}, #{account,jdbcType=VARCHAR}, #{createddate,jdbcType=TIMESTAMP}, #{email,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, #{username,jdbcType=VARCHAR}, #{status,jdbcType=INTEGER}, #{blogsstatus,jdbcType=INTEGER})&lt;/insert&gt;&lt;insert id=&quot;insertSelective&quot; parameterType=&quot;com.nan.blogs.model.User&quot; &gt;insert into user&lt;trim prefix=&quot;(&quot; suffix=&quot;)&quot; suffixOverrides=&quot;,&quot; &gt;&lt;if test=&quot;id != null&quot; &gt;id,&lt;/if&gt;&lt;if test=&quot;account != null&quot; &gt;account,&lt;/if&gt;&lt;if test=&quot;createddate != null&quot; &gt;createdDate,&lt;/if&gt;&lt;if test=&quot;email != null&quot; &gt;email,&lt;/if&gt;&lt;if test=&quot;password != null&quot; &gt;password,&lt;/if&gt;&lt;if test=&quot;username != null&quot; &gt;username,&lt;/if&gt;&lt;if test=&quot;status != null&quot; &gt;status,&lt;/if&gt;&lt;if test=&quot;blogsstatus != null&quot; &gt;blogsStatus,&lt;/if&gt;&lt;/trim&gt;&lt;trim prefix=&quot;values (&quot; suffix=&quot;)&quot; suffixOverrides=&quot;,&quot; &gt;&lt;if test=&quot;id != null&quot; &gt;#{id,jdbcType=VARCHAR},&lt;/if&gt;&lt;if test=&quot;account != null&quot; &gt;#{account,jdbcType=VARCHAR},&lt;/if&gt;&lt;if test=&quot;createddate != null&quot; &gt;#{createddate,jdbcType=TIMESTAMP},&lt;/if&gt;&lt;if test=&quot;email != null&quot; &gt;#{email,jdbcType=VARCHAR},&lt;/if&gt;&lt;if test=&quot;password != null&quot; &gt;#{password,jdbcType=VARCHAR},&lt;/if&gt;&lt;if test=&quot;username != null&quot; &gt;#{username,jdbcType=VARCHAR},&lt;/if&gt;&lt;if test=&quot;status != null&quot; &gt;#{status,jdbcType=INTEGER},&lt;/if&gt;&lt;if test=&quot;blogsstatus != null&quot; &gt;#{blogsstatus,jdbcType=INTEGER},&lt;/if&gt;&lt;/trim&gt;&lt;/insert&gt;&lt;select id=&quot;selectAllUser&quot; resultMap=&quot;BaseResultMap&quot;&gt;select&lt;include refid=&quot;Base_Column_List&quot; /&gt;form user&lt;/select&gt;&lt;update id=&quot;updateByPrimaryKeySelective&quot; parameterType=&quot;com.nan.blogs.model.User&quot; &gt;update user&lt;set &gt;&lt;if test=&quot;account != null&quot; &gt;account = #{account,jdbcType=VARCHAR},&lt;/if&gt;&lt;if test=&quot;createddate != null&quot; &gt;createdDate = #{createddate,jdbcType=TIMESTAMP},&lt;/if&gt;&lt;if test=&quot;email != null&quot; &gt;email = #{email,jdbcType=VARCHAR},&lt;/if&gt;&lt;if test=&quot;password != null&quot; &gt;password = #{password,jdbcType=VARCHAR},&lt;/if&gt;&lt;if test=&quot;username != null&quot; &gt;username = #{username,jdbcType=VARCHAR},&lt;/if&gt;&lt;if test=&quot;status != null&quot; &gt;status = #{status,jdbcType=INTEGER},&lt;/if&gt;&lt;if test=&quot;blogsstatus != null&quot; &gt;blogsStatus = #{blogsstatus,jdbcType=INTEGER},&lt;/if&gt;&lt;/set&gt;where id = #{id,jdbcType=VARCHAR}&lt;/update&gt;&lt;update id=&quot;updateByPrimaryKey&quot; parameterType=&quot;com.nan.blogs.model.User&quot; &gt;update userset account = #{account,jdbcType=VARCHAR},createdDate = #{createddate,jdbcType=TIMESTAMP},email = #{email,jdbcType=VARCHAR},password = #{password,jdbcType=VARCHAR},username = #{username,jdbcType=VARCHAR},status = #{status,jdbcType=INTEGER},blogsStatus = #{blogsstatus,jdbcType=INTEGER}where id = #{id,jdbcType=VARCHAR}&lt;/update&gt;&lt;/mapper&gt;</code></pre><h5 id="打开springboot的启动类，需要添加一些东西"><a href="#打开springboot的启动类，需要添加一些东西" class="headerlink" title="打开springboot的启动类，需要添加一些东西"></a>打开springboot的启动类，需要添加一些东西</h5><pre><code>package com.nan.blogs;import org.mybatis.spring.annotation.MapperScan;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.EnableAutoConfiguration;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.context.annotation.ComponentScan;@EnableAutoConfiguration@SpringBootApplication@ComponentScan@MapperScan(&quot;com.nan.blogs.mapper&quot;)//项目中对应的mapper类的路径加进来就可以了public class BlogsApplication {public static void main(String[] args) {SpringApplication.run(BlogsApplication.class, args);}}</code></pre><p>注意：@MapperScan(“com.winter.mapper”)这个注解非常的关键，这个对应了项目中mapper（dao）所对应的包路径，很多就是这里忘了加导致异常的</p><h4 id="9、编写测试类"><a href="#9、编写测试类" class="headerlink" title="9、编写测试类"></a>9、编写测试类</h4><h5 id="1、先看编写完之后的项目结构"><a href="#1、先看编写完之后的项目结构" class="headerlink" title="1、先看编写完之后的项目结构"></a>1、先看编写完之后的项目结构</h5><p><img src="https://i.imgur.com/1wnS9NQ.png" alt=""></p><h5 id="2、把controller、service的代码写好"><a href="#2、把controller、service的代码写好" class="headerlink" title="2、把controller、service的代码写好"></a>2、把controller、service的代码写好</h5><h5 id="controller代码如下："><a href="#controller代码如下：" class="headerlink" title="controller代码如下："></a>controller代码如下：</h5><pre><code>package com.nan.blogs.controller;import com.nan.blogs.model.User;import com.nan.blogs.service.UserService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.ResponseBody;@Controller@RequestMapping(value = &quot;/user&quot;)public class UserController {@Autowiredpublic UserService userService;/*** 添加方法* @param user* @return*/@ResponseBody@RequestMapping(value = &quot;/add&quot;,produces = {&quot;application/json;charser=UTF-8&quot;})public int addUser(User user){return userService.addUser(user);}/*** 分页方法* @param pageNum* @param pageSize* @return*/@ResponseBody@RequestMapping(value = &quot;/all/{pageNum}/{pageSize}&quot;,produces = {&quot;application/json;charser=UTF-8&quot;})public Object findAllUser(@PathVariable(&quot;pageNum&quot;) int pageNum, @PathVariable(&quot;pathSize&quot;) int pageSize){return userService.findAllUser(pageNum,pageSize);}/*** 通过id查询用户* @param id* @return*/@ResponseBody@RequestMapping(value = &quot;/getId&quot;,produces = {&quot;application/json;charser=UTF-8&quot;})public User getId(String id){return userService.getId(id);}}</code></pre><h6 id="service代码"><a href="#service代码" class="headerlink" title="service代码"></a>service代码</h6><pre><code>package com.nan.blogs.service;import com.nan.blogs.model.User;public interface UserService {//添加用户信息int addUser(User user);//分页查找用户Object findAllUser(int pageNum, int pageSize);//通过主键查询用户信息User getId(String id);}</code></pre><h6 id="serviceImpl代码"><a href="#serviceImpl代码" class="headerlink" title="serviceImpl代码"></a>serviceImpl代码</h6><pre><code>package com.nan.blogs.service.impl;import com.github.pagehelper.PageHelper;import com.nan.blogs.mapper.UserMapper;import com.nan.blogs.model.User;import com.nan.blogs.service.UserService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;@Servicepublic class UserServiceImpl implements UserService{@Autowiredprivate UserMapper userMapper;/*** 添加用户信息* @param user* @return*/@Overridepublic int addUser(User user) {return userMapper.insertSelective(user);}/** 这个方法中用到了我们开头配置依赖的分页插件pagehelper* 很简单，只需要在service层传入参数，然后将参数传递给一个插件的一个静态方法即可；* pageNum 开始页数* pageSize 每页显示的数据条数* */@Overridepublic Object findAllUser(int pageNum, int pageSize) {PageHelper.startPage(pageNum,pageSize);return userMapper.selectAllUser();}/*** 通过主键查询用户信息* @param id* @return*/@Overridepublic User getId(String id) {return userMapper.selectByPrimaryKey(id);}}</code></pre><h4 id="10、启动项目进行测试："><a href="#10、启动项目进行测试：" class="headerlink" title="10、启动项目进行测试："></a>10、启动项目进行测试：</h4><p><img src="https://i.imgur.com/QdxVcAx.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      springboot2整合mybatis
    
    </summary>
    
      <category term="springboot" scheme="http://www.juedigulang.com/categories/springboot/"/>
    
    
      <category term="springboot" scheme="http://www.juedigulang.com/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>java8中Lambda表达式</title>
    <link href="http://www.juedigulang.com/2018/10/22/Java8%E4%B8%ADLambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://www.juedigulang.com/2018/10/22/Java8中Lambda表达式/</id>
    <published>2018-10-22T14:11:16.651Z</published>
    <updated>2018-10-30T13:28:56.508Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Lambda表达式基础语法"><a href="#Lambda表达式基础语法" class="headerlink" title="Lambda表达式基础语法"></a>Lambda表达式基础语法</h3><pre><code>Lambda表达式在Java中引入了一个新的语法元素和操作符“-&gt;”，改操作符成为箭头操作符或者Lambda表达式操作符。它将Lambda分为两部分：左侧：Lambda 表达式的参数列表右侧：Lambda 表达式要执行的功能，即Lambda体</code></pre><h4 id="语法格式一：无参数，无返回值"><a href="#语法格式一：无参数，无返回值" class="headerlink" title="语法格式一：无参数，无返回值"></a>语法格式一：无参数，无返回值</h4><blockquote><p>() -System.out.println(“hello Lambda”);</p></blockquote><pre><code>/** * 语法格式一：无参数，无返回值 * () -&gt; System.out.println(&quot;Hello Lambda&quot;) */@Testpublic void test1(){    int num = 0;//Jdk以前，必须加final；1.8可以省略    Runnable r = new Runnable() {        @Override        public void run() {            System.out.println(&quot;Hello World&quot;+num);        }    };    r.run();    System.out.println(&quot;-------------------------------------------&quot;);    //使用lambda表达式    Runnable r1 = () -&gt; System.out.println(&quot;Hello Lambda!!&quot;);    r1.run();}</code></pre><h4 id="语法格式二：Lambda需要一个参数-无返回值"><a href="#语法格式二：Lambda需要一个参数-无返回值" class="headerlink" title="语法格式二：Lambda需要一个参数,无返回值"></a>语法格式二：Lambda需要一个参数,无返回值</h4><blockquote><p>(x) -System.out.println(“Hello Lambda”)</p></blockquote><pre><code> /** * 语法格式二：有一个参数，无返回值 * (x) -&gt; System.out.println(&quot;Hello Lambda&quot;) */@Testpublic void test2(){    Consumer&lt;String&gt; cons = (x) -&gt; System.out.println(x);    cons.accept(&quot;我爱孟楠楠&quot;);}</code></pre><h4 id="语法格式三：有一个参数，无返回值，小括号可以省略不写"><a href="#语法格式三：有一个参数，无返回值，小括号可以省略不写" class="headerlink" title="语法格式三：有一个参数，无返回值，小括号可以省略不写"></a>语法格式三：有一个参数，无返回值，小括号可以省略不写</h4><blockquote><p> x -System.out.println(“Hello Lambda”)</p></blockquote><pre><code>/** * 语法格式三：有一个参数，无返回值，小括号可以省略不写 * x -&gt; System.out.println(&quot;Hello Lambda&quot;) */@Testpublic void test3(){    Consumer&lt;String&gt; cons = x -&gt; System.out.println(x);    cons.accept(&quot;我爱中国&quot;);}</code></pre><h4 id="语法格式四：有两个以上参数，有返回值，并且Lambda体中有多条语句"><a href="#语法格式四：有两个以上参数，有返回值，并且Lambda体中有多条语句" class="headerlink" title="语法格式四：有两个以上参数，有返回值，并且Lambda体中有多条语句"></a>语法格式四：有两个以上参数，有返回值，并且Lambda体中有多条语句</h4><blockquote><p>Comparator&lt;Integercom = (x,y) -{</p><pre><code>System.out.println(&quot;函数式接口&quot;);return Integer.compare(x,y);}；</code></pre></blockquote><pre><code>/** * 语法格式四：有两个以上参数，有返回值，并且Lambda体中有多条语句 * Comparator&lt;Integer&gt; com = (x,y) -&gt; { *           System.out.println(&quot;函数式接口&quot;); *          return Integer.compare(x,y); }; */@Testpublic void test4(){    Comparator&lt;Integer&gt; com = (x,y) -&gt; {      System.out.println(&quot;函数式接口&quot;);      return Integer.compare(x,y);    };    com.compare(3,5);}</code></pre><h4 id="语法格式五：若Lambda体中只有一条语句，大括号和return都可以忽略不写"><a href="#语法格式五：若Lambda体中只有一条语句，大括号和return都可以忽略不写" class="headerlink" title="语法格式五：若Lambda体中只有一条语句，大括号和return都可以忽略不写"></a>语法格式五：若Lambda体中只有一条语句，大括号和return都可以忽略不写</h4><blockquote><p>Comparator&lt;Integercom = (x,y) -Integer.compare(x,y);</p></blockquote><pre><code>/** * 语法格式五：若Lambda体中只有一条语句，大括号和return都可以忽略不写 * Comparator&lt;Integer&gt; com = (x,y) -&gt; Integer.compare(x,y); */@Testpublic void test5(){    Comparator&lt;Integer&gt; com = (x,y) -&gt; {        System.out.println(&quot;函数式接口&quot;);        return Integer.compare(x,y);    };}</code></pre><h4 id="语法格式六：Lambda表达式的参数列表的数据类型可以省略不写，因为JVM编译器通过上下文推断出，数据类型，即“类型推断”"><a href="#语法格式六：Lambda表达式的参数列表的数据类型可以省略不写，因为JVM编译器通过上下文推断出，数据类型，即“类型推断”" class="headerlink" title="语法格式六：Lambda表达式的参数列表的数据类型可以省略不写，因为JVM编译器通过上下文推断出，数据类型，即“类型推断”"></a>语法格式六：Lambda表达式的参数列表的数据类型可以省略不写，因为JVM编译器通过上下文推断出，数据类型，即“类型推断”</h4><pre><code>/** * 语法格式六：Lambda表达式的参数列表的数据类型可以省略不写，因为JVM编译器通过上下文推断出，数据类型，即“类型推断” * Comparator&lt;Integer&gt; com = (Integer x,Integer y) -&gt; Integer.compare(x,y); * 小括号中的Integer可以省略，因为前面Comparator中已经指定了Integer类型，可以通过类型上下文推断出想x,y的类型 */@Testpublic void test6(){    Comparator&lt;Integer&gt; com = (x,y) -&gt;  Integer.compare(x,y);}</code></pre><h3 id="Lambda表达式需要“函数式接口”的支持"><a href="#Lambda表达式需要“函数式接口”的支持" class="headerlink" title="Lambda表达式需要“函数式接口”的支持"></a>Lambda表达式需要“函数式接口”的支持</h3><p>函数式接口：接口中只有一个抽象方法的接口，成为函数式接口。可以使用注解@FunctionalInterface修饰，可以检查是否是函数式接口</p>]]></content>
    
    <summary type="html">
    
      此用来简化java开发
    
    </summary>
    
      <category term="jdk8新特性" scheme="http://www.juedigulang.com/categories/jdk8%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
    
      <category term="java8新特性" scheme="http://www.juedigulang.com/tags/java8%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>云漾科技面试题</title>
    <link href="http://www.juedigulang.com/2018/06/10/%E6%9F%90%E5%85%AC%E5%8F%B8%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://www.juedigulang.com/2018/06/10/某公司面试题/</id>
    <published>2018-06-09T16:00:00.000Z</published>
    <updated>2018-06-10T07:18:06.165Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、String是否可以被继承，为什么？"><a href="#1、String是否可以被继承，为什么？" class="headerlink" title="1、String是否可以被继承，为什么？"></a>1、String是否可以被继承，为什么？</h3><pre><code>String类不能被继承，因为它是被final修饰的String的完整签名是：public final class String</code></pre><h3 id="2、HashMap、HashTable、concurrentHashMap、LinkHashMap的区别"><a href="#2、HashMap、HashTable、concurrentHashMap、LinkHashMap的区别" class="headerlink" title="2、HashMap、HashTable、concurrentHashMap、LinkHashMap的区别."></a>2、HashMap、HashTable、concurrentHashMap、LinkHashMap的区别.</h3><p>HashMap和HashTable区别：</p><blockquote><p>1.HashMap是非synchronized,hashTable 是synchronized;</p><p> 2.HashMap可以接受为Null的Key和value，而hashtable不能接受；(在hashtable中会提示空指针异常NullPointerException)</p></blockquote><p>concurrentHashMap 和 HashTable 区别</p><blockquote><p>Hashtable的大小增加到一定的时候，性能会急剧下降，因为迭代时需要被锁定很长的时间。因为ConcurrentHashMap引入了分割(segmentation)，不论它变得多么大，仅仅需要锁定map的某个部分，而其它的线程不需要等到迭代完成才能访问map。简而言之，在迭代的过程中，ConcurrentHashMap仅仅锁定map的某个部分，而Hashtable则会锁定整个map</p></blockquote><p>LinkedHashMap 是HashMap的一个子类，如果需要输出的顺序和输入的相同,那么用LinkedHashMap可以实现,它还可以按读取顺序来排列，像连接池中可以应用。</p><h3 id="3、HashMap、concurrentHashMap底层的实现原理"><a href="#3、HashMap、concurrentHashMap底层的实现原理" class="headerlink" title="3、HashMap、concurrentHashMap底层的实现原理."></a>3、HashMap、concurrentHashMap底层的实现原理.</h3><p>详情请参考：<a href="https://blog.csdn.net/qq_27093465/article/details/52279473" target="_blank" rel="external">https://blog.csdn.net/qq_27093465/article/details/52279473</a></p><h3 id="4、java-util-concurrent中有哪些类"><a href="#4、java-util-concurrent中有哪些类" class="headerlink" title="4、java.util.concurrent中有哪些类?"></a>4、java.util.concurrent中有哪些类?</h3><p>Condition、CountDownLatch、Semaphore、ReentrantLock、ReentrantReadWriteLock、Callable。详情请见这一篇：</p><h3 id="5、volatile是关键字吗，可以用其替代锁吗？"><a href="#5、volatile是关键字吗，可以用其替代锁吗？" class="headerlink" title="5、volatile是关键字吗，可以用其替代锁吗？"></a>5、volatile是关键字吗，可以用其替代锁吗？</h3><p>详情请参考：<a href="http://ifeve.com/volatile/" target="_blank" rel="external">http://ifeve.com/volatile/</a></p><h3 id="6、redis是什么，用在什么场景"><a href="#6、redis是什么，用在什么场景" class="headerlink" title="6、redis是什么，用在什么场景"></a>6、redis是什么，用在什么场景</h3><p>1、为什么使用</p><pre><code>解决应用服务器的cpu和内存压力减少io的读操作，减轻io的压力关系型数据库的扩展性不强，难以改变表结构</code></pre><p>2、优点：</p><pre><code>nosql数据库没有关联关系，数据结构简单，拓展表比较容易nosql读取速度快，对较大数据处理快</code></pre><p>3、适用场景：</p><pre><code>数据高并发的读写海量数据的读写对扩展性要求高的数据</code></pre><p>4、不适场景：</p><pre><code>需要事务支持（非关系型数据库）基于sql结构化查询储存，关系复杂</code></pre><h3 id="7、消息队列的使用场景"><a href="#7、消息队列的使用场景" class="headerlink" title="7、消息队列的使用场景"></a>7、消息队列的使用场景</h3><p>转自：<a href="https://blog.csdn.net/he90227/article/details/50800646" target="_blank" rel="external">https://blog.csdn.net/he90227/article/details/50800646</a></p><h3 id="8、请描述jvm的内存结构"><a href="#8、请描述jvm的内存结构" class="headerlink" title="8、请描述jvm的内存结构"></a>8、请描述jvm的内存结构</h3><p>转自：<a href="https://blog.csdn.net/bluetjs/article/details/52874852" target="_blank" rel="external">https://blog.csdn.net/bluetjs/article/details/52874852</a></p><h3 id="9、说出java内存中是类加载器"><a href="#9、说出java内存中是类加载器" class="headerlink" title="9、说出java内存中是类加载器"></a>9、说出java内存中是类加载器</h3><p>转自：<a href="https://www.ibm.com/developerworks/cn/java/j-lo-classloader/" target="_blank" rel="external">https://www.ibm.com/developerworks/cn/java/j-lo-classloader/</a></p><h3 id="10、请写出一种单例模式、并说出其优缺点"><a href="#10、请写出一种单例模式、并说出其优缺点" class="headerlink" title="10、请写出一种单例模式、并说出其优缺点"></a>10、请写出一种单例模式、并说出其优缺点</h3><p>饿汉式</p><pre><code>public class Student{    private Student(){}    private static Student s = new Student();    public static Student getStudent(){        return s;    }}</code></pre><p>懒汉式</p><pre><code>public class Teacher{    private Student(){}    private static Teacher t = null;    public static Teacher getTeacher(){        if(t == null){            t = new Teacher();        }    return t;    }}</code></pre><p>饿汉式和懒汉式的区别？</p><blockquote><p>饿汉就是类一旦加载，就把单例初始化完成，保证getInstance的时候，单例是已经存在的了。<br> 懒汉比较懒，只有当调用getInstance的时候，才回去初始化这个单例。</p></blockquote><p> 另外从以下两点再区分以下这两种方式：</p><blockquote><p> 1、线程安全：<br>    饿汉式天生就是线程安全的，可以直接用于多线程而不会出现问题，<br>    懒汉式本身是非线程安全的，为了实现线程安全有几种写法，分别是上面的1、2、3，这三种实现在资源加载和性能方面有些区别。</p><p> 2、资源加载和性能：<br>    饿汉式在类创建的同时就实例化一个静态对象出来，不管之后会不会使用这个单例，都会占据一定的内存，但是相应的，在第一次调用时速度也会更快，因为其资源已经初始化完成，<br>    懒汉式顾名思义，会延迟加载，在第一次使用该单例的时候才会实例化对象出来，第一次调用时要做初始化，如果要做的工作比较多，性能上会有些延迟，之后就和饿汉式一样了。</p><h3 id="11、请设计出一种生产者、消费者模式"><a href="#11、请设计出一种生产者、消费者模式" class="headerlink" title="11、请设计出一种生产者、消费者模式"></a>11、请设计出一种生产者、消费者模式</h3><h4 id="设计模式-生产者消费者模式"><a href="#设计模式-生产者消费者模式" class="headerlink" title="设计模式-生产者消费者模式"></a>设计模式-生产者消费者模式</h4><p>常见情景：<br>某个模块负责产生数据，这些数据由另一个模块来负责处理。产生数据的模块，就形象地称为生产者；而处理数据的模块，就称为消费者。</p><p>该模式还需要有一个缓冲区处于生产者和消费者之间，作为一个中介。生产者把数据放入缓冲区，而消费者从缓冲区取出数据</p></blockquote><p>缓冲区作用</p><blockquote><p>1、 解耦，生产者和消费者只依赖缓冲区，而不互相依赖</p><p>2、支持并发和异步</p></blockquote><p>方式一：同步队列</p><pre><code>/** * 生产者、消费者缓冲区 */public class Storage implements IStorage {private final int maxSize = 10;private Queue&lt;Object&gt; queue = new LinkedList&lt;Object&gt;();@Overridepublic void put(Object obj) {    synchronized (queue) {        while (queue.size() &gt; maxSize) {            System.out.println(&quot;缓冲区已满，不能进入&quot;);            try {                queue.wait();            } catch (InterruptedException e) {                e.printStackTrace();            }        }        queue.add(obj);        System.out.println(&quot;进入缓冲区&quot;);        queue.notifyAll();    }}@Overridepublic Object get() {    Object obj = null;    synchronized (queue) {        while (queue.size() &lt;= 0) {            System.out.println(&quot;缓冲区为空, 进入等待&quot;);            try {                queue.wait();            } catch (InterruptedException e) {                e.printStackTrace();            }        }        obj = queue.poll();        System.out.println(&quot;离开缓冲区&quot;);        queue.notifyAll();    }    return obj;}}</code></pre><p>方法二：可重入锁</p><pre><code>public class Storage implements IStorage {private final int maxSize = 20;private LinkedList&lt;Object&gt; list = new LinkedList&lt;Object&gt;();private final Lock lock = new ReentrantLock();// 仓库满的条件变量private final Condition full = lock.newCondition();// 仓库空的条件变量private final Condition empty = lock.newCondition();@Overridepublic void put(Object obj) {    lock.lock();    while (list.size() &gt;= maxSize) {        try {            System.out.println(&quot;缓冲区已满，不能进入&quot;);            // 生产阻塞            full.await();        } catch (InterruptedException e) {            e.printStackTrace();        }    }    list.add(obj);    System.out.println(&quot;进入缓冲区&quot;);    empty.signalAll();    lock.unlock();}@Overridepublic Object get() {    lock.lock();    while (list.size() &lt;= 0) {        try {            System.out.println(&quot;缓冲区为空, 进入等待&quot;);            // 消费阻塞            empty.await();        } catch (InterruptedException e) {            e.printStackTrace();        }    }    Object obj = list.remove();    System.out.println(&quot;离开缓冲区&quot;);    full.signalAll();    lock.unlock();    return obj;}}</code></pre><p>方法三：阻塞队列</p><pre><code>  public class Storage implements IStorage {private LinkedBlockingQueue&lt;Object&gt; list = new LinkedBlockingQueue&lt;Object&gt;(10);@Overridepublic void put(Object obj) {    try {        list.put(obj);    } catch (InterruptedException e) {        e.printStackTrace();    }    System.out.println(&quot;进入缓冲区&quot;);}@Overridepublic Object get() {    Object obj = null;    try {        obj = list.take();    } catch (InterruptedException e) {        e.printStackTrace();    }    System.out.println(&quot;离开缓冲区&quot;);    return obj;}}</code></pre><p>转载自：<a href="https://www.cnblogs.com/alex09/p/6675664.html****" target="_blank" rel="external">https://www.cnblogs.com/alex09/p/6675664.html****</a></p><h3 id="12、请根据下面的表格，写出其要求的sql"><a href="#12、请根据下面的表格，写出其要求的sql" class="headerlink" title="12、请根据下面的表格，写出其要求的sql"></a>12、请根据下面的表格，写出其要求的sql</h3><table><br>    <tr><br>        <td>ID</td><br>        <td>NAME</td><br>    </tr><br>    <tr><br>        <td>1</td><br>        <td>a</td><br>    </tr><br>    <tr><br>        <td>2</td><br>        <td>b</td><br>    </tr><br>    <tr><br>        <td>3</td><br>        <td>b</td><br>    </tr><br>     <tr><br>        <td>4</td><br>        <td>a</td><br>    </tr><br>     <tr><br>        <td>5</td><br>        <td>c</td><br>    </tr><br>    <tr><br>        <td>6</td><br>        <td>c</td><br>    </tr><br></table><br> 请写一条删除语句，判断id值，id值较大的删除掉，留下较小的，如下表格展示<br><table><br>    <tr><br>        <td>ID</td><br>        <td>NAME</td><br>    </tr><br>    <tr><br>        <td>1</td><br>        <td>a</td><br>    </tr><br>    <tr><br>        <td>2</td><br>        <td>b</td><br>    </tr><br>    <tr><br>        <td>5</td><br>        <td>c</td><br>    </tr><br></table><p>sql语句如下：</p><blockquote><p>delete from user where id not in ( select id from (select id from user group by name) a)</p><h3 id="13、请根据下面的表格，写出其要求的sql"><a href="#13、请根据下面的表格，写出其要求的sql" class="headerlink" title="13、请根据下面的表格，写出其要求的sql"></a>13、请根据下面的表格，写出其要求的sql</h3><table><br>    <tr><br>        <td>name</td><br>        <td>sex</td><br>        <td>count</td><br>    </tr><br>    <tr><br>        <td>中国</td><br>        <td>1</td><br>        <td>100</td><br>    </tr><br>    <tr><br>       <td>中国</td><br>        <td>2</td><br>        <td>120</td><br>    </tr><br>    <tr><br>        <td>日本</td><br>        <td>1</td><br>        <td>80</td><br>    </tr><br>    <tr><br>        <td>日本</td><br>        <td>2</td><br>        <td>130</td><br>    </tr><br>    <tr><br>        <td>美国</td><br>        <td>1</td><br>        <td>150</td><br>    </tr><br>    <tr><br>        <td>美国</td><br>        <td>2</td><br>        <td>100</td><br>    </tr><br></table></blockquote><p>如果sex =1代表男，sex=2代表女，则将上面的表格变为下面的格式<br>        <table><br>            <tr><br>                <td>name</td><br>                <td>男</td><br>                <td>女</td><br>            </tr><br>            <tr><br>                <td>中国</td><br>                <td>100</td><br>                <td>120</td><br>            </tr><br>            <tr><br>               <td>日本</td><br>                <td>80</td><br>                <td>130</td><br>            </tr><br>            <tr><br>                <td>美国</td><br>                <td>150</td><br>                <td>100</td><br>            </tr><br>        </table><br>    请写出对应的sql<br>sql语句如下：</p><blockquote><p>select c.name,c.count 男,a.count 女 from cc c LEFT JOIN (select name,sex,count from cc) a on a.<code>name</code> = c.name where c.sex =1 and a.sex=2 group by c.name  </p></blockquote>]]></content>
    
    <summary type="html">
    
      一次失败的面试
    
    </summary>
    
      <category term="java" scheme="http://www.juedigulang.com/categories/java/"/>
    
    
      <category term="挂了" scheme="http://www.juedigulang.com/tags/%E6%8C%82%E4%BA%86/"/>
    
  </entry>
  
  <entry>
    <title>测试使用jdbc工具类简化JDBC-新增开发</title>
    <link href="http://www.juedigulang.com/2018/04/25/jdbc%E6%B5%8B%E8%AF%95%E6%96%B0%E5%A2%9E%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    <id>http://www.juedigulang.com/2018/04/25/jdbc测试新增工具类/</id>
    <published>2018-04-25T15:14:19.438Z</published>
    <updated>2018-05-02T13:53:33.652Z</updated>
    
    <content type="html"><![CDATA[<h3 id="方法说明"><a href="#方法说明" class="headerlink" title="方法说明"></a>方法说明</h3><p>此jdbc测试工具类是为了简化使用jdbc进行新增的方法，使用此方法可以避免使用uuid生成的主键，此举主要是为了如果在有一个同样数据库，里面两条数据的主键一致性问题。因为使用hibernate可以自动生成32位的uuid</p><h3 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h3><pre><code>import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.SQLException;import java.util.HashMap;import java.util.Map;import java.util.Properties;import java.util.Set;import org.apache.commons.lang3.StringUtils;import com.cloud.icenter.common.utils.DESUtil;import com.cloud.icenter.common.utils.JDBCUtil;import com.cloud.icenter.common.utils.JDBCUtil.DataBaseType;/** * 测试使用JDBCUtil工具类来简化JDBC开发 * @author ynxiea */public class JdbcOperationUtil {    static Properties pros = null; // 可以帮助读取和处理资源文件中的信息    static { // 加载JDBCUtil类的时候调用。注意这里的话，只会被加载一次。        pros = new Properties();        try{            //关键的代码             pros.load(Thread.currentThread().getContextClassLoader().getResourceAsStream(&quot;jdbc.properties&quot;));            // 对jdbc.properties 文件进行解密            String userName = pros.getProperty(&quot;jdbc.username&quot;);              if (userName != null) {                  pros.setProperty(&quot;jdbc.username&quot;,DESUtil.decrypt(userName, DESUtil.key));             }              String passWord = pros.getProperty(&quot;jdbc.password&quot;);              if (passWord != null) {                  pros.setProperty(&quot;jdbc.password&quot;, DESUtil.decrypt(passWord, DESUtil.key));              }              String url = pros.getProperty(&quot;jdbc.url&quot;);              if (url != null) {                  pros.setProperty(&quot;jdbc.url&quot;, DESUtil.decrypt(url, DESUtil.key));              }              String driver = pros.getProperty(&quot;jdbc.driver&quot;);              if(driver != null){                  pros.setProperty(&quot;jdbc.driver&quot;, DESUtil.decrypt(driver, DESUtil.key));              }            String dialect = pros.getProperty(&quot;hibernate.dialect&quot;);              if (dialect != null) {                  pros.setProperty(&quot;hibernate.dialect&quot;, DESUtil.decrypt(dialect, DESUtil.key));              }        } catch(Exception e){            e.printStackTrace();        }    }    /**     * 获取JDBC数据库连接信息     * @return     * @throws Exception     */    public static Connection getConnection() throws Exception {        return JDBCUtil.getConnection(pros.getProperty(&quot;jdbc.url&quot;),                    pros.getProperty(&quot;jdbc.username&quot;),                    pros.getProperty(&quot;jdbc.password&quot;),                    DataBaseType.MYSQL);    }    /**     * 保存数据     * @param tableName 表名称     * @param data 数据     * @throws Exception     */    public static int saveData(String tableName, Map&lt;String, Object&gt; data) {        Connection conn = null;        PreparedStatement pst = null;        try {            if (!StringUtils.isEmpty(tableName) &amp;&amp; data != null &amp;&amp; data.size()&gt;0) {                conn =  getConnection();                StringBuilder sb = new StringBuilder();                sb.append(&quot; insert into &quot;);                sb.append(tableName);                sb.append(&quot;(&quot;);                Set&lt;String&gt; sets =  data.keySet();                int size = sets.size();                int count = 1;                for (String key : sets) {                    if (count == size) {                        sb.append(key);                    } else {                        sb.append(key+&quot;,&quot;);                    }                    count++;                }                sb.append(&quot;)&quot;);                sb.append(&quot; VALUES (&quot;);                int count1 = 1;                for (String key : sets) {                    if (count1 == size) {                        sb.append(&quot;?&quot;);                    } else {                        sb.append(&quot;?,&quot;);                    }                    count1++;                }                sb.append(&quot;)&quot;);                //System.out.println(&quot;sql=&quot;+sb.toString());                pst = conn.prepareStatement(sb.toString());                int start = 1;                for (String key : sets) {                    pst.setObject(start, data.get(key));                    start++;                }                int res = pst.executeUpdate();                return res;            }        } catch (Exception e) {            e.printStackTrace();        } finally {            try {                pst.close();                conn.close();                pst = null;                conn = null;            } catch (SQLException e) {                e.printStackTrace();            }        }        return 0;    }    public static void main(String[] args) throws Exception {        //System.out.println(getConnection());        String tableName = &quot;irsp_coding_org&quot;;        Map&lt;String, Object&gt; data = new HashMap&lt;String, Object&gt;();        data.put(&quot;ID&quot;, &quot;8a90fa955d888e2f015d88bcd66f0008&quot;);        data.put(&quot;ORG_ID&quot;, &quot;8a90fa955d888e2f015d88bcd66f9998&quot;);        data.put(&quot;CODE_ID&quot;, &quot;8a90fa955d888e2f015d88bcd66f6668&quot;);        saveData(tableName, data);    }}</code></pre><h3 id="上面方法所用到的工具类如下："><a href="#上面方法所用到的工具类如下：" class="headerlink" title="上面方法所用到的工具类如下："></a>上面方法所用到的工具类如下：</h3><h2 id="第一个为DESUtil-代码如下："><a href="#第一个为DESUtil-代码如下：" class="headerlink" title="第一个为DESUtil,代码如下："></a>第一个为DESUtil,代码如下：</h2><pre><code>import java.io.IOException;import java.security.SecureRandom;import javax.crypto.Cipher;import javax.crypto.SecretKey;import javax.crypto.SecretKeyFactory;import javax.crypto.spec.DESKeySpec;import sun.misc.BASE64Decoder;import sun.misc.BASE64Encoder;public class DESUtil {private final static String DES = &quot;DES&quot;;public static String key=&quot;cc6b473b7ea2f23546d0361573b98b30&quot;;public static void main(String[] args) throws Exception {String data = &quot;jdbc:mysql://10.16.123.149:3306/irsp_xm?useUnicode=true&amp;characterEncoding=utf8&quot;;//  String key = &quot;wang!@#$%&quot;;System.err.println(encrypt(data, key));System.err.println(decrypt(encrypt(data, key), key));}/** * Description 根据键值进行加密 * @param data  * @param key  加密键byte数组 * @return * @throws Exception */public static String encrypt(String data, String key) throws Exception {byte[] bt = encrypt(data.getBytes(&quot;UTF-8&quot;), key.getBytes(&quot;UTF-8&quot;));String strs = new BASE64Encoder().encode(bt);return strs;}/** * Description 根据键值进行解密 * @param data * @param key  加密键byte数组 * @return * @throws IOException * @throws Exception */public static String decrypt(String data, String key){    try {        if (data == null)            return null;        BASE64Decoder decoder = new BASE64Decoder();        byte[] buf = decoder.decodeBuffer(data);        byte[] bt = decrypt(buf,key.getBytes(&quot;UTF-8&quot;));        return new String(bt,&quot;UTF-8&quot;);        } catch (Exception e) {            return data;        }}/** * Description 根据键值进行加密 * @param data * @param key  加密键byte数组 * @return * @throws Exception */private static byte[] encrypt(byte[] data, byte[] key) throws Exception {// 生成一个可信任的随机数源SecureRandom sr = new SecureRandom();// 从原始密钥数据创建DESKeySpec对象DESKeySpec dks = new DESKeySpec(key);// 创建一个密钥工厂，然后用它把DESKeySpec转换成SecretKey对象SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(DES);SecretKey securekey = keyFactory.generateSecret(dks);// Cipher对象实际完成加密操作Cipher cipher = Cipher.getInstance(DES);// 用密钥初始化Cipher对象cipher.init(Cipher.ENCRYPT_MODE, securekey, sr);return cipher.doFinal(data);}/** * Description 根据键值进行解密 * @param data * @param key  加密键byte数组 * @return * @throws Exception */private static byte[] decrypt(byte[] data, byte[] key) throws Exception {// 生成一个可信任的随机数源SecureRandom sr = new SecureRandom();// 从原始密钥数据创建DESKeySpec对象DESKeySpec dks = new DESKeySpec(key);// 创建一个密钥工厂，然后用它把DESKeySpec转换成SecretKey对象SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(DES);SecretKey securekey = keyFactory.generateSecret(dks);// Cipher对象实际完成解密操作Cipher cipher = Cipher.getInstance(DES);// 用密钥初始化Cipher对象cipher.init(Cipher.DECRYPT_MODE, securekey, sr);return cipher.doFinal(data);}}</code></pre><p> 第二个为JDBCUtils,代码如下：</p><pre><code>import java.sql.Connection;import java.sql.DriverManager;import java.sql.ResultSet;import java.sql.SQLException;import java.sql.Statement;import org.springframework.util.StringUtils;import com.cloud.icenter.system.data.utils.DictConstans;/** * JDBC工具类 * @author byl * */public class JDBCUtil {    public JDBCUtil() {  super();  }  public static Connection getConnection(String url,String username,String password , DataBaseType dbType) throws SQLException, ClassNotFoundException, InstantiationException, IllegalAccessException {    Class.forName(dbType.getDriverName());    //设置超时时间，暂时解决错误密码等待时间    DriverManager.setLoginTimeout(1000);return DriverManager.getConnection(url, username, password);}  public static Connection getConnection(String dbIp , String port , String dbName , String userName , String password , String instanceName , DataBaseType dbType) throws ClassNotFoundException, SQLException, InstantiationException, IllegalAccessException{    if(!StringUtil.isEmpty(dbIp) &amp;&amp; !StringUtil.isEmpty(userName) &amp;&amp; !StringUtil.isEmpty(password) &amp;&amp; dbType != null){        return getConnection(getJdbcConnectionUrl(dbIp, dbName, port, instanceName, dbType), userName, password, dbType);    }    return null;}public static void close(ResultSet rs, Statement st, Connection conn) throws SQLException {  try {  if (rs != null) {  rs.close();  }  }finally{  try {  if(st!=null){  st.close();  }  }finally{  if(conn!=null){  conn.close();  }  }  }  }      /**     * jdbc url解析     * @param url     * @return     */    public static DataBaseObj parse(String url){        if(!StringUtil.isEmpty(url)){            DataBaseObj dbo = new DataBaseObj();            url = url.replace(&quot;jdbc:oracle:thin:@&quot;, &quot;&quot;);            String[] params = url.split(&quot;:&quot;);            dbo.setHost(params[0]);            dbo.setPort(params[1]);            dbo.setDbName(params[2]);            return dbo;        }        return null;    }    /**     * 将IP地址和databaseName根据数据库类型，转换成标准的连接URL     * @param dbIp     * @param dbName     * @param dbType     * @param      * @return     */    public static String getJdbcConnectionUrl(String dbIp , String dbName , String port , String instanceName , DataBaseType dbType){        if(StringUtils.hasText(dbName) &amp;&amp; StringUtils.hasText(port) &amp;&amp; StringUtils.hasText(dbIp) &amp;&amp; dbType != null){            if(DataBaseType.MYSQL.equals(dbType) || DictConstans.DB_TYPE_MYSQL.equals(dbType)){                //MYSQL                return String.format(dbType.getDriverUrl(), dbIp , port , dbName);            }else if(DataBaseType.ORACLE.equals(dbType) || DictConstans.DB_TYPE_ORACLE.equals(dbType)){                //Oracle                return String.format(dbType.getDriverUrl(), dbIp , port , dbName);            }else if(DataBaseType.SQLSERVER.equals(dbType) || DictConstans.DB_TYPE_SQLSERVER.equals(dbType)){                //Sql Server                if(StringUtils.hasText(instanceName)){                    return String.format(dbType.getDriverUrl(), dbIp , port , instanceName , dbName);                }            }else if(DataBaseType.DM.equals(dbType) || DictConstans.DB_TYPE_DM.equals(dbType)){                //达梦数据库                return String.format(dbType.getDriverUrl(), dbIp , port , dbName);            }        }        return null;    }    /**     * 根据dbtype获取相应数据库的驱动类型     * @param dbType     * @return     */    public static DataBaseType getDataBaseTypeByDbType(String dbType) {        DataBaseType dataType = null;        if(DictConstans.DB_TYPE_MYSQL.equals(dbType)){        dataType = DataBaseType.MYSQL;    }else if(DictConstans.DB_TYPE_ORACLE.equals(dbType)){        dataType = DataBaseType.ORACLE;    }else if(DictConstans.DB_TYPE_SQLSERVER.equals(dbType)){        dataType = DataBaseType.SQLSERVER;    }else if(DictConstans.DB_TYPE_DM.equals(dbType)){        dataType = DataBaseType.DM;    }        return dataType;    }    public enum DataBaseType    {        MYSQL(&quot;com.mysql.jdbc.Driver&quot;, &quot;jdbc:mysql://%s:%s/%s?useUnicode=true&amp;characterEncoding=utf8&quot; , &quot;jdbc:mysql://%s:%s/&quot;) ,         ORACLE(&quot;oracle.jdbc.driver.OracleDriver&quot;, &quot;jdbc:oracle:thin:@//%s:%s/%s&quot; , &quot;&quot;),        DM(&quot;dm.jdbc.driver.DmDriver&quot;, &quot;jdbc:dm://%s:%s/%s&quot; , &quot;&quot;),        SQLSERVER(&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot; , &quot;jdbc:sqlserver://%s:%s;instanceName=%s;DatabaseName=%s&quot; , &quot;&quot;);        private String driverName;        private String driverUrl;        private String noDbNameUrl;        DataBaseType(String driverName , String driverUrl , String noDbNameUrl)        {            this.driverName = driverName;            this.driverUrl = driverUrl;            this.noDbNameUrl = noDbNameUrl;        }        public String getDriverName()        {            return driverName;        }        public String getDriverUrl()        {            return driverUrl;        }        public String getNoDbNameUrl()        {            return noDbNameUrl;        }    }}</code></pre><h3 id="需要注意的是："><a href="#需要注意的是：" class="headerlink" title="需要注意的是："></a>需要注意的是：</h3><blockquote><p> public static int saveData(String tableName, Map<string, object=""> data) {</string,></p></blockquote><font color="red">tableName为数据库表名</font><font color="red">Map<string,object> 中key为数据库表字段名，value为对应的值。</string,object></font>]]></content>
    
    <summary type="html">
    
      此用来简化java开发
    
    </summary>
    
      <category term="java" scheme="http://www.juedigulang.com/categories/java/"/>
    
    
      <category term="接口" scheme="http://www.juedigulang.com/tags/%E6%8E%A5%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>使用线程监听队列</title>
    <link href="http://www.juedigulang.com/2018/04/25/%E4%BD%BF%E7%94%A8%E7%BA%BF%E7%A8%8B%E6%89%A7%E8%A1%8C%E9%98%9F%E5%88%97/"/>
    <id>http://www.juedigulang.com/2018/04/25/使用线程执行队列/</id>
    <published>2018-04-25T15:14:10.762Z</published>
    <updated>2018-05-02T13:52:22.121Z</updated>
    
    <content type="html"><![CDATA[<h3 id="定义一个队列，把数据放到队列中，代码如下："><a href="#定义一个队列，把数据放到队列中，代码如下：" class="headerlink" title="定义一个队列，把数据放到队列中，代码如下："></a>定义一个队列，把数据放到队列中，代码如下：</h3><pre><code>import java.util.HashMap;import java.util.Map;import java.util.concurrent.ConcurrentLinkedQueue;import com.cloud.icenter.common.utils.SystemConfig;/** * 级联模块所有的接口回调，都要先将回调数据发送到队列当中 * 同事线程监控该队列，进场接口回调处理 * @author ynxiea * */public class CallbackUtil {    //组织机构回调    public static final String CALLBACK_ORGAN = &quot;organCallback&quot;;    //资源分类回调    public static final String CALLBACK_CATEGORY = &quot;categoryCallback&quot;;    //资源目录回调    public static final String CALLBACK_CATALOG = &quot;catalogCallback&quot;;    //服务发布回调    public static final String CALLBACK_SERVICE = &quot;serviceCallback&quot;;    //服务申请回调    public static final String CALLBACK_APPLY = &quot;applyCallback&quot;;    //组织机构回调:类型=1    public static final String CALLBACK_TYPE_01 = &quot;1&quot;;    //资源分类回调:类型=2    public static final String CALLBACK_TYPE_02 = &quot;2&quot;;    //资源目录回调:类型=3    public static final String CALLBACK_TYPE_03 = &quot;3&quot;;    //服务发布回调:类型=4    public static final String CALLBACK_TYPE_04 = &quot;4&quot;;    //服务申请回调:类型=5    public static final String CALLBACK_TYPE_05 = &quot;5&quot;;    public static ConcurrentLinkedQueue&lt;Map&lt;String, String&gt;&gt; queue = new ConcurrentLinkedQueue&lt;Map&lt;String, String&gt;&gt;();    //新增数据到队列当中    public static void addQueue(Map&lt;String, String&gt; jsonMap) {        //级联模块：1 = 代表湖北省，省市级联，  2 = 其他地市，不需要地市级联        String cascadeFlag = SystemConfig.getProperty(&quot;cascade.data&quot;);        if (cascadeFlag.equals(&quot;1&quot;)) {            queue.add(jsonMap);        }    }    //获取队列大小    public static int getQueueSize() {        return queue.size();    }    //获取队列的数据    public static Map&lt;String, String&gt; pullData() {        if (queue.size() &gt; 0) {            return queue.poll();        }        return null;    }    public static void main(String[] args) {        Map&lt;String, String&gt; jsonMap1 = new HashMap&lt;String, String&gt;();        jsonMap1.put(CALLBACK_ORGAN, &quot;json&quot;);        Map&lt;String, String&gt; jsonMap2 = new HashMap&lt;String, String&gt;();        jsonMap2.put(CALLBACK_CATEGORY, &quot;categoryCallback&quot;);        Map&lt;String, String&gt; jsonMap3 = new HashMap&lt;String, String&gt;();        jsonMap3.put(CALLBACK_CATALOG, &quot;catalogCallback&quot;);        Map&lt;String, String&gt; jsonMap4 = new HashMap&lt;String, String&gt;();        jsonMap4.put(CALLBACK_SERVICE, &quot;serviceCallback&quot;);        Map&lt;String, String&gt; jsonMap5 = new HashMap&lt;String, String&gt;();        jsonMap5.put(CALLBACK_APPLY, &quot;applyCallback&quot;);        addQueue(jsonMap1);        addQueue(jsonMap2);        addQueue(jsonMap3);        addQueue(jsonMap4);        addQueue(jsonMap5);        System.out.println(&quot;队列大小：&quot;+getQueueSize());        for (int i=0;i&lt;10;i++){            System.out.println(pullData());            System.out.println(getQueueSize());        }    }}</code></pre><h3 id="使用线程，执行队列任务"><a href="#使用线程，执行队列任务" class="headerlink" title="使用线程，执行队列任务"></a>使用线程，执行队列任务</h3><pre><code>/** * 常驻线程：执行队列任务 * @author ynxiea * */public class CallbackThread extends Thread {    @Override    public void run() {        while (true) {            int size = CallbackUtil.getQueueSize();            if (size &gt; 0) {                CallbackOperation.doExecute();            } else {                try {                    Thread.sleep(5 * 1000);                } catch (InterruptedException e) {                    e.printStackTrace();                }            }        }    }}</code></pre><h3 id="接口回调处理接口"><a href="#接口回调处理接口" class="headerlink" title="接口回调处理接口"></a>接口回调处理接口</h3><pre><code>public class CallbackOperation {    private static CallbackService callbackService;    static {        callbackService = SpringUtil.getBean(CallbackService.class);    }    //执行回调处理    public static void doExecute() {        int size = CallbackUtil.getQueueSize();        for (int i=0;i&lt;size;i++) {            Map&lt;String, String&gt; jsonMap = CallbackUtil.pullData();            if (jsonMap != null &amp;&amp; !jsonMap.isEmpty()) {                Set&lt;String&gt; sets = jsonMap.keySet();                for (String key : sets) {                    if (CallbackUtil.CALLBACK_ORGAN.equals(key)) {                        //组织机构回调                        organCallback(jsonMap.get(key));                    } else if (CallbackUtil.CALLBACK_CATEGORY.equals(key)) {                        //资源分类回调                        categoryCallback(jsonMap.get(key));                    } else if (CallbackUtil.CALLBACK_CATALOG.equals(key)) {                        //资源目录回调                        catalogCallback(jsonMap.get(key));                    } else if (CallbackUtil.CALLBACK_SERVICE.equals(key)) {                        //服务发布回调                        serviceCallback(jsonMap.get(key));                    } else if (CallbackUtil.CALLBACK_APPLY.equals(key)) {                        //服务申请回调                        applyCallback(jsonMap.get(key));                    } else {                        //其他回调接口，待处理                    }                }            }        }    }    //发送http请求    private static void sendHttpData(List&lt;Callback&gt; list, String json) {        if (list != null &amp;&amp; list.size()&gt;0) {            SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyyMMddHHmmss&quot;);            //发送数据：先组装成map对象            Map&lt;String, String&gt; jsonData = new HashMap&lt;String, String&gt;();            //时间戳            jsonData.put(&quot;timestamp&quot;, sdf.format(new Date()));            //sign生成待定 String sign = SignGeneration.generationSign(params, sk);            jsonData.put(&quot;sign&quot;, &quot;&quot;);            //请求数据            jsonData.put(&quot;data&quot;, json);            for (Callback c: list) {                Map&lt;String, String&gt; mapParams = null;                //接口请求参数                String requestParams = c.getRequestParams();                if (!StringUtil.isEmpty(requestParams)) {                    mapParams = CascadeJsonUtil.toObject(requestParams, Map.class);                }                if (mapParams!= null &amp;&amp; !mapParams.isEmpty()) {                    jsonData.putAll(mapParams);                }                String sendJson =  CascadeJsonUtil.toJson(jsonData);                try {                    Map&lt;String,Object&gt; result = CascadeHttpUtil.sendPost(c.getUrlAddress(), sendJson);                    System.out.println(result);                    //记录日志                } catch (Exception e) {                    e.printStackTrace();                }            }        }    }    //组织机构回调    private static void organCallback(String json) {        List&lt;Callback&gt; list = callbackService.queryByType(CallbackUtil.CALLBACK_TYPE_01);        sendHttpData(list, json);    }    //资源分类回调    private static void categoryCallback(String json) {        List&lt;Callback&gt; list = callbackService.queryByType(CallbackUtil.CALLBACK_TYPE_02);        List&lt;Callback&gt; result = new ArrayList&lt;Callback&gt;();        Map&lt;String, Object&gt; jsonData = CascadeJsonUtil.toObject(json, Map.class);        //判断传递参数是否存在：organId,如果存在，代表地市的资源分类变化，回调时过滤该组织机构        if (jsonData.containsKey(&quot;organId&quot;)) {            String organId = String.valueOf(jsonData.get(&quot;organId&quot;));            for(Callback c : list) {                if (!c.getOrganId().equals(organId)) {                    result.add(c);                }            }        } else {            result.addAll(list);        }        sendHttpData(result, json);    }    //资源目录回调    private static void catalogCallback(String json) {        List&lt;Callback&gt; list = callbackService.queryByType(CallbackUtil.CALLBACK_TYPE_03);        List&lt;Callback&gt; result = new ArrayList&lt;Callback&gt;();        Map&lt;String, Object&gt; jsonData = CascadeJsonUtil.toObject(json, Map.class);        //判断传递参数是否存在：organId,如果存在，代表地市的资源目录变化，回调时过滤该组织机构        if (jsonData.containsKey(&quot;organId&quot;)) {            String organId = String.valueOf(jsonData.get(&quot;organId&quot;));            for(Callback c : list) {                if (!c.getOrganId().equals(organId)) {                    result.add(c);                }            }        } else {            result.addAll(list);        }        sendHttpData(result, json);    }    //服务发布回调    private static void serviceCallback(String json) {        List&lt;Callback&gt; list = callbackService.queryByType(CallbackUtil.CALLBACK_TYPE_04);        sendHttpData(list, json);    }    //服务申请回调    private static void applyCallback(String json) {        List&lt;Callback&gt; list = callbackService.queryByType(CallbackUtil.CALLBACK_TYPE_05);        sendHttpData(list, json);    }}   </code></pre>]]></content>
    
    <summary type="html">
    
      使用线程，执行队列任务
    
    </summary>
    
      <category term="java并发" scheme="http://www.juedigulang.com/categories/java%E5%B9%B6%E5%8F%91/"/>
    
    
      <category term="接口" scheme="http://www.juedigulang.com/tags/%E6%8E%A5%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>接口请求示例</title>
    <link href="http://www.juedigulang.com/2018/04/25/%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8%E7%A4%BA%E4%BE%8B/"/>
    <id>http://www.juedigulang.com/2018/04/25/接口调用示例/</id>
    <published>2018-04-25T15:14:08.720Z</published>
    <updated>2018-05-02T13:51:40.480Z</updated>
    
    <content type="html"><![CDATA[<h3 id="先定义Http请求的方式"><a href="#先定义Http请求的方式" class="headerlink" title="先定义Http请求的方式"></a>先定义Http请求的方式</h3><p>  定义一个工具类，工具类代码如下：<br>    package com.nan.util;</p><pre><code>import java.io.BufferedReader;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.OutputStreamWriter;import java.io.UnsupportedEncodingException;import java.net.HttpURLConnection;import java.net.URL;import java.net.URLDecoder;import java.net.URLEncoder;import java.util.List;import java.util.Map;import java.util.Set;//import org.apache.log4j.Logger;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONObject;public class CascadeHttpUtil {//    protected static Logger logger = Logger.getLogger(CascadeHttpUtil.class);    /**     * 功能: post形式发送数据     * @param urlPath 对方地址     * @param json 要传送的数据     * @return      * @throws Exception     *      */    public static Map&lt;String,Object&gt; sendPost(String url, String json){        Map&lt;String,Object&gt; mresult = null;        OutputStreamWriter out = null;        BufferedReader in = null;        StringBuilder result = new StringBuilder();        try {            URL realUrl = new URL(url);            HttpURLConnection conn = (HttpURLConnection) realUrl.openConnection();            // 打开和URL之间的连接            // 发送POST请求必须设置如下两行            conn.setDoOutput(true);            conn.setDoInput(true);            conn.setRequestMethod(&quot;POST&quot;);// POST方法            // 设置通用的请求属性            conn.setRequestProperty(&quot;accept&quot;, &quot;*/*&quot;);            conn.setRequestProperty(&quot;connection&quot;, &quot;Keep-Alive&quot;);            conn.setRequestProperty(&quot;user-agent&quot;,&quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1)&quot;);            //conn.setRequestProperty(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;);            conn.setRequestProperty(&quot;Content-Type&quot;, &quot;application/json&quot;);            conn.connect();            // 获取URLConnection对象对应的输出流            out = new OutputStreamWriter(conn.getOutputStream(), &quot;UTF-8&quot;);            // 发送请求参数            out.write(URLEncoder.encode(json, &quot;UTF-8&quot;));            // flush输出流的缓冲            out.flush();            // 定义BufferedReader输入流来读取URL的响应            in = new BufferedReader(                    new InputStreamReader(conn.getInputStream(),&quot;UTF-8&quot;));            String line;            while ((line = in.readLine()) != null) {                result.append(line);            }            //获取返回数据            String jsonData = URLDecoder.decode(result.toString(), &quot;UTF-8&quot;);            //返回结果            mresult = JSON.parseObject(jsonData);        } catch (Exception e) {            mresult = CodeResult.makeMap(CodeResult._codeResult200, e.getMessage());            e.printStackTrace();        }        //使用finally块来关闭输出流、输入流        finally{            try{                if(out!=null){                    out.close();                }                if(in!=null){                    in.close();                }            } catch(IOException ex){                mresult = CodeResult.makeMap(CodeResult._codeResult200, ex.getMessage());                ex.printStackTrace();            }        }        return mresult;    }    /**     * 向指定URL发送GET方法的请求     * @param url  发送请求的URL     * @param params 请求参数，请求参数应该是 name1=value1&amp;name2=value2 的形式。     * @return URL 所代表远程资源的响应结果     */    public static Map&lt;String,Object&gt; sendGet(String url, String params) {        Map&lt;String,Object&gt; mresult = CodeResult.makeMap(CodeResult.codeResult200, &quot;请求成功&quot;);        String result = &quot;&quot;;        BufferedReader in = null;        try {            String urlNameString = url + &quot;?&quot; + params;            URL realUrl = new URL(urlNameString);            // 打开和URL之间的连接            HttpURLConnection connection = (HttpURLConnection) realUrl.openConnection();            // 设置通用的请求属性            connection.setRequestProperty(&quot;accept&quot;, &quot;*/*&quot;);            connection.setRequestProperty(&quot;connection&quot;, &quot;Keep-Alive&quot;);            connection.setRequestProperty(&quot;user-agent&quot;,&quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1)&quot;);            // 建立实际的连接            connection.connect();            // 获取所有响应头字段            //Map&lt;String, List&lt;String&gt;&gt; map = connection.getHeaderFields();            // 定义 BufferedReader输入流来读取URL的响应            in = new BufferedReader(new InputStreamReader(connection.getInputStream(),&quot;UTF-8&quot;));            String line;            while ((line = in.readLine()) != null) {                result += line;            }            mresult.put(&quot;data&quot;, result);        } catch (Exception e) {            mresult.put(&quot;code&quot;, CodeResult._codeResult200);            mresult.put(&quot;msg&quot;, e.toString());            e.printStackTrace();        }        // 使用finally块来关闭输入流        finally {            try {                if (in != null) {                    in.close();                }            } catch (Exception e2) {                mresult.put(&quot;code&quot;, CodeResult._codeResult200);                mresult.put(&quot;msg&quot;, e2.toString());                e2.printStackTrace();            }        }        return mresult;    }    /**     * 向指定URL发送GET方法的请求     * @param url  发送请求的URL     * @param param 请求参数，Map 请求参数应该是 name1=value1&amp;name2=value2 的形式。     * @return URL 所代表远程资源的响应结果     */    public static Map&lt;String,Object&gt; sendGetMap(String url, Map&lt;String, Object&gt; param) {        Map&lt;String,Object&gt; mresult = CodeResult.makeMap(CodeResult.codeResult200, &quot;请求成功&quot;);        String result = &quot;&quot;;        BufferedReader in = null;        StringBuilder sb = new StringBuilder();        try {            String requestParams = &quot;&quot;;            Set&lt;String&gt; keySet = param.keySet();            int i=0;            for (String k : keySet) {                if (i==keySet.size()-1) {                    boolean chinese = StringUtil.isContainChinese(String.valueOf(param.get(k)));                    if(chinese){                        requestParams+=k+&quot;=&quot;+URLEncoder.encode(String.valueOf(param.get(k)), &quot;utf-8&quot;);                    }else{                        requestParams+=k+&quot;=&quot;+param.get(k);                    }                } else {                    boolean chinese = StringUtil.isContainChinese(String.valueOf(param.get(k)));                    if(chinese){                        requestParams+=k+&quot;=&quot;+URLEncoder.encode(String.valueOf(param.get(k)), &quot;utf-8&quot;)+&quot;&amp;&quot;;                    }else{                        requestParams+=k+&quot;=&quot;+param.get(k)+&quot;&amp;&quot;;                    }                }                i++;            }            String urlNameString =null;            if(url.contains(&quot;?&quot;)){                urlNameString = url + &quot;&amp;&quot; + requestParams;            }else{                urlNameString = url + &quot;?&quot; + requestParams;            }            URL realUrl = new URL(urlNameString);            // 打开和URL之间的连接            HttpURLConnection connection = (HttpURLConnection) realUrl.openConnection();            // 设置通用的请求属性            connection.setRequestProperty(&quot;accept&quot;, &quot;*/*&quot;);            connection.setRequestProperty(&quot;connection&quot;, &quot;Keep-Alive&quot;);            connection.setRequestProperty(&quot;user-agent&quot;,&quot;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1)&quot;);            // 建立实际的连接            connection.connect();            // 获取所有响应头字段            Map&lt;String, List&lt;String&gt;&gt; map = connection.getHeaderFields();            // 定义 BufferedReader输入流来读取URL的响应            in = new BufferedReader(new InputStreamReader(connection.getInputStream(),&quot;UTF-8&quot;));            String line;            while ((line = in.readLine()) != null) {                result += line;            }            mresult.put(&quot;data&quot;, result);        } catch (Exception e) {            mresult.put(&quot;code&quot;, CodeResult._codeResult200);            mresult.put(&quot;msg&quot;, e.toString());            e.printStackTrace();        }        // 使用finally块来关闭输入流        finally {            try {                if (in != null) {                    in.close();                }            } catch (Exception e2) {                mresult.put(&quot;code&quot;, CodeResult._codeResult200);                mresult.put(&quot;msg&quot;, e2.toString());                e2.printStackTrace();            }        }        return mresult;    }    /*     * 功能: postBody形式发送数据     * @param urlPath 对方地址     * @param json 要传送的数据     * @return     * @throws Exception     *      */    public static Map&lt;String,Object&gt; sendJsonData(String urlPath, String json) throws Exception{        Map&lt;String,Object&gt; mresult = CodeResult.makeMap(CodeResult.codeResult200, &quot;请求成功&quot;);        // request        URL url = new URL(urlPath);        HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();        // 设置doOutput属性为true表示将使用此urlConnection写入数据        urlConnection.setDoOutput(true);        urlConnection.setDoInput(true);        // 定义待写入数据的内容类型，我们设置为application/x-www-form-urlencoded类型        urlConnection.setRequestProperty(&quot;content-type&quot;,&quot;application/text&quot;);        // 得到请求的输出流对象        OutputStreamWriter out = new OutputStreamWriter(urlConnection.getOutputStream());        // 把数据写入请求的Body        out.write(URLEncoder.encode(json, &quot;UTF-8&quot;));//编码        out.flush();        out.close();        /*         * 得到响应对象          * @param urlConnection          * @return 响应对象          * @throws IOException          */        InputStream in = urlConnection.getInputStream();          BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(in,&quot;UTF-8&quot;));          StringBuffer temp = new StringBuffer();          String line = bufferedReader.readLine();          while (line != null) {              temp.append(line).append(&quot;\r\n&quot;);              line = bufferedReader.readLine();          }          bufferedReader.close();        //返回的json对象        JSONObject jsonObj = JSONObject.parseObject(temp.toString());        if(CodeResult.codeResult200.equals(jsonObj.getString(&quot;code&quot;))){            mresult = CodeResult.makeMap(CodeResult.codeResult200,&quot;调用成功&quot;,&quot;UTF-8&quot;);        }else{            mresult = CodeResult.makeMap(jsonObj.getString(&quot;code&quot;),jsonObj.getString(&quot;message&quot;));        }        return mresult;    }     //将map型转为请求参数型public static String urlencode(Map&lt;String,Object&gt; data) {StringBuilder sb = new StringBuilder();for (Map.Entry i : data.entrySet()) {try {sb.append(i.getKey()).append(&quot;=&quot;).append(URLEncoder.encode(i.getValue()+&quot;&quot;,&quot;UTF-8&quot;)).append(&quot;&amp;&quot;);} catch (UnsupportedEncodingException e) {e.printStackTrace();}}return sb.toString();}}</code></pre><h3 id="返回一个结果参数类"><a href="#返回一个结果参数类" class="headerlink" title="返回一个结果参数类"></a>返回一个结果参数类</h3><p>代码如下：</p><pre><code>import java.util.LinkedHashMap;import java.util.Map;public class CodeResult {    public static final String _codeResult200 = &quot;-200&quot;;//操作成功    public static final String codeResult200 = &quot;200&quot;;// 请求成功    //下为通用状态--开始    public static final String _codeResult10 = &quot;-10&quot;;//数据签名不存在    public static final String _codeResult11 = &quot;-11&quot;;//无效的数据签名    public static final String _codeResult20 = &quot;-20&quot;;//时间戳不存在    public static final String _codeResult21 = &quot;-21&quot;;//无效的时间戳    public static final String _codeResult30 = &quot;-30&quot;;//无效的数据返回格式    public static final String _codeResult40 = &quot;-40&quot;;//访问的服务不存在    public static final String _codeResult50 = &quot;-50&quot;;//用户不存在    public static final String _codeResult60 = &quot;-60&quot;;//无效的签名方式    public static final String _codeResult70 = &quot;-70&quot;;//用户没有权限访问服务    public static final String _codeResult80 = &quot;-80&quot;;//系统错误    public static final String _codeResult90 = &quot;-90&quot;;//恶意访问    //结束    public static final String codeResult100 = &quot;-100&quot;; //参数异常    public static final String codeResult110 = &quot;-110&quot;; //AK不存在    public static final String codeResult120 = &quot;-120&quot;; //timestamp超时    public static final String codeResult130 = &quot;-130&quot;; //服务已停用    public static final String codeResult140 = &quot;-140&quot;;// 服务未申请    public static final String codeResult150 = &quot;-150&quot;;// 服务申请时间失效    public static final String codeResult160 = &quot;-160&quot;;// 服务申请权限已回收    public static final String codeResult170 = &quot;-170&quot;;// appId非法或者未授权    public static final String codeResult180 = &quot;-180&quot;;//代理接口错误类型//    public static final String _codeResult10 = &quot;-10&quot;;// 错误的请求KEY//    public static final String _codeResult20 = &quot;-20&quot;;// KEY过期//    public static final String _codeResult30 = &quot;-30&quot;;// 系统内部异常//    public static final String _codeResult40 = &quot;-40&quot;;// 接口维护//    public static final String _codeResult50 = &quot;-50&quot;;// 接口停用//    public static final String _codeResult60 = &quot;-60&quot;;// 用户名错误//    public static final String _codeResult70 = &quot;-70&quot;;// 无权限访问    public static Map&lt;String,Object&gt; makeMap(String code, String msg,Object data) {         Map&lt;String,Object&gt; m = new LinkedHashMap&lt;String,Object&gt;();        m.put(&quot;code&quot;,code);        m.put(&quot;msg&quot;,msg);        m.put(&quot;data&quot;,data);        return m;    }      public static Map&lt;String,Object&gt; makeMap(String code, String msg) {         Map&lt;String,Object&gt; m = new LinkedHashMap&lt;String,Object&gt;();        m.put(&quot;code&quot;,code);        m.put(&quot;msg&quot;,msg);        return m;    }      public static Map&lt;String,Object&gt; makeMap() {         Map&lt;String,Object&gt; m = new LinkedHashMap&lt;String,Object&gt;();        m.put(&quot;code&quot;,codeResult200);        m.put(&quot;msg&quot;,&quot;请求成功&quot;);        return m;    }     public static Map&lt;String,Object&gt; makeMap(Map&lt;String,Object&gt; result, String msg) {         result.put(&quot;code&quot;,_codeResult200);        result.put(&quot;msg&quot;, msg);        return result;    }}</code></pre><h3 id="请求方法代码示例如下："><a href="#请求方法代码示例如下：" class="headerlink" title="请求方法代码示例如下："></a>请求方法代码示例如下：</h3><pre><code>public static void getAllOrgan() {    String url = &quot;http://localhost:8080/irsp/cascade/catalog/query&quot;;    Map&lt;String, Object&gt; mapData = new HashMap&lt;String, Object&gt;();    mapData.put(&quot;ak&quot;, &quot;ac8999bc1409448baf180838bbcb63e6&quot;); //ak    mapData.put(&quot;codeId&quot;, &quot;23f56ca568bc4435b30e3f41e9ac64ba&quot;);    mapData.put(&quot;pageIndex&quot;, &quot;1&quot;);    mapData.put(&quot;pageSize&quot;, &quot;1&quot;);    String json = JSON.toJSONString(mapData);    Map&lt;String,Object&gt; result = CascadeHttpUtil.sendPost(url, json);    System.out.println(result);}</code></pre><h3 id="接口代码如下所示："><a href="#接口代码如下所示：" class="headerlink" title="接口代码如下所示："></a>接口代码如下所示：</h3><p>这个代码是在irsp项目里面，项目端口号是8080，请求的参数方法irsp/cascade/catalog/query</p><pre><code>/**  * 获取全部组织机构  * @return  */ @RequestMapping(value=&quot;/getAllOrgan&quot;, method=RequestMethod.POST) @ResponseBody public ResponseEntity&lt;Map&lt;String,Object&gt;&gt; getAllOrgan(@RequestBody String json) {     Map&lt;String, Object&gt; result = CodeResult.makeMap();     String resultJson = null;     String org = null;     try {         String jsonData = URLDecoder.decode(json, &quot;UTF-8&quot;);         Map&lt;String, ?&gt; mapParams = CascadeJsonUtil.json2Map(jsonData);         String ak = mapParams.get(&quot;ak&quot;).toString();         String codeId = mapParams.get(&quot;codeId&quot;).toString();         String pageIndex = mapParams.get(&quot;pageIndex&quot;).toString();         resultJson = JSONObject.toJson(result);         org = URLEncode.encode(resultJson,&quot;UTF-8&quot;);         System.out.println(mapParams);     } catch (Exception e) {         CodeResult.makeMap(result, e.getMessage());         e.printStackTrace();     }     return org; }</code></pre>]]></content>
    
    <summary type="html">
    
      从一个系统调另一个系统
    
    </summary>
    
      <category term="java" scheme="http://www.juedigulang.com/categories/java/"/>
    
    
      <category term="接口" scheme="http://www.juedigulang.com/tags/%E6%8E%A5%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>后端分页工具类</title>
    <link href="http://www.juedigulang.com/2018/03/18/%E5%90%8E%E7%AB%AF%E5%88%86%E9%A1%B5%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    <id>http://www.juedigulang.com/2018/03/18/后端分页工具类/</id>
    <published>2018-03-18T07:53:05.000Z</published>
    <updated>2018-05-02T13:50:29.104Z</updated>
    
    <content type="html"><![CDATA[<h3 id="后端分页实现"><a href="#后端分页实现" class="headerlink" title="后端分页实现"></a>后端分页实现</h3><p>作下面的分页查询<br><img src="https://i.imgur.com/MWVwuti.png" alt=""></p><h3 id="后台代码如下："><a href="#后台代码如下：" class="headerlink" title="后台代码如下："></a>后台代码如下：</h3><pre><code>/*** 查询*/@RequestMapping(method = RequestMethod.POST, value = &quot;/query&quot;)public void query(Database db) {DetachedCriteria criteria=getPagination().getCriteria();if(!StringUtils.isEmpty(db.getInstanceName())) {criteria.add(Restrictions.like(&quot;database_name&quot;,db.getInstanceName().trim(),MatchMode.ANYWHERE));}if(!StringUtils.isEmpty(db.getIsConnect())) {criteria.add(Restrictions.like(&quot;isConnect&quot;,db.getIsConnect().trim(),MatchMode.ANYWHERE));}databaseService.find(getPagination());printJson(getPagination());}</code></pre><h3 id="getPagination代码如下："><a href="#getPagination代码如下：" class="headerlink" title="getPagination代码如下："></a>getPagination代码如下：</h3><pre><code>import org.apache.commons.beanutils.BeanUtils;import org.springframework.core.ResolvableType;import com.cloud.icenter.common.utils.Pagination;public abstract class ModelAction&lt;T&gt; extends BaseAction {private Class&lt;T&gt; clazz;public ModelAction() {ResolvableType resolvableType = ResolvableType.forClass(getClass());this.clazz=(Class&lt;T&gt;) resolvableType.getSuperType().getGeneric(0).resolve();}/*** 获取页号* @return*/public int getPage() {return getIntParameter(&quot;page&quot;, 1);}/*** 获取每页查询多少行* @return*/public int getPageSize() {return getIntParameter(&quot;rows&quot;, Pagination.DEFAULT_PAGE_SIZE);}/*** 获取分页器* @return*/public Pagination&lt;T&gt; getPagination() {Pagination&lt;T&gt; pagin=(Pagination&lt;T&gt;) getAttribute(&quot;pagin&quot;);if(pagin==null) {pagin=new Pagination&lt;T&gt;(getPage(),getPageSize());pagin.buildCriteria(clazz);setAttribute(&quot;pagin&quot;, pagin);}return pagin;}/*** 获取分页器* @return*/public &lt;E&gt; Pagination&lt;E&gt; newPagination(Class&lt;E&gt; e) {Pagination&lt;E&gt; pagin=new Pagination&lt;E&gt;(getPage(),getPageSize());pagin.buildCriteria(e);return pagin;}public T getModel() {T model=(T) getAttribute(&quot;model&quot;);if(model==null) {try {model = clazz.newInstance();BeanUtils.populate(model, getRequest().getParameterMap());setAttribute(&quot;model&quot;, model);} catch (Exception e) {throw new RuntimeException(&quot;获取模型对象失败!&quot;, e);}}return model;}/*** 快速获取id参数* @return*/protected String getId() {return getParameter(&quot;id&quot;);}}</code></pre><h3 id="Pagination代码如下："><a href="#Pagination代码如下：" class="headerlink" title="Pagination代码如下："></a>Pagination代码如下：</h3><pre><code>/*** 分页器* 页号从1开始,page==1就是第一页* 行号从0开始* @author zhangle*/public class Pagination&lt;T&gt; {public static final int DEFAULT_PAGE_SIZE=20;    //默认分页行数private int page;    //当前页号,从1开始private int pageSize;    //每页多少行private long totalCount;    //总共有多少行private List&lt;T&gt; dataList = new ArrayList&lt;T&gt;();    //数据列表private DetachedCriteria criteria; //查询条件public Pagination(int page) {this(page,DEFAULT_PAGE_SIZE);}public Pagination(int page,int pageSize) {this.page=page;this.pageSize=pageSize;}public int getPage() {return page;}public void setPage(int page) {this.page = page;}public int getPageSize() {return pageSize;}public void setPageSize(int pageSize) {this.pageSize = pageSize;}public long getTotalCount() {return totalCount;}public void setTotalCount(long totalCount) {this.totalCount = totalCount;}public List&lt;T&gt; getDataList() {return dataList;}public void setDataList(List&lt;T&gt; dataList) {this.dataList = dataList;}/*** 获得首页页号* @return*/public int getFirstPage() {return 1;}/*** 获得上一页页号* @return*/public int getPrevPage() {return page&lt;=getFirstPage()?getFirstPage():page-1;}/*** 获得下一页页号* @return*/public int getNextPage() {return page&gt;=getLastPage()?getLastPage():page+1;}/*** 获得最后一页页号* @return*/public int getLastPage() {return ((int)Math.ceil(((double)totalCount)/((double)pageSize)));}/*** 判断是否第一页* @return*/public boolean getIsFirstPage() {return page&lt;=getFirstPage();}/*** 判断是否最后一页* @return*/public boolean getIsLastPage() {return page&gt;=getLastPage();}/*** 获取当前页的起始行号* @return*/public int getStartResult() {return (page-1)*pageSize;}/*** 获取当前页的结束行号* @return*/public long getEndResult() {int endResult=page*pageSize;if(endResult&gt;=totalCount) return totalCount;return endResult;}/*** 获取总共多少页* @return*/public int getPageCount() {return getLastPage();}/*** 获取查询条件对象* @return*/public DetachedCriteria getCriteria() {return criteria;}/*** 设置查询条件对象* @param criteria*/public void setCriteria(DetachedCriteria criteria) {this.criteria = criteria;}/*** 构造一个查询条件对象,并返回* @param clazz* @return*/public DetachedCriteria buildCriteria(Class&lt;T&gt; clazz) {criteria=DetachedCriteria.forClass(clazz);return criteria;}}</code></pre><h3 id="分页工具类另一种写法"><a href="#分页工具类另一种写法" class="headerlink" title="分页工具类另一种写法"></a>分页工具类另一种写法</h3><pre><code>/*** @description 自定义分页* @author wangbin* @date 2015/12/22**/public class PagingUtil {public static final int MAX_PAGE_SIZE = 50;// 每页最大记录数限制private int page = 1;// 当前页private int pages = 0;// 总页数private int rows = 15;// 每页记录数private int total = 0;// 总记录数private int pageStart;// 分页开始数private List&lt;Object&gt; list;// 数据Listpublic int getPage() {return page;}public void setPage(int page) {if (page &lt; 1) {page = 1;}this.page = page;}public int getPages() {pages = this.getTotal() / this.getRows();if (this.getTotal() % this.getRows() &gt; 0) {pages++;}return pages;}public void setPages(int pages) {this.pages = pages;}public int getRows() {return rows;}public void setRows(int rows) {if (rows &lt; 1) {rows = 1;} else if (rows &gt; MAX_PAGE_SIZE) {rows = MAX_PAGE_SIZE;}this.rows = rows;}public int getTotal() {return total;}public void setTotal(int total) {this.total = total;}public int getPageStart() {return (page - 1) * rows;}public void setPageStart(int pageStart) {this.pageStart = pageStart;}public List&lt;Object&gt; getList() {return list;}public void setList(List&lt;Object&gt; list) {this.list = list;}/**** @param pageNo 当前页码* @param pageSize 页数* @param list 所有集合* @return* @throws Exception*/public static List&lt;?&gt; page(int pageNo, int pageSize, List&lt;?&gt; list)throws Exception {List&lt;Object&gt; result = new ArrayList&lt;Object&gt;();if (list != null &amp;&amp; list.size() &gt; 0) {int allCount = list.size();int pageCount = (allCount + pageSize - 1) / pageSize;if (pageNo &gt;= pageCount) {pageNo = pageCount;}int start = (pageNo - 1) * pageSize;int end = pageNo * pageSize;if (end &gt;= allCount) {end = allCount;}for (int i = start; i &lt; end; i++) {result.add(list.get(i));}}return result;}}</code></pre>]]></content>
    
    <summary type="html">
    
      此分页是使用后端代码实现的
    
    </summary>
    
      <category term="js" scheme="http://www.juedigulang.com/categories/js/"/>
    
    
      <category term="js" scheme="http://www.juedigulang.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>纯js分页</title>
    <link href="http://www.juedigulang.com/2018/03/18/%E7%BA%AFjs%E5%89%8D%E7%AB%AF%E5%88%86%E9%A1%B5/"/>
    <id>http://www.juedigulang.com/2018/03/18/纯js前端分页/</id>
    <published>2018-03-18T07:52:42.000Z</published>
    <updated>2018-03-18T08:05:53.837Z</updated>
    
    <content type="html"><![CDATA[<h3 id="纯js分页实质是数据行全部加载，通过是否显示属性完成分页功能"><a href="#纯js分页实质是数据行全部加载，通过是否显示属性完成分页功能" class="headerlink" title="纯js分页实质是数据行全部加载，通过是否显示属性完成分页功能"></a>纯js分页实质是数据行全部加载，通过是否显示属性完成分页功能</h3><blockquote><p>加载所有的数据，代码如下：</p></blockquote><pre><code>//查询结果数据表格显示function addTable(district,data,queryType){//移除页面中默认的ul$(&quot;#info-shool ul&quot;).remove();var str = &apos;&lt;ul&gt;&apos;for(var i=0;i&lt;data.length;i++){str = str +&apos;&lt;li&gt;&apos;+&apos;&lt;div class=&quot;tipNum&quot;&gt;&apos;+data[i].count+&apos;&lt;/div&gt;&apos;+&apos;&lt;p class=&quot;fl num num1&quot;&gt;&apos;+(i+1)+&apos;&lt;/p&gt;&apos;+&apos;&lt;div class=&quot;fl list&quot;&gt;&apos;+&apos;&lt;p class=&quot;list-txt&quot;&gt;&apos;+data[i].street+&apos;&lt;/p&gt;&apos;+&apos;&lt;p class=&quot;min-txt&quot;&gt;&apos;+data[i].street+&apos;&lt;/p&gt;&apos;+&apos;&lt;/div&gt;&apos;+&apos;&lt;/li&gt;&apos;}str = str +&apos;&lt;/ul&gt;&apos;;$(&quot;#info-shool&quot;).append(str);goPage(1);//调用分页的函数，默认显示第一页}</code></pre><h3 id="分页代码如下："><a href="#分页代码如下：" class="headerlink" title="分页代码如下："></a>分页代码如下：</h3><pre><code>//分页设置数据，含rows,totalfunction goPage(pno){var num = $(&quot;#info-shool&quot;).find(&quot;li&quot;).length;//所有li的统计(所有记录数)console.log(num);var totalPage = 0;//总页数var pageSize = 15;//每页显示行数//总共分几页if(num/pageSize &gt; parseInt(num/pageSize)){totalPage=parseInt(num/pageSize)+1;}else{totalPage=parseInt(num/pageSize);}var currentPage = pno;//当前页数var startRow = (currentPage - 1) * pageSize+1;//开始显示的行 31var endRow = currentPage * pageSize;//结束显示的行 40endRow = (endRow &gt; num)? num : endRow; //40console.log(endRow);//遍历显示数据实现分页for(var i=1;i&lt;(num+1);i++){var irow = $(&quot;#info-shool&quot;).find(&quot;li&quot;).eq(i-1);if(i&gt;=startRow &amp;&amp; i&lt;=endRow){$(irow).css(&quot;display&quot;,&quot;block&quot;);//根据条数来显示}else{$(irow).css(&quot;display&quot;,&quot;none&quot;);//隐藏所有的}}var pageEnd = document.getElementById(&quot;pageEnd&quot;);var tempStr=&apos;&apos;//.bind(&quot;click&quot;,{&quot;newPage&quot;:pageIndex},function(event){//    goPage((pageIndex-1)*pageSize+1,(pageIndex-1)*pageSize+pageSize);//    }).appendTo(&apos;#pages&apos;);//上一页if(currentPage&gt;1){tempStr += &quot;&lt;div class=&apos;one o-left&apos; onClick=\&quot;goPage(&quot;+(currentPage-1)+&quot;)\&quot;&gt;&lt;/div&gt;&quot;}else{tempStr += &quot;&lt;div class=&apos;one o-left&apos;&gt;&lt;/div&gt;&quot;;}//模仿百度的分页var b;//开始var e;//结束//当总页数 &lt;=10时候，说明一共不超过10页，让begin=1 end=总页数if(totalPage&lt;=10){b =1;e = totalPage;//如果总页数 &gt; 10，让begin=当前页 - 5 end=当前页+4    }else if(totalPage&gt;10){b = pno-5;e = pno+4;//头溢出：如果当前页=3，begin=3-5=-2 头溢出 如果begin&lt;1 让begin=1 end=10if(b&lt;1){b=1;e=10;//尾溢出 如果end &gt; 总页数，让end=总页数 begin=总页数-9    }else if(e&gt;totalPage){b= totalPage-9;e = totalPage;}}//显示分页页码for(var pageIndex= b;pageIndex&lt;e+1;pageIndex++){tempStr += &quot;&lt;li class=&apos;pageno&apos; onclick=\&quot;goPage(&quot;+pageIndex+&quot;)\&quot;&gt;&quot;+ pageIndex +&quot;&lt;/li&gt;&quot;;}//下一页if(currentPage&lt;totalPage){tempStr += &quot;&lt;div class=&apos;one o-right&apos; onClick=\&quot;goPage(&quot;+(currentPage+1)+&quot;)\&quot;&gt;&lt;/div&gt;&quot;;}else{tempStr += &quot;&lt;div class=&apos;one o-right&apos;&gt;&lt;/div&gt;&quot;;}//为了给点击事件添加选中状态document.getElementById(&quot;page&quot;).innerHTML = tempStr;$(&quot;.pageno&quot;).each(function(i,v){if($(v).text() ==pno){$(v).addClass(&quot;activeLi&quot;);}})}</code></pre><h3 id="jsp页面中代码如下："><a href="#jsp页面中代码如下：" class="headerlink" title="jsp页面中代码如下："></a>jsp页面中代码如下：</h3><pre><code>&lt;ul id=&quot;page&quot;&gt;&lt;/ul&gt;</code></pre><h3 id="分页的逻辑如下"><a href="#分页的逻辑如下" class="headerlink" title="分页的逻辑如下"></a>分页的逻辑如下</h3><ul><li>如果totalPage &lt;= 10 ，那说明总页数一共都没有10页。begin=1  end=totalPage<ul><li>如果totalPage &gt; 10，说明总页数超过10页了。begin=pageCode-5  end=pageCode+4<ul><li>头部溢出      当begin &lt; 1  begin=1  end=10</li><li>尾部溢出      当end&gt;totalPage的时候，end=totalPage  begin=totalPage-9</li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      此分页是使用前端代码实现的
    
    </summary>
    
      <category term="js" scheme="http://www.juedigulang.com/categories/js/"/>
    
    
      <category term="js" scheme="http://www.juedigulang.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>插入sql语句的拼接</title>
    <link href="http://www.juedigulang.com/2018/01/21/sql%E6%8F%92%E5%85%A5%E8%AF%AD%E5%8F%A5%E6%8B%BC%E6%8E%A5/"/>
    <id>http://www.juedigulang.com/2018/01/21/sql插入语句拼接/</id>
    <published>2018-01-21T07:26:11.429Z</published>
    <updated>2018-01-21T07:29:09.748Z</updated>
    
    <content type="html"><![CDATA[<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><a id="more"></a><p>点击保存的时候需要将上面四条数据添加到数据库中，并将原数据库中的数据清空，添加新的数据<br><img src="https://i.imgur.com/swgSnX0.png" alt=""></p><p>js代码如下：<br>    var sjArray = [];</p><pre><code>$(&quot;tr&quot;).each(function(i,v){//遍历trvar yarray = [];if(i &gt;= 1){$(v).find(&quot;td&quot;).each(function(i1,v1){//遍历tr下面的tdif(i1 &lt; $(v).find(&quot;td&quot;).length-1){yarray.push($(v1).find(&quot;input&quot;).val());}})}sjArray.push(yarray)})$.ajax({ type:&quot;POST&quot;, url:contextPath + &apos;/ChartElementInfo/sdlrAjbxxAysszSave&apos;, dataType:&quot;json&quot;, data:{num:num,newArr:JSON.stringify(sjArray)},async: false,success:function(result){if (result.code == 200) {alert(&quot;添加成功&quot;);window.location.href = contextPath + &apos;/ChartElementInfo/toshow&apos;;}else{alert(&quot;添加失败&quot;); }} });</code></pre><p>后台接收到的sjarray的格式如下：</p><p><img src="https://i.imgur.com/DKCNYaL.png" alt=""></p><h3 id="使用sql插入功能，使用insert的方法"><a href="#使用sql插入功能，使用insert的方法" class="headerlink" title="使用sql插入功能，使用insert的方法"></a>使用sql插入功能，使用insert的方法</h3><p>insert into tablename(id,name)values(x,x);格式</p><p>后台代码如下：<br>    /* </p><pre><code>* 手动录入数据的保存*/@Transactional(propagation=Propagation.SUPPORTS)@Overridepublic void getSave(String num,String newArr) throws Exception{JSONArray jsonArray = JSONArray.parseArray(newArr);ChartElementInfo info = this.get(num);String dataTable = info.getDataTable();//将数据库中内容清空this.chartElementInfoDao.del(dataTable);//遍历jsonArray将数据保存到list中List&lt;List&lt;Object&gt;&gt; data = new ArrayList&lt;List&lt;Object&gt;&gt;();for (int i =1; i&lt;jsonArray.size();i++) {String obj = jsonArray.get(i).toString();List&lt;Object&gt; row = new ArrayList&lt;Object&gt;();JSONArray array = JSONArray.parseArray(obj);for (int j=0; j&lt;array.size();j++) {String str = array.get(j).toString();row.add(str);}data.add(row);}//字段拼接String flieds = &quot;id&quot;;List&lt;ChartElementData&gt; list = this.chartElementDataService.getChartElementDataByFkId(num);Database database = this.dataBaseService.get(info.getDatabaseId());this.getConnection(database);Statement statement = null; //拿到需要添加数据的字段名称for (ChartElementData chartElementData : list) {flieds = flieds+&quot;,&quot;+chartElementData.getFieldName();String type = chartElementData.getDataType();}//拼接需要添加的数据for (List&lt;Object&gt; list2 : data) {//数据拼接String datas = &quot;&apos;&quot;+UuidUtil.uuids()+&quot;&apos;&quot;;for (Object object : list2) {if(object instanceof java.lang.String){datas = datas+&quot;,&apos;&quot;+object+&quot;&apos;&quot;;}else{datas = datas+&quot;,&quot;+object;}}try {statement = connection.getConn().createStatement();String sql = &quot;insert into &quot;+dataTable+&quot;(&quot;+flieds+&quot;) values(&quot;+datas+&quot;)&quot;;statement.executeUpdate(sql);} catch (Exception e) {// TODO Auto-generated catch blocke.printStackTrace();}finally{if (statement != null) {try {statement.close();} catch (SQLException e) {e.printStackTrace();}}}}//关闭连接connection.closeConn();}</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h3&gt;
    
    </summary>
    
      <category term="java" scheme="http://www.juedigulang.com/categories/java/"/>
    
    
      <category term="java" scheme="http://www.juedigulang.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>js写的模糊查询</title>
    <link href="http://www.juedigulang.com/2018/01/21/js%E6%A8%A1%E7%B3%8A%E6%9F%A5%E8%AF%A2/"/>
    <id>http://www.juedigulang.com/2018/01/21/js模糊查询/</id>
    <published>2018-01-21T07:14:45.316Z</published>
    <updated>2018-01-21T07:19:44.047Z</updated>
    
    <content type="html"><![CDATA[<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><a id="more"></a><p>页面上需要进行模糊查询匹配，使用js完成，效果如下：<br><img src="https://i.imgur.com/J6bwvoX.png" alt=""></p><h3 id="通过主题和名称组成的多条件查询"><a href="#通过主题和名称组成的多条件查询" class="headerlink" title="通过主题和名称组成的多条件查询"></a>通过主题和名称组成的多条件查询</h3><p>首先，要把数据组装成下面的格式：</p><pre><code>var treejson=[{id:&apos;theme0&apos;,nodename:&apos;经济主题&apos;,//节点名称children:[{id:&apos;1&apos;,nodename:&apos;规模增长及增速&apos;},{id:&apos;2&apos;,nodename:&apos;产业构成&apos;},{id:&apos;3&apos;,nodename:&apos;社会消费品构成&apos;}]},{id:&apos;theme1&apos;,nodename:&apos;人口主题&apos;,//节点名称children:[{id:&apos;4&apos;,nodename:&apos;规模增长及增速&apos;},{id:&apos;5&apos;,nodename:&apos;贫困特征&apos;}]}]</code></pre><p>前端js代码的格式如上面的格式，由于在前端不好组装数据，所以在后台进行数据的组装，后台代码 如下：</p><pre><code>List&lt;Map&lt;String,Object&gt;&gt; list = themeService.getThemes();List&lt;Map&lt;String,Object&gt;&gt; listJson = new ArrayList&lt;Map&lt;String,Object&gt;&gt;();for (Map&lt;String, Object&gt; map2 : list) {String themeId = map2.get(&quot;id&quot;).toString();//获取图元数据List&lt;Map&lt;String, Object&gt;&gt; info = service.getInfo(themeId);//查询数据的组装Map&lt;String,Object&gt; jmap = new HashMap&lt;String, Object&gt;();Object obj = map2.get(&quot;id&quot;);jmap.put(&quot;id&quot;, obj);Object obj1 = map2.get(&quot;name&quot;);jmap.put(&quot;nodename&quot;, obj1);jmap.put(&quot;children&quot;, info);listJson.add(jmap);}//查询数据setAttribute(&quot;charInfoListJson&quot;, JsonUtil.toJson(listJson));</code></pre><p>这样就可以把数据组装成上面所对应的格式了，下面就是所对应的前端代码了，jsp代码如下</p><pre><code>&lt;div class=&quot;message&quot; id=&quot;animate&quot;&gt;&lt;div class=&quot;line&quot;&gt;&lt;div class=&quot;lineC&quot; id=&quot;1&quot;&gt;&lt;span class=&quot;text&quot;&gt;人口主题&lt;/span&gt; &lt;em&gt;&lt;/em&gt;&lt;/div&gt;&lt;ul style=&quot;display: block;&quot;&gt;&lt;li class=&quot;active&quot; id=&quot;1&quot; onclick=&quot;gb1(this);&quot;&gt;人口流入&lt;/li&gt;&lt;li id=&quot;2&quot; onclick=&quot;gb1(this);&quot;&gt;就业人口行业分布&lt;/li&gt;&lt;li id=&quot;3&quot; onclick=&quot;gb1(this);&quot;&gt;近年人口增长率&lt;/li&gt;&lt;li id=&quot;4&quot; onclick=&quot;gb1(this);&quot;&gt;人口流出&lt;/li&gt;&lt;li id=&quot;5&quot; onclick=&quot;gb1(this);&quot;&gt;近年失业率统计&lt;/li&gt;&lt;li id=&quot;6&quot; onclick=&quot;gb1(this);&quot;&gt;文化程度分析&lt;/li&gt;&lt;li id=&quot;7&quot; onclick=&quot;gb1(this);&quot;&gt;近年婚姻状况分析&lt;/li&gt;&lt;li id=&quot;8&quot; onclick=&quot;gb1(this);&quot;&gt;各年龄段人口数&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;rightInfo fr w84 economic-left&quot;&gt;&lt;div class=&quot;tuyuan w100&quot; id=&quot;tuyuan&quot;&gt;&lt;div class=&quot;fonud&quot;&gt;&lt;span&gt;主题：&lt;/span&gt; &lt;select name=&quot;&quot; id=&quot;father&quot;&gt;&lt;option value=&quot;main&quot;&gt;全部&lt;/option&gt;&lt;option value=&quot;1&quot;&gt;人口主题&lt;/option&gt;&lt;option value=&quot;8a90fb266095aca7016095d66fff0006&quot;&gt;法人主题&lt;/option&gt;&lt;option value=&quot;8a90fb266095aca7016095d688f80007&quot;&gt;农业主题&lt;/option&gt;&lt;option value=&quot;8a90fb266095aca7016095d6ac6f0008&quot;&gt;经济主题&lt;/option&gt;&lt;option value=&quot;8a90fb266095aca7016095d6c2770009&quot;&gt;旅游主题&lt;/option&gt;&lt;/select&gt; &lt;span&gt;名称：&lt;/span&gt; &lt;input id=&quot;son&quot; type=&quot;text&quot; class=&quot;form-control&quot;value=&quot;&quot;&gt; &lt;a href=&quot;javascript:search()&quot;&gt;查询&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;chart&quot; id=&quot;chart&quot; style=&quot;overflow: auto;&quot;&gt;&lt;div id=&quot;box&quot;&gt;&lt;div class=&quot;ztBox&quot; id=&quot;1&quot;&gt;&lt;div class=&quot;zt-title&quot;&gt;&lt;i&gt;&lt;/i&gt; &lt;span&gt;人口主题&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;ztinfo clearfix&quot;&gt;&lt;div class=&quot;w33 fl checked&quot; data-num=&quot;1&quot; data-type=&quot;10&quot;&gt;&lt;div class=&quot;pixel&quot; onclick=&quot;preview(this);&quot;&gt;&lt;div id=&quot;drop11&quot; class=&quot;w100&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;pixel-txt&quot; onclick=&quot;revise(this);&quot;&gt;人口流入&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;w33 fl&quot; data-num=&quot;2&quot; data-type=&quot;1&quot;&gt;&lt;div class=&quot;pixel&quot; onclick=&quot;preview(this);&quot;&gt;&lt;div id=&quot;drop12&quot; class=&quot;w100&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;pixel-txt&quot; onclick=&quot;revise(this);&quot;&gt;就业人口行业分布&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;w33 fl&quot; style=&quot;margin-right: 0px;&quot; data-num=&quot;3&quot;data-type=&quot;2&quot;&gt;&lt;div class=&quot;pixel&quot; onclick=&quot;preview(this);&quot;&gt;&lt;div id=&quot;drop13&quot; class=&quot;w100&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;pixel-txt&quot; onclick=&quot;revise(this);&quot;&gt;近年人口增长率&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;w33 fl&quot; data-num=&quot;4&quot; data-type=&quot;11&quot;&gt;&lt;div class=&quot;pixel&quot; onclick=&quot;preview(this);&quot;&gt;&lt;div id=&quot;drop14&quot; class=&quot;w100&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;pixel-txt&quot; onclick=&quot;revise(this);&quot;&gt;人口流出&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;w33 fl&quot; data-num=&quot;5&quot; data-type=&quot;8&quot;&gt;&lt;div class=&quot;pixel&quot; onclick=&quot;preview(this);&quot;&gt;&lt;div id=&quot;drop15&quot; class=&quot;w100&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;pixel-txt&quot; onclick=&quot;revise(this);&quot;&gt;近年失业率统计&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;w33 fl&quot; style=&quot;margin-right: 0px;&quot; data-num=&quot;6&quot;data-type=&quot;9&quot;&gt;&lt;div class=&quot;pixel&quot; onclick=&quot;preview(this);&quot;&gt;&lt;div id=&quot;drop16&quot; class=&quot;w100&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;pixel-txt&quot; onclick=&quot;revise(this);&quot;&gt;文化程度分析&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;w33 fl&quot; data-num=&quot;7&quot; data-type=&quot;8&quot;&gt;&lt;div class=&quot;pixel&quot; onclick=&quot;preview(this);&quot;&gt;&lt;div id=&quot;drop17&quot; class=&quot;w100&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;pixel-txt&quot; onclick=&quot;revise(this);&quot;&gt;近年婚姻状况分析&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;w33 fl&quot; data-num=&quot;8&quot; data-type=&quot;5&quot;&gt;&lt;div class=&quot;pixel&quot; onclick=&quot;preview(this);&quot;&gt;&lt;div id=&quot;drop18&quot; class=&quot;w100&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;pixel-txt&quot; onclick=&quot;revise(this);&quot;&gt;各年龄段人口数&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</code></pre><p>对应的js代码如下：</p><pre><code>function search(){var theme=$(&apos;#father&apos;).find(&quot;option:selected&quot;).text(); var value=$(&apos;#son&apos;).val(); //删除列表及图元的选中状态$(&apos;#box .w33&apos;).removeClass(&quot;checked&quot;);$(&apos;#animate li&apos;).removeClass(&quot;active&quot;); //隐藏主题及下属的chartif(theme==&quot;全部&quot;){//全部主题时的查询方法 if(value.length==0){$(&quot;#box .ztBox&quot;).css(&quot;display&quot;,&quot;block&quot;);$(&quot;#box .w33&quot;).css(&quot;display&quot;,&quot;block&quot;); //根据主题的索引index去匹配左侧树，及右侧树的层级结构：$(&quot;#box .ztBox&quot;).each(function(i,v){if($(v).index()==0){$(v).find(&quot;.w33&quot;).each(function(i1,v1){if($(v1).index()==0){$(v1).css(&quot;display&quot;,&quot;block&quot;);$(v1).addClass(&quot;checked&quot;);}else{$(v1).css(&quot;display&quot;,&quot;block&quot;);}})}});$(&quot;#animate .line&quot;).each(function(i,v){if($(v).index()==0){$(v).find(&quot;ul li&quot;).each(function(i1,v1){if($(v1).index()==0){$(v1).addClass(&quot;active&quot;);}});}});}else{$(&quot;#box .ztBox&quot;).css(&quot;display&quot;,&quot;none&quot;);$(&quot;#box .w33&quot;).css(&quot;display&quot;,&quot;none&quot;); for(var t=0;t&lt;treejson.length;t++){var children=treejson[t].children;var id=treejson[t].id; var index;for(var i=0;i&lt;children.length;i++ ){//模糊匹配if(children[i].nodename.indexOf(value)&gt;=0){var theme=treejson[t].nodename; var child_id=children[i].id;$(&apos;#box .ztBox&apos;).each(function(i,v){if($(v).find(&apos;span&apos;).text()==theme){$(this).css(&quot;display&quot;,&quot;block&quot;);}});$(&quot;#box .w33&quot;).each(function(i,v){if ($(v).attr(&quot;data-num&quot;) == child_id) {$(this).css(&quot;display&quot;,&quot;block&quot;); $(this).addClass(&quot;checked&quot;);}})$(&quot;#animate li&quot;).each(function(i1,v1){if($(v1).attr(&quot;id&quot;) == child_id){ $(this).addClass(&quot;active&quot;); }}) }}}} }else{//有特定主题的查询方法$(&quot;#box .ztBox&quot;).css(&quot;display&quot;,&quot;none&quot;);$(&quot;#box .w33&quot;).css(&quot;display&quot;,&quot;none&quot;); for(var j=0;j&lt;treejson.length;j++){if(treejson[j].nodename==theme){var children=treejson[j].children;var id=treejson[j].id; var index;$(&quot;#box .ztBox&quot;).each(function(i,v){if ($(v).attr(&quot;id&quot;) == id) {$(this).css(&quot;display&quot;,&quot;block&quot;);index=$(this).index();}})if(value.length&gt;0){ var flag=0;for(var i=0;i&lt;children.length;i++ ){//模糊匹配if(children[i].nodename.indexOf(value)&gt;=0){flag++;var child_id=children[i].id;$(&quot;#box .w33&quot;).each(function(i,v){if ($(v).attr(&quot;data-num&quot;) == child_id) {$(this).css(&quot;display&quot;,&quot;block&quot;); $(this).addClass(&quot;checked&quot;);}})$(&quot;#animate li&quot;).each(function(i1,v1){if($(v1).attr(&quot;id&quot;) == child_id){ $(this).addClass(&quot;active&quot;); }}) }} }else if(value.length==0){//根据主题的索引index去匹配左侧树，及右侧树的层级结构：$(&quot;#box .ztBox&quot;).each(function(i,v){if($(v).index()==index){$(v).find(&quot;.w33&quot;).each(function(i1,v1){if($(v1).index()==0){$(v1).css(&quot;display&quot;,&quot;block&quot;);$(v1).addClass(&quot;checked&quot;);}else{$(v1).css(&quot;display&quot;,&quot;block&quot;);}})}});$(&quot;#animate .line&quot;).each(function(i,v){if($(v).index()==index){$(v).find(&quot;ul li&quot;).each(function(i1,v1){if($(v1).index()==0){$(v1).addClass(&quot;active&quot;);}});}});}}}//主题循环查询结束} //else结束}</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h3&gt;
    
    </summary>
    
      <category term="js" scheme="http://www.juedigulang.com/categories/js/"/>
    
    
      <category term="js" scheme="http://www.juedigulang.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>获取表格中每一列的值</title>
    <link href="http://www.juedigulang.com/2018/01/21/%E8%8E%B7%E5%8F%96%E8%A1%A8%E6%A0%BC%E4%B8%AD%E6%AF%8F%E5%88%97%E7%9A%84%E5%80%BC/"/>
    <id>http://www.juedigulang.com/2018/01/21/获取表格中每列的值/</id>
    <published>2018-01-21T07:10:59.407Z</published>
    <updated>2018-01-21T07:10:59.540Z</updated>
    
    <content type="html"><![CDATA[<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><a id="more"></a><p>工作中需要将获取到表格中的每一列的值，每一列的值放到数组中，然后将其发替换echart的option中的值<br><img src="https://i.imgur.com/Hl2lBdp.png" alt=""></p><p>需要将年份的值放到一个数组中，在将增长率的值放到一个数组中，然后将其的值放到echarts中，如图：<br><img src="https://i.imgur.com/RlvW6Ub.png" alt=""></p><h3 id="前台获取表格中每一列值的代码如下："><a href="#前台获取表格中每一列值的代码如下：" class="headerlink" title="前台获取表格中每一列值的代码如下："></a>前台获取表格中每一列值的代码如下：</h3><pre><code>var arr2=[];//遍历tr下面的td的值for(var k=0;k&lt;$(&quot;tr&quot;).eq(1).find(&quot;td&quot;).length-1;k++){var arr1 = [];$(&quot;tr&quot;).each(function(i3,v3){if(i3 &gt;= 1){var v=$(this).find(&quot;td&quot;).eq(k) //每一列的值arr1.push(v.find(&quot;input&quot;).val());}})arr2.push(arr1);</code></pre><h3 id="获取表头的值，拿表头的值去与option中的图例的值进行比较，相等的话就将其替换"><a href="#获取表头的值，拿表头的值去与option中的图例的值进行比较，相等的话就将其替换" class="headerlink" title="获取表头的值，拿表头的值去与option中的图例的值进行比较，相等的话就将其替换"></a>获取表头的值，拿表头的值去与option中的图例的值进行比较，相等的话就将其替换</h3><pre><code>//为了拿表头的值var laArr = []$(&quot;tr&quot;).each(function(ii,vv){if(ii == 0){$(vv).find(&quot;th&quot;).each(function(ii1,vv1){if(ii1 &lt; $(vv).find(&quot;th&quot;).length-1){laArr.push($(vv1).find(&quot;label&quot;).text());}})}})//使用表头的值与option中的图例的值进行比较，如果相同的话就将其替换option.xAxis[0].data = arr2[0];var series = option.series;for(var i = 0;i&lt;series.length;i++){var seriesName = series[i].name;for(var j= 1;j&lt;laArr.length;j++){//var name = laArr[j];if(name == seriesName ){option.series[i].data = arr2[j];}}}</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h3&gt;
    
    </summary>
    
      <category term="js" scheme="http://www.juedigulang.com/categories/js/"/>
    
    
      <category term="js、table" scheme="http://www.juedigulang.com/tags/js%E3%80%81table/"/>
    
  </entry>
  
  <entry>
    <title>表格实现按年龄排序</title>
    <link href="http://www.juedigulang.com/2018/01/21/%E8%A1%A8%E6%A0%BC%E5%AE%9E%E7%8E%B0%E6%8C%89%E7%85%A7%E5%B9%B4%E9%BE%84%E6%8E%92%E5%BA%8F/"/>
    <id>http://www.juedigulang.com/2018/01/21/表格实现按照年龄排序/</id>
    <published>2018-01-21T07:05:07.970Z</published>
    <updated>2018-01-21T07:11:01.378Z</updated>
    
    <content type="html"><![CDATA[<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><a id="more"></a><p>实现点击刷新的时候按照年份进行排序，使其按照年份进行正序排序，最终效果如下：<br><img src="https://i.imgur.com/PIpHT1v.png" alt=""><br><img src="https://i.imgur.com/PY6uvFJ.png" alt=""></p><h3 id="jsp代码如下"><a href="#jsp代码如下" class="headerlink" title="jsp代码如下"></a>jsp代码如下</h3><pre><code>&lt;table id=&quot;edit&quot;&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;label class=&quot;cc0&quot; for=&quot;nf&quot; data-type=&quot;INTEGER&quot;&gt;年份&lt;/label&gt;&lt;inputtype=&quot;hidden&quot;&gt;&lt;/th&gt;&lt;th&gt;&lt;label class=&quot;cc1&quot; for=&quot;zcl&quot; data-type=&quot;DECIMAL&quot;&gt;增长率&lt;/label&gt;&lt;inputtype=&quot;hidden&quot;&gt;&lt;/th&gt;&lt;th&gt;操作&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;input name=&quot;&quot; autofocus=&quot;&quot; onkeyup=&quot;shuzi(this);&quot;&gt;&lt;div class=&quot;tips&quot; style=&quot;display: none;&quot;&gt;&lt;/div&gt;&lt;/td&gt;&lt;td&gt;&lt;input name=&quot;&quot; onkeyup=&quot;xiaoshu(this);&quot;&gt;&lt;div class=&quot;tips&quot; style=&quot;display: none;&quot;&gt;请输入数字，并且保留两位小数&lt;/div&gt;&lt;/td&gt;&lt;td&gt;&lt;em onclick=&quot;del(this)&quot;&gt;&lt;/em&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;input name=&quot;&quot; value=&quot;2011&quot; onkeyup=&quot;shuzi(this);&quot;&gt;&lt;div class=&quot;tips&quot;&gt;&lt;/div&gt;&lt;/td&gt;&lt;td&gt;&lt;input name=&quot;&quot; value=&quot;52.08&quot; onkeyup=&quot;xiaoshu(this);&quot;&gt;&lt;div class=&quot;tips&quot;&gt;&lt;/div&gt;&lt;/td&gt;&lt;td&gt;&lt;em onclick=&quot;del(this)&quot;&gt;&lt;/em&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;input name=&quot;&quot; value=&quot;2012&quot; onkeyup=&quot;shuzi(this);&quot;&gt;&lt;div class=&quot;tips&quot;&gt;&lt;/div&gt;&lt;/td&gt;&lt;td&gt;&lt;input name=&quot;&quot; value=&quot;51.12&quot; onkeyup=&quot;xiaoshu(this);&quot;&gt;&lt;div class=&quot;tips&quot;&gt;&lt;/div&gt;&lt;/td&gt;&lt;td&gt;&lt;em onclick=&quot;del(this)&quot;&gt;&lt;/em&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;input name=&quot;&quot; value=&quot;2013&quot; onkeyup=&quot;shuzi(this);&quot;&gt;&lt;div class=&quot;tips&quot;&gt;&lt;/div&gt;&lt;/td&gt;&lt;td&gt;&lt;input name=&quot;&quot; value=&quot;50.01&quot; onkeyup=&quot;xiaoshu(this);&quot;&gt;&lt;div class=&quot;tips&quot;&gt;&lt;/div&gt;&lt;/td&gt;&lt;td&gt;&lt;em onclick=&quot;del(this)&quot;&gt;&lt;/em&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;input name=&quot;&quot; value=&quot;2014&quot; onkeyup=&quot;shuzi(this);&quot;&gt;&lt;div class=&quot;tips&quot;&gt;&lt;/div&gt;&lt;/td&gt;&lt;td&gt;&lt;input name=&quot;&quot; value=&quot;45.88&quot; onkeyup=&quot;xiaoshu(this);&quot;&gt;&lt;div class=&quot;tips&quot;&gt;&lt;/div&gt;&lt;/td&gt;&lt;td&gt;&lt;em onclick=&quot;del(this)&quot;&gt;&lt;/em&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</code></pre><h3 id="js代码如下"><a href="#js代码如下" class="headerlink" title="js代码如下"></a>js代码如下</h3><pre><code>function sortTable(){/** 思路：* 1，排序就需要数组。获取需要参与排序的行对象数组。* 2，对行数组中的每一个行的年龄单元格的数据进行比较，并完成行对象在数组中的位置置换。* 3，将排好序的数组重新添加回表格。*/var oTabNode = document.getElementById(&quot;edit&quot;);var collTrNodes = oTabNode.rows;//定义一个临时容器，存储需要排序行对象。var trArr = [];//遍历原行集合，并将需要排序的行对象存储到临时容器中。for(var x=1; x&lt;collTrNodes.length; x++){trArr[x-1] = collTrNodes[x];}//对临时容器排个序。mySort(trArr);for (var x = 0; x &lt; trArr.length; x++) {trArr[x].parentNode.appendChild(trArr[x]);}}function mySort(arr){var temp;for(var i=0; i&lt;arr.length; i++) {for(var j=i+1; j&lt;arr.length; j++) {var td = arr[i].cells[0];var td1 = arr[j].cells[0];if(parseInt($(td).find(&apos;input&apos;).val())&gt;parseInt($(td1).find(&apos;input&apos;).val())) {var temp = arr[i];arr[i] = arr[j];arr[j] = temp;}}}}</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h3&gt;
    
    </summary>
    
      <category term="js" scheme="http://www.juedigulang.com/categories/js/"/>
    
    
      <category term="js、table" scheme="http://www.juedigulang.com/tags/js%E3%80%81table/"/>
    
  </entry>
  
  <entry>
    <title>js动态创建表格</title>
    <link href="http://www.juedigulang.com/2018/01/21/js%E5%8A%A8%E6%80%81%E6%8B%BC%E6%8E%A5%E8%A1%A8%E6%A0%BC/"/>
    <id>http://www.juedigulang.com/2018/01/21/js动态拼接表格/</id>
    <published>2018-01-21T06:58:53.007Z</published>
    <updated>2018-01-21T06:58:53.163Z</updated>
    
    <content type="html"><![CDATA[<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><a id="more"></a><p>项目中为了要实现手动在表格里面添加数据，每点击一次增加添加一行，然后在表格中添加数据，最后将其保存到数据库中<br>效果如下图：<br><img src="https://i.imgur.com/GlB6oXy.png" alt=""></p><p>添加一行，录入数据</p><p><img src="https://i.imgur.com/IhUMBQS.png" alt=""></p><h3 id="jsp代码如下："><a href="#jsp代码如下：" class="headerlink" title="jsp代码如下："></a>jsp代码如下：</h3><pre><code>&lt;table id=&quot;edit&quot;&gt;&lt;/table&gt;</code></pre><h3 id="数据表格的拼接和数据回显的就是代码如下："><a href="#数据表格的拼接和数据回显的就是代码如下：" class="headerlink" title="数据表格的拼接和数据回显的就是代码如下："></a>数据表格的拼接和数据回显的就是代码如下：</h3><pre><code>//点击图元信息的时候拼接表格function sdSr(num,data_type,dataname){var html = &apos;&apos;;var trHtml = &apos;&apos;;$.post(contextPath+&quot;/ChartElementInfo/dataList&quot;,{&apos;id&apos;:num,&apos;name&apos;:dataname},function(result){html+=&apos;&lt;thead&gt;&lt;tr&gt;&apos;var datalist = result.dalist;var mlist = result.mlist;//循环添加表头，将其拼接在一起for(var i=0;i&lt;datalist.length;i++){html += &apos;&lt;th&gt;&lt;label class=&quot;cc&apos;+i+&apos;&quot; for=&quot;&apos;+datalist[i].FIELD_NAME+&apos;&quot; data-type=&quot;&apos;+datalist[i].DATA_TYPE+&apos;&quot;&gt;&apos;+datalist[i].FIELD_COMMENT+&apos;&lt;/label&gt;&lt;input type=&quot;hidden&quot;/&gt;&lt;/th&gt;&apos;;    }    html += &apos;&lt;th&gt;操作&lt;/th&gt;&apos;;html +=&apos;&lt;/tr&gt;&lt;/thead&gt;&apos;$(&quot;#edit&quot;).html(html);//将其添加到表格中//循环遍历数据中的数据，将其添加到表格中对应的表头下面for(var j =0;j&lt;mlist.length;j++){var trHtml = &apos;&lt;tr&gt;&apos;;//循环遍历表头，以便于数据添加到表头下面for(var i=0;i&lt;datalist.length;i++){$(&quot;th&quot;).each(function(i,v){if(i == $(&quot;th&quot;).length - 1){//判断th的长度，如果是最后一个让其显示删除图标trHtml += &apos;&lt;td&gt;&lt;em onclick=&quot;del(this)&quot;&gt;&lt;/em&gt;&lt;/td&gt;&apos;}else{if($(v).find(&quot;label&quot;).attr(&quot;data-type&quot;) == &quot;STRING&quot;){//判断字段的类型是否是String类型的trHtml += &apos;&lt;td&gt;&lt;input name=&quot;&quot; type=&quot;text&quot; value = &quot;&apos;+mlist[j][datalist[i].FIELD_NAME]+&apos;&quot; onkeyup=&quot;Str(this);&quot;/&gt;&lt;div class=&quot;tips&quot;&gt;&lt;/div&gt;&lt;/td&gt;&apos;}else if($(v).find(&quot;label&quot;).attr(&quot;data-type&quot;) == &quot;INTEGER&quot;){trHtml += &apos;&lt;td&gt;&lt;input name=&quot;&quot; value = &quot;&apos;+mlist[j][datalist[i].FIELD_NAME]+&apos;&quot; onkeyup=&quot;shuzi(this);&quot;/&gt;&lt;div class=&quot;tips&quot;&gt;&lt;/div&gt;&lt;/td&gt;&apos;}else if($(v).find(&quot;label&quot;).attr(&quot;data-type&quot;) == &quot;DECIMAL&quot;){trHtml += &apos;&lt;td&gt;&lt;input name=&quot;&quot; value = &quot;&apos;+mlist[j][datalist[i].FIELD_NAME]+&apos;&quot; onkeyup=&quot;xiaoshu(this);&quot;/&gt;&lt;div class=&quot;tips&quot;&gt;&lt;/div&gt;&lt;/td&gt;&apos;}/* trHtml += &apos;&lt;td&gt;&lt;input id=&quot;&quot; name=&quot;&quot; type=&quot;text&quot; value=&quot;&apos;+i+&apos;&quot;/&gt;&lt;/td&gt;&apos; */}})trHtml +=&apos;&lt;/tr&gt;&apos;;$(&quot;#edit&quot;).append(trHtml);break;}}}); }</code></pre><h3 id="点击增加的时候追加一行，并且验证文本框的值"><a href="#点击增加的时候追加一行，并且验证文本框的值" class="headerlink" title="点击增加的时候追加一行，并且验证文本框的值"></a>点击增加的时候追加一行，并且验证文本框的值</h3><pre><code>//点击增加时追加一行function creat(){var aa = &apos;&apos;;var trHtml = &apos;&lt;tr&gt;&apos;;//循环表头的th，在其下面添加对用的tr$(&quot;th&quot;).each(function(i,v){if(i == $(&quot;th&quot;).length - 1){trHtml += &apos;&lt;td&gt;&lt;em onclick=&quot;del(this)&quot;&gt;&lt;/em&gt;&lt;/td&gt;&apos;}else{if($(v).find(&quot;label&quot;).attr(&quot;data-type&quot;) == &quot;STRING&quot;){//autofocus添加焦点，添加一行后会自动定位到该行trHtml += &apos;&lt;td&gt;&lt;input name=&quot;&quot; type=&quot;text&quot; autofocus onkeyup=&quot;Str(this);&quot;/&gt;&lt;div class=&quot;tips&quot;&gt;&lt;/div&gt;&lt;/td&gt;&apos;}else if($(v).find(&quot;label&quot;).attr(&quot;data-type&quot;) == &quot;INTEGER&quot;){trHtml += &apos;&lt;td&gt;&lt;input name=&quot;&quot; autofocus onkeyup=&quot;shuzi(this);&quot;/&gt;&lt;div class=&quot;tips&quot;&gt;&lt;/div&gt;&lt;/td&gt;&apos;}else if($(v).find(&quot;label&quot;).attr(&quot;data-type&quot;) == &quot;DECIMAL&quot;){trHtml += &apos;&lt;td&gt;&lt;input name=&quot;&quot; onkeyup=&quot;xiaoshu(this);&quot;/&gt;&lt;div class=&quot;tips&quot;&gt;&lt;/div&gt;&lt;/td&gt;&apos;}/* trHtml += &apos;&lt;td&gt;&lt;input id=&quot;&quot; name=&quot;&quot; type=&quot;text&quot; value=&quot;&apos;+i+&apos;&quot;/&gt;&lt;/td&gt;&apos; */}})trHtml +=&apos;&lt;/tr&gt;&apos;;$(&quot;#edit&quot;).append(trHtml);}function Str(ele){if(&apos;&apos; == $(ele).val() || null == $(ele).val()){var txt = $(ele).siblings(&quot;.tips&quot;).text(&quot;不能为空,请输入&quot;).text();show(ele,txt);setTimeout(function(){hide(ele);},5000);//使其显示5秒后自动消失return;} else{$(ele).siblings(&quot;.tips&quot;).hide();}}    //校验数字function shuzi(ele){if((/[^\d]/.test($(ele).val()))){//替换非数字字符 var txt = $(ele).siblings(&quot;.tips&quot;).text(&quot;请输入正确的数字&quot;).text();var temp_amount=$(ele).val().replace(/[^\d]/g,&apos;&apos;); $(ele).val(temp_amount); show(ele,txt);setTimeout(function(){hide(ele);},5000);return;} else if(&apos;&apos; == $(ele).val() || null == $(ele).val()){var txt = $(ele).siblings(&quot;.tips&quot;).text(&quot;不能为空,请输入正确的数字&quot;).text();show(ele,txt);setTimeout(function(){hide(ele);},5000);return;} else{$(ele).siblings(&quot;.tips&quot;).hide();}}//校验小数function xiaoshu(ele){var reg = /^\d+(\.\d{1,2})?$/;if(!reg.test($(ele).val())){//替换非数字字符 var txt = $(ele).siblings(&quot;.tips&quot;).text(&quot;请输入数字，并且保留两位小数&quot;).text();var temp_amount=$(ele).val().replace(/[^\d\.]/g,&apos;&apos;); $(ele).val(temp_amount);show(ele,txt);setTimeout(function(){hide(ele);},5000);return;}else if(&apos;&apos; == $(ele).val() || null == $(ele).val()){var txt = $(ele).siblings(&quot;.tips&quot;).text(&quot;不能为空,请输入正确的数字&quot;).text();show(ele,txt);setTimeout(function(){hide(ele);},5000);return;} else{$(ele).siblings(&quot;.tips&quot;).hide();}}//点击删除时删除行function del(ele){$(ele).closest(&quot;tr&quot;).remove();}/* 控制提示框内的提示词的显示效果 */var i = 0;function show(ediv,txt) {$(ediv).siblings(&quot;.tips&quot;).text(txt);$(ediv).siblings(&quot;.tips&quot;).show();/* $(ediv).siblings(&quot;.tips&quot;).animate({opacity:&quot;1&quot;},1000); */}function hide(e1) {$(e1).siblings(&quot;.tips&quot;).hide();}</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h3&gt;
    
    </summary>
    
      <category term="js" scheme="http://www.juedigulang.com/categories/js/"/>
    
    
      <category term="js、table" scheme="http://www.juedigulang.com/tags/js%E3%80%81table/"/>
    
  </entry>
  
</feed>
