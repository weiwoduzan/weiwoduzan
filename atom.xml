<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mo的个人博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.juedigulang.com/"/>
  <updated>2017-11-18T08:54:08.363Z</updated>
  <id>http://www.juedigulang.com/</id>
  
  <author>
    <name>Mo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前台页面配置sql连接</title>
    <link href="http://www.juedigulang.com/2017/11/18/%E5%89%8D%E5%8F%B0%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5/"/>
    <id>http://www.juedigulang.com/2017/11/18/前台页面配置数据库连接/</id>
    <published>2017-11-18T08:45:42.000Z</published>
    <updated>2017-11-18T08:54:08.363Z</updated>
    
    <content type="html"><![CDATA[<p>###<br>在前台页面配置sql的数据库连接，然后将其数据导入到数据库中，页面上的配置如下图所示<br><a id="more"></a><br><img src="https://i.imgur.com/7atapZD.png" alt=""></p><h3 id="前端页面代码如下："><a href="#前端页面代码如下：" class="headerlink" title="前端页面代码如下："></a>前端页面代码如下：</h3><pre><code>&lt;/style&gt;&lt;script type=&quot;text/javascript&quot;    src=&quot;${ctx}/assets/lib/jquery/1.9.1/jquery.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;    function dochange(dbType) {        $.get(&quot;${ctx}/console/install/getDbInfo&quot;, {            &quot;DbType&quot; : dbType        }, function(data) {            for (var key in data) {                $(&quot;#&quot; + key).val(data[key]);            }        })    }    $(function() {        dochange();        $(&quot;#impl&quot;).click(function() {            var formData = $(&quot;#form1&quot;).serialize();            console.log(formData);            $.post(&quot;${ctx}/console/install/impl&quot;, formData, function(data) {                alert(data);            })        })    })&lt;/script&gt;&lt;/head&gt;&lt;body style=&quot;background-color: #D2D6DE; padding: 50px&quot;&gt;    &lt;h1 align=&quot;center&quot;&gt;        &lt;b&gt;fsm5安装向导&lt;/b&gt;    &lt;/h1&gt;    &lt;div        style=&quot;width: 750px; height: 400px; margin: 0 auto; background-color: #ffffff;&quot;&gt;        &lt;div class=&quot;box&quot;&gt;            &lt;div class=&quot;box-header&quot;&gt;                &lt;h3 class=&quot;box-title&quot;&gt;fsm5安装：填写数据库连接信息。&lt;/h3&gt;            &lt;/div&gt;            &lt;hr&gt;            &lt;div class=&quot;box-body&quot;&gt;                &lt;div class=&gt;                    &lt;h3 class=&quot;box-title&quot;&gt;请在下方填写您的数据库连接信息。如果您不确定，请联系您的服务提供商。&lt;/h3&gt;                &lt;/div&gt;                &lt;form name=&quot;form1&quot; id=&quot;form1&quot;&gt;                    &lt;table style=&quot;width:100%&quot;&gt;                        &lt;tr&gt;                            &lt;td&gt;选择数据库：&lt;/td&gt;                            &lt;td&gt;&lt;select size=&quot;1&quot; name=&quot;DbType&quot; id=&quot;DbType&quot;                                onChange=&quot;dochange(this.value)&quot;&gt;                                    &lt;option value=&quot;mysql&quot;&gt;mysql&lt;/option&gt;                                    &lt;option value=&quot;oracle&quot;&gt;oracle&lt;/option&gt;                                    &lt;option value=&quot;sqlserver&quot;&gt;sqlserver&lt;/option&gt;                                    &lt;option value=&quot;dm&quot;&gt;dm&lt;/option&gt;                            &lt;/select&gt;&lt;/td&gt;                            &lt;td&gt;选择你想用的数据库&lt;/td&gt;                        &lt;/tr&gt;                        &lt;tr&gt;                            &lt;td&gt;数据库驱动：&lt;/td&gt;                            &lt;td&gt;&lt;input type=&quot;text&quot; id=&quot;Driver&quot; name=&quot;Driver&quot; value=&quot;&quot;&gt;&lt;/td&gt;                            &lt;td&gt;您的数据库驱动是？&lt;/td&gt;                        &lt;/tr&gt;                        &lt;tr&gt;                            &lt;td&gt;数据库连接：&lt;/td&gt;                            &lt;td&gt;&lt;input type=&quot;text&quot; id=&quot;Url&quot; name=&quot;Url&quot; value=&quot;&quot;&gt;&lt;/td&gt;                            &lt;td&gt;您的数据库连接是？&lt;/td&gt;                        &lt;/tr&gt;                        &lt;tr&gt;                            &lt;td&gt;用户名：&lt;/td&gt;                            &lt;td&gt;&lt;input type=&quot;text&quot; id=&quot;User&quot; name=&quot;User&quot; value=&quot;&quot;&gt;&lt;/td&gt;                            &lt;td&gt;您的数据库用户名？&lt;/td&gt;                        &lt;/tr&gt;                        &lt;tr&gt;                            &lt;td&gt;密码：&lt;/td&gt;                            &lt;td&gt;&lt;input type=&quot;password&quot; id=&quot;Password&quot; name=&quot;Password&quot;                                value=&quot;&quot;&gt;&lt;/td&gt;                            &lt;td&gt;您的数据库密码是？&lt;/td&gt;                        &lt;/tr&gt;                    &lt;/table&gt;                &lt;/form&gt;                &lt;br&gt;                &lt;br&gt;            &lt;/div&gt;            &lt;hr&gt;            &lt;!-- /.box-body --&gt;            &lt;div id=&quot;footer&quot; style=&quot;padding-right: 5px&quot;&gt;                &lt;a class=&quot;you1&quot;&gt;&lt;input type=&quot;submit&quot; name=&quot;submit&quot; id=&quot;impl&quot;                    class=&quot;you&quot; value=&quot;初始化数据&quot;                    style=&quot;width:80px; height:30px; background-color: #337ab7;color: #ffffff;&quot;&gt;&lt;/a&gt;            &lt;/div&gt;        &lt;/div&gt;&lt;/body&gt;</code></pre><h3 id="后台代码如下："><a href="#后台代码如下：" class="headerlink" title="后台代码如下："></a>后台代码如下：</h3><pre><code>package com.code.controller;import java.util.HashMap;import java.util.Map;import org.apache.commons.configuration.PropertiesConfiguration;import com.code.core.MyConfig;import com.code.util.SqlImp;import com.jfinal.core.Controller;import com.jfinal.kit.StrKit;public class InstallController extends Controller {    public void index() {        if(MyConfig.installed){            renderText(&quot;已经初始化完成&quot;);            return;        }        render(&quot;install.html&quot;);    }    public void getDbInfo() {        Map&lt;String, String&gt; dbInfo = new HashMap&lt;String, String&gt;();        try {            PropertiesConfiguration myconfig = new PropertiesConfiguration(&quot;myconfig.properties&quot;);            String strDbType = getPara(&quot;DbType&quot;);            if (StrKit.isBlank(strDbType)) {                strDbType = myconfig.getString(&quot;db&quot;);            }            dbInfo.put(&quot;DbType&quot;, strDbType);            dbInfo.put(&quot;Driver&quot;, myconfig.getString(strDbType + &quot;Driver&quot;));            dbInfo.put(&quot;Url&quot;, myconfig.getString(strDbType + &quot;Url&quot;));            dbInfo.put(&quot;User&quot;, myconfig.getString(strDbType + &quot;User&quot;));            dbInfo.put(&quot;Password&quot;, myconfig.getString(strDbType + &quot;Password&quot;));        } catch (Exception e) {            e.printStackTrace();        }        renderJson(dbInfo);    }    public void impl() {        String msg = &quot;数据库脚本初始化成功，请重启中间件进入系统&quot;;        try {            PropertiesConfiguration myconfig = new PropertiesConfiguration(&quot;myconfig.properties&quot;);            String strDbType = getPara(&quot;DbType&quot;);            String strDriver = getPara(&quot;Driver&quot;);            String strUrl = getPara(&quot;Url&quot;);            String strUser = getPara(&quot;User&quot;);            String strPassword = getPara(&quot;Password&quot;);            String str = SqlImp.exec(strDbType,strDriver,strUrl,strUser,strPassword);            if (StrKit.notBlank(str)) {                msg = str;            }            myconfig.setProperty(&quot;db&quot;, strDbType);            myconfig.setProperty(strDbType + &quot;Driver&quot;, strDriver);            myconfig.setProperty(strDbType + &quot;Url&quot;, strUrl);            myconfig.setProperty(strDbType + &quot;User&quot;, strUser);            myconfig.setProperty(strDbType + &quot;Password&quot;, strPassword);            myconfig.save();        } catch (Exception e) {            msg = &quot;操作失败&quot;;            e.printStackTrace();        }        renderText(msg);    }}</code></pre><h3 id="对应的数据库连接如下："><a href="#对应的数据库连接如下：" class="headerlink" title="对应的数据库连接如下："></a>对应的数据库连接如下：</h3><blockquote><p>db=sqlserver</p><p>dmDriver = dm.jdbc.driver.DmDriver<br>dmUrl = jdbc:dm://localhost:5236/fsm4j<br>dmUser = fsm4j<br>dmPassword =123456789</p><p>sqlserverDriver   =net.sourceforge.jtds.jdbc.Driver<br>sqlserverUrl  =jdbc:jtds:sqlserver://localhost:1433;DatabaseName=fsm5<br>sqlserverUser =sa<br>sqlserverPassword =123456</p><p>oracleDriver = oracle.jdbc.driver.OracleDriver<br>oracleUrl = jdbc:oracle:thin:@localhost:1521:xe<br>oracleUser = fsm4j<br>oraclePassword = fsm4j</p><p>mysqlDriver = com.mysql.jdbc.Driver<br>mysqlUrl = jdbc:mysql://192.168.5.231/fsm4j?zeroDateTimeBehavior=convertToNull<br>mysqlUser = root<br>mysqlPassword =password</p><p>devMode = true</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;###&lt;br&gt;在前台页面配置sql的数据库连接，然后将其数据导入到数据库中，页面上的配置如下图所示&lt;br&gt;
    
    </summary>
    
      <category term="java" scheme="http://www.juedigulang.com/categories/java/"/>
    
    
      <category term="sql" scheme="http://www.juedigulang.com/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>将标准sql语句导入到数据库中</title>
    <link href="http://www.juedigulang.com/2017/11/18/%E5%B0%86%E6%A0%87%E5%87%86%E7%9A%84sql%E8%84%9A%E6%9C%AC%E5%AF%BC%E5%85%A5%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://www.juedigulang.com/2017/11/18/将标准的sql脚本导入数据库/</id>
    <published>2017-11-18T08:22:15.000Z</published>
    <updated>2017-11-18T08:54:24.213Z</updated>
    
    <content type="html"><![CDATA[<h3 id="将转换为标准的sql文件导入到数据库中"><a href="#将转换为标准的sql文件导入到数据库中" class="headerlink" title="将转换为标准的sql文件导入到数据库中"></a>将转换为标准的sql文件导入到数据库中</h3><a id="more"></a><pre><code>/** * 将标准sql脚本导入本地数据库，导入前需清空数据库 *  */public class SqlImp {    static Logger logger = Logger.getLogger(SqlImp.class);    public static String exec(String db,String driver,String url,String user,String password) {        String str = &quot;&quot;;        try {            String jdbcUrl = url;            Class.forName(driver);            Connection conn = DriverManager.getConnection(jdbcUrl, user, password);            ScriptRunner runner = new ScriptRunner(conn);            Writer result = new StringWriter();            PrintWriter printWriter = new PrintWriter(result);            // runner.setLogWriter(printWriter);            runner.setErrorLogWriter(printWriter);            runner.setAutoCommit(true);            runner.setStopOnError(false);            // 构建流集合            Vector&lt;InputStream&gt; vector = new Vector&lt;InputStream&gt;();            InputStream standard = new FileInputStream(PathKit.getWebRootPath() + &quot;/WEB-INF/dbsql/&quot;+db+&quot;.sql&quot;);            // InputStream testdata = new            // FileInputStream(PathKit.getWebRootPath() + &quot;/doc/testdata.sql&quot;);            vector.addElement(standard);            // vector.addElement(testdata);            Enumeration&lt;InputStream&gt; enu = vector.elements();            // 合并流            SequenceInputStream sis = new SequenceInputStream(enu);            InputStreamReader isr = new InputStreamReader(sis, &quot;utf-8&quot;);            Reader reader = new BufferedReader(isr);            runner.runScript(reader);            str = result.toString();        }catch (IOException e) {            e.printStackTrace();        }catch (ClassNotFoundException e) {            logger.info(e.getMessage());            str=&quot;数据库驱动错误&quot;;        }catch (SQLException e) {            logger.info(e.getMessage());            str=&quot;数据库连接错误&quot;;        }         return str;    }    public static String stringToHexString(String strPart) {String hexString = &quot;&quot;;for (int i = 0; i &lt; strPart.length(); i++) {int ch = (int) strPart.charAt(i);String strHex = Integer.toHexString(ch); hexString = hexString + strHex;}return hexString;}    /**     * 执行sql文件     *      * @return     */    public static String exec() {        String str = &quot;&quot;;        PropertiesConfiguration myconfig;        try {            myconfig = new PropertiesConfiguration(&quot;myconfig.properties&quot;);            String db = myconfig.getString(&quot;db&quot;);            String jdbcUrl = myconfig.getString(db + &quot;Url&quot;);            exec(db, jdbcUrl, myconfig.getString(db + &quot;Driver&quot;), myconfig.getString(db + &quot;User&quot;), myconfig.getString(db + &quot;Password&quot;));        } catch (ConfigurationException e) {            e.printStackTrace();        }        return str;    }    public static void main(String[] args) {        MyConfig mc = new MyConfig();        mc.initConsole();        String str = exec();        System.out.println(str);    }}</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;将转换为标准的sql文件导入到数据库中&quot;&gt;&lt;a href=&quot;#将转换为标准的sql文件导入到数据库中&quot; class=&quot;headerlink&quot; title=&quot;将转换为标准的sql文件导入到数据库中&quot;&gt;&lt;/a&gt;将转换为标准的sql文件导入到数据库中&lt;/h3&gt;
    
    </summary>
    
      <category term="java" scheme="http://www.juedigulang.com/categories/java/"/>
    
    
      <category term="sql" scheme="http://www.juedigulang.com/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>将java调用百度地址匹配接口获取经纬度坐标</title>
    <link href="http://www.juedigulang.com/2017/11/18/%E8%B0%83%E7%94%A8%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9D%80%E5%8C%B9%E9%85%8D%E6%8E%A5%E5%8F%A3%E5%92%8C%E8%8E%B7%E5%8F%96%E7%BB%8F%E7%BA%AC%E5%BA%A6%E5%9D%90%E6%A0%87/"/>
    <id>http://www.juedigulang.com/2017/11/18/调用百度地址匹配接口和获取经纬度坐标/</id>
    <published>2017-11-18T08:22:15.000Z</published>
    <updated>2017-11-18T08:53:50.853Z</updated>
    
    <content type="html"><![CDATA[<p>做项目中经常要调用 百度地图，遇到要根据坐标得到地址名称，或根据名称匹配得到经纬度坐标，所以提取出来写了两个通用方法。<br>需要依赖 json.jar 包。</p><p>代码如下：<br><a id="more"></a></p><pre><code>/** * 地址匹配 * @author  * */public class AddressParse {/** * 正向地址匹配接口 * 根据xy获取所在省市县 * @param xy * @return */ public static Map geodecode(String xy){String sUrl=&quot;http://api.map.baidu.com/geocoder/v2/?ak=8926feb9ef0a93c41c13b6103bf4dfa6&amp;location=&quot;+xy + &quot;&amp;output=json&amp;pois=0&quot;; String address=&quot;&quot;; StringBuffer str = new StringBuffer(); Map resultMap=new HashMap(); try {   java.net.URL url = new java.net.URL(sUrl); BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream(),&quot;utf-8&quot;)); String line; while ((line = in.readLine()) != null) { str.append(line); } in.close();if (str.equals(&quot;&quot;) || str == null) {System.err.println(&quot;百度服务无返回&quot;);return null;}System.out.println(str.toString());JSONObject jsonobj = null;try {jsonobj = JSONObject.fromObject(str.toString());JSONObject result = jsonobj.getJSONObject(&quot;result&quot;);// 获取对象JSONObject addressComponent = result.getJSONObject(&quot;addressComponent&quot;);String province = addressComponent.getString(&quot;province&quot;);resultMap.put(&quot;province&quot;,province);String city = addressComponent.getString(&quot;city&quot;);resultMap.put(&quot;city&quot;,city);String district = addressComponent.getString(&quot;district&quot;);resultMap.put(&quot;district&quot;,district);} catch (Exception e) {e.printStackTrace();System.out.println(&quot;此坐标获取不到省份：&quot;+xy);} } catch (Exception e) {   e.printStackTrace();   }   return resultMap;} /**  * 逆向匹配接口  * 根据地址名称，匹配得到经纬度坐标  * @param addr  * @return  */public static String geocode(String addr){String xyStr=&quot;&quot;;addr=URLEncoder.encode(addr);StringBuffer str = new StringBuffer();String lng=&quot;&quot;;String lat=&quot;&quot;;try {//System.out.println(&quot;http://api.map.baidu.com/geocoder?address=&quot;+addr+&quot;&amp;output=json&quot;);String sUrl=&quot;http://api.map.baidu.com/geocoder/v2/?address=&quot;+addr+&quot;&amp;&amp;output=json&amp;ak=SgntTWnUw65ysdPSghbs27noTxOuK88O&quot;;java.net.URL url = new java.net.URL(sUrl);//java.net.URL url = new java.net.URL(&quot;http://api.map.baidu.com/?qt=gc&amp;wd=&quot;+addr+&quot;&amp;cn=%E5%85%A8%E5%9B%BD&amp;ie=utf-8&amp;oue=0&amp;res=api&amp;callback=BMap._rd._cbk96117&quot;);BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));String line;while ((line = in.readLine()) != null) {str.append(line);}in.close();JSONObject dataJson=null;dataJson =JSONObject.fromObject(str.toString());JSONObject result=dataJson.getJSONObject(&quot;result&quot;);JSONObject location=result.getJSONObject(&quot;location&quot;);lng =location.getDouble(&quot;lng&quot;)+&quot;&quot;;lat =location.getDouble(&quot;lat&quot;)+&quot;&quot;;xyStr= lng+&quot; &quot;+lat;} catch (Exception e) {lng=&quot;&quot;;lat=&quot;&quot;;}return xyStr;}public static void main(String [] args){String xy = AddressParse.geocode(&quot;成都市成华区建设路颐和家园7栋2801&quot;);System.out.println(xy);Map address = AddressParse.geodecode(&quot;40.033534,116.313289&quot;);System.out.println(address);}}</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;做项目中经常要调用 百度地图，遇到要根据坐标得到地址名称，或根据名称匹配得到经纬度坐标，所以提取出来写了两个通用方法。&lt;br&gt;需要依赖 json.jar 包。&lt;/p&gt;
&lt;p&gt;代码如下：&lt;br&gt;
    
    </summary>
    
      <category term="java" scheme="http://www.juedigulang.com/categories/java/"/>
    
    
      <category term="java" scheme="http://www.juedigulang.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>处理sql为标准sql</title>
    <link href="http://www.juedigulang.com/2017/11/18/%E5%B0%86sql%E5%A4%84%E7%90%86%E4%B8%BA%E6%A0%87%E5%87%86%E7%9A%84sql%E8%84%9A%E6%9C%AC/"/>
    <id>http://www.juedigulang.com/2017/11/18/将sql处理为标准的sql脚本/</id>
    <published>2017-11-18T08:16:48.000Z</published>
    <updated>2017-11-18T08:54:34.539Z</updated>
    
    <content type="html"><![CDATA[<h3 id="将mysql数据库使用navcat导出后处理为标准的sql脚本"><a href="#将mysql数据库使用navcat导出后处理为标准的sql脚本" class="headerlink" title="将mysql数据库使用navcat导出后处理为标准的sql脚本"></a>将mysql数据库使用navcat导出后处理为标准的sql脚本</h3><a id="more"></a><pre><code>/** * 将navicat导出的mysql数据库脚本处理为标准脚本 */public class StandardSql {    public static void make() {        try {            String str = FileUtils.readFileToString(new File(PathKit.getWebRootPath() + &quot;/src/main/webapp/WEB-INF/dbsql/fsm5.sql&quot;), &quot;utf-8&quot;);            str = str.replaceAll(&quot;`&quot;, &quot;&quot;).replaceAll(&quot;([ \t]+)longtext([ \t,]*)&quot;, &quot; clob $2&quot;).replaceAll(&quot;ENGINE=InnoDB DEFAULT CHARSET=utf8&quot;, &quot;&quot;)                    .replaceAll(&quot;DROP TABLE IF EXISTS ([^;]*);&quot;, &quot;-- DROP TABLE $1&quot;).replaceAll(&quot;SET FOREIGN_KEY_CHECKS=0;&quot;, &quot;&quot;).replaceAll(&quot;/\\*([^\\*]+)\\*/&quot;, &quot;&quot;);            //视图处理            str=str.replaceAll(&quot;DROP VIEW IF EXISTS ([^;]*);&quot;, &quot;-- DROP VIEW $1&quot;).replaceAll(&quot;ALGORITHM=UNDEFINED DEFINER=root@% SQL SECURITY DEFINER &quot;, &quot;&quot;);            // 注释处理            str = str.replaceAll(&quot;COMMENT=&apos;([^&apos;]+)&apos;;&quot;, &quot;;\r\n -- $1&quot;).replaceAll(&quot;COMMENT &apos;([^&apos;]+)&apos;,&quot;, &quot;, -- $1&quot;);            // 处理整形            str = str.replaceAll(&quot; int(\\(\\d+\\)) &quot;, &quot; int &quot;);            //替换\r\n\&quot;            str = str.replaceAll(&quot;\\x5c\\x72&quot;, &quot;\&quot;&quot;).replaceAll(&quot;\\x5c\\x6e&quot;, &quot;&quot;).replaceAll(&quot;\\x5c\\x22&quot;, &quot;\&quot;&quot;);            System.out.println(str);            String mysql=str.replaceAll(&quot;([ \t]+)clob([ \t,]*)&quot;, &quot; longtext $2&quot;);            FileUtils.writeStringToFile(new File(PathKit.getWebRootPath() + &quot;/src/main/webapp/WEB-INF/dbsql/mysql.sql&quot;), mysql, &quot;utf-8&quot;);            String oracle=str.replaceAll(&quot;\\x5c\\x27&quot;, &quot;\\&apos;\\&apos;&quot;);            FileUtils.writeStringToFile(new File(PathKit.getWebRootPath() + &quot;/src/main/webapp/WEB-INF/dbsql/oracle.sql&quot;), oracle, &quot;utf-8&quot;);            String sqlserver=str.replaceAll(&quot;([ \t]+)clob([ \t,]*)&quot;, &quot; text $2&quot;).replaceAll(&quot;\\x5c\\x27&quot;, &quot;\\&apos;\\&apos;&quot;);            FileUtils.writeStringToFile(new File(PathKit.getWebRootPath() + &quot;/src/main/webapp/WEB-INF/dbsql/sqlserver.sql&quot;), sqlserver, &quot;utf-8&quot;);            String dm=str.replaceAll(&quot;\\x5c\\x27&quot;, &quot;\\&apos;\\&apos;&quot;);            FileUtils.writeStringToFile(new File(PathKit.getWebRootPath() + &quot;/src/main/webapp/WEB-INF/dbsql/dm.sql&quot;), dm, &quot;utf-8&quot;);        } catch (Exception e) {            e.printStackTrace();        }    }    public static void main(String[] args) {        make();    }}  </code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;将mysql数据库使用navcat导出后处理为标准的sql脚本&quot;&gt;&lt;a href=&quot;#将mysql数据库使用navcat导出后处理为标准的sql脚本&quot; class=&quot;headerlink&quot; title=&quot;将mysql数据库使用navcat导出后处理为标准的sql脚本&quot;&gt;&lt;/a&gt;将mysql数据库使用navcat导出后处理为标准的sql脚本&lt;/h3&gt;
    
    </summary>
    
      <category term="java" scheme="http://www.juedigulang.com/categories/java/"/>
    
    
      <category term="sql" scheme="http://www.juedigulang.com/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>JFinal和DataTasbles实现增删改</title>
    <link href="http://www.juedigulang.com/2017/11/18/datatables%E5%A2%9E%E5%88%A0%E6%94%B9/"/>
    <id>http://www.juedigulang.com/2017/11/18/datatables增删改/</id>
    <published>2017-11-18T07:51:11.000Z</published>
    <updated>2017-11-18T08:55:03.833Z</updated>
    
    <content type="html"><![CDATA[<p>下面记录下个人在使用过程中的一些难点，顺带一些没有解决的问题。先看下插件的页面效果：<br><img src="https://i.imgur.com/FxDoZ8F.png" alt=""><br><a id="more"></a><br>如果仅仅作为表格的载体，其实有很多插件可以选择。我更看重的是它的编辑功能，后台为维护更多的是对单跳数据进行操作，具体场景是客服和客户 1V1的交流，而dataTables对于单条数据的编辑，是相当不错的，具体来说，采用bootstrap的模态窗口（插件自动生成）实现了修改功能。 对于开发人员来说，省去了另写编辑页面的繁琐。 </p><p>话不多说，下面慢慢粘代码以及效果图。 </p><p>对于一个和后台交互的插件，最重要其实就两件事情，需要什么样的数据格式，提交给后台的又是怎样的数据格式，搞清楚这两点，其实就没什么了。 </p><p>dataTables支持很多数据源，官方有详细介绍，项目采用了轻量级的json数据进行传输，以下是插件填充表格时所需的数据格式：<br><img src="https://i.imgur.com/vcPgDLZ.png" alt=""></p><p>对于增删改查，dataTable默认传给后台的数据相当蛋疼，这里费了不少心思，最后重新封装了下数据格式，先看一下默认的数据格式：<br><img src="https://i.imgur.com/GliHauJ.png" alt=""></p><p>想要看懂上面的数据，还需要知道一个知识点，如果想使用dataTables的编辑功能，返回数据中，需要包括”DT_RowId”这个键，这个键值对需要放在每一行的数据中，充当表格的主键，当然，重复也没关系，这就是让人困惑的地方； </p><p>有了这个知识点，在看编辑数据时，默认的数据格式，这些都是键值对，对于键的命名，action表示操作行为，包括 remove,edit,create三种键值，支持自定义，详细的可以参考官方文档；剩下的便是每个单元格的表示，“data[row1] [accountId]”中，data是固定的，row1是选中行DT_RowId的值，accountId是选中行列的别称，关于列名和json数据源 键名的匹配，以下会有详细代码。 </p><p>看懂这个之后，再去思考后台如何拿数据，后台不可能去遍历request中的所有参数，所以比较好的方法就是在前台二次封装这些数据，通过对json数据的重新封装，即可，以下是个人的封装方法：<br>javaScript代码：<br>    ajax: {<br>        url:”/charge-manage/individualMember/edit”,<br>        data:function(data){<br>        var result={};<br>        for(var i in data.data){<br>        var result=data.data[i];<br>        result.DT_RowId=i;<br>        result.action=data.action;<br>        console.log(result);<br>        }<br>        return result;<br>        },<br>    },  </p><p>经过这样的封装，参数类型如下：<br><img src="https://i.imgur.com/7lUiKTX.png" alt=""></p><p>这样后台就方便拿参数进行操作了。 </p><p>解决了数据流向问题，在看页面本身的问题，表格列名如何与数据源匹配，这个比较简单，代码如下：<br>js代码如下：<br>    $(‘#member’).DataTable( {<br>    dom: “Bfrtip”,<br>    ajax:”/charge-manage/individualMember/getMember?”+”phoneNum=”+phoneNum,<br>    columns:[{data:”memberCode”},<br>             {data:”accountId”},<br>             {data:”phoneNum”},<br>             {data:”password”},<br>             {data:”lastLoginTime”}<br>             ],<br>    select:true,<br>       buttons: [<br>            { extend: “create”, editor: editor },<br>            { extend: “edit”,   editor: editor },<br>            { extend: “remove”, editor: editor }]<br>   } );</p><p>columns集合中的顺序，对应表格列的顺序，data的值，对应json数据源中的键；<br>以下是表格的实际图形： </p><p>编辑操作有自己的操作对象，也就是上面buttons栏引用的，代码如下：<br>js代码如下：<br>        var editor = new $.fn.dataTable.Editor( {<br>        ajax: {<br>    url:”/charge-manage/individualMember/edit”,<br>    data:function(data){<br>    var result={};<br>    for(var i in data.data){<br>    var result=data.data[i];<br>    result.DT_RowId=i;<br>    result.action=data.action;<br>    console.log(result);<br>    }<br>    return result;<br>    },<br>    },  </p><pre><code> fields: [{          label: &quot;会员编码:&quot;,          name: &quot;memberCode&quot;      }, {          label: &quot;账户编码:&quot;,          name: &quot;accountId&quot;      },{          label: &quot;手机号:&quot;,          name: &quot;phoneNum&quot;      },{          label: &quot;密码:&quot;,          name: &quot;password&quot;                          },{          label: &quot;最后登录时间:&quot;,          name: &quot;lastLoginTime&quot;                         }],  table: &quot;#member&quot;  </code></pre><p> });</p><p>fields集合中，label值是模态窗口对应的名称，细心的同学可以看到加了冒号，name对应向后台传入参数的键名。<br>下面是该模态的实际图片，再次强调，这玩意是自动生成的<br><img src="https://i.imgur.com/G2Dc1Hr.png" alt="">  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;下面记录下个人在使用过程中的一些难点，顺带一些没有解决的问题。先看下插件的页面效果：&lt;br&gt;&lt;img src=&quot;https://i.imgur.com/FxDoZ8F.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="jfinal" scheme="http://www.juedigulang.com/categories/jfinal/"/>
    
    
      <category term="jfinal、datatables" scheme="http://www.juedigulang.com/tags/jfinal%E3%80%81datatables/"/>
    
  </entry>
  
  <entry>
    <title>JFinal和datatales-editor增删改</title>
    <link href="http://www.juedigulang.com/2017/11/18/jfinal%E5%92%8Cdatatables-editor/"/>
    <id>http://www.juedigulang.com/2017/11/18/jfinal和datatables-editor/</id>
    <published>2017-11-18T07:37:15.000Z</published>
    <updated>2017-11-18T08:54:51.063Z</updated>
    
    <content type="html"><![CDATA[<h3 id="页面js代码如下："><a href="#页面js代码如下：" class="headerlink" title="页面js代码如下："></a>页面js代码如下：</h3><a id="more"></a><pre><code>editor = new $.fn.dataTable.Editor( {            ajax: {                url:&quot;${ctx}/console/job/dtAction?job.orgID=&quot;+orgID,                  data:function(data){                    var result = {};                    for(var i in data.data){                      //封装json的格式                         var result=data.data[i];                         result.DT_Rowid=i;                         result.action=data.action;                         console.log(result);                          $.each(result,function (index, value) {                             //console.log(index);                             if(index!=&quot;action&quot; &amp;&amp; index!=&quot;DT_Rowid&quot;){                                 modifyJosnKey(result,index,&quot;job.&quot;+index);                             }                         })                    }                    return result;                },            },            table: &quot;#example&quot;,            idSrc:&quot;id&quot;,            fields: [ {                    label: &quot;主键&quot;,                    name:  &quot;id&quot;,                    type:  &quot;hidden&quot;,                }, {                    label: &quot;岗位名称&quot;,                    name:  &quot;jobname&quot;                }, {                    label: &quot;岗位描述&quot;,                    name:  &quot;jobdesc&quot;,                },{                    label: &quot;排序&quot;,                    name:  &quot;sortid&quot;,                }            ],            i18n: {                create: {                    button: &quot;新建&quot;,                    title:  &quot;新建&quot;,                    submit: &quot;保存&quot;                },                edit: {                    button: &quot;编辑&quot;,                    title:  &quot;编辑&quot;,                    submit: &quot;保存&quot;                },                remove: {                    button: &quot;删除&quot;,                    title:  &quot;删除&quot;,                    submit: &quot;删除&quot;,                    confirm: {                        _: &quot;您是不是一定希望删除%d行吗?&quot;,                        1: &quot;您是不是一定希望删除1行吗?&quot;                    }                },                error: {                    system: &quot;发生错误,请联系管理员&quot;                },                datetime: {                    previous: &apos;上一个&apos;,                    next:     &apos;下一个&apos;,                    months:   [ &apos;一月&apos;, &apos;二月&apos;, &apos;三月&apos;, &apos;四月&apos;, &apos;五月&apos;, &apos;六月&apos;, &apos;七月&apos;, &apos;八月&apos;, &apos;九月&apos;, &apos;十月&apos;, &apos;十一月&apos;, &apos;十二月&apos; ],                    weekdays: [ &apos;周一&apos;, &apos;周二&apos;, &apos;周三&apos;, &apos;周四&apos;, &apos;周五&apos;, &apos;周六&apos;, &apos;周日&apos; ]                }            }        } );        table = $(&apos;#example&apos;).DataTable( {              language: {                  &quot;sProcessing&quot;: &quot;处理中...&quot;,                  &quot;sLengthMenu&quot;: &quot;显示 _MENU_ 项结果&quot;,                  &quot;sZeroRecords&quot;: &quot;没有匹配结果&quot;,                  &quot;sInfo&quot;: &quot;显示第 _START_ 至 _END_ 项结果，共 _TOTAL_ 项&quot;,                  &quot;sInfoEmpty&quot;: &quot;显示第 0 至 0 项结果，共 0 项&quot;,                  &quot;sInfoFiltered&quot;: &quot;(由 _MAX_ 项结果过滤)&quot;,                  &quot;sInfoPostFix&quot;: &quot;&quot;,                  &quot;sEmptyTable&quot;: &quot;表中数据为空&quot;,                  &quot;sLoadingRecords&quot;: &quot;载入中...&quot;,                  &quot;sInfoThousands&quot;: &quot;,&quot;,                  &quot;oPaginate&quot;: {                      &quot;sFirst&quot;: &quot;首页&quot;,                      &quot;sPrevious&quot;: &quot;上页&quot;,                      &quot;sNext&quot;: &quot;下页&quot;,                      &quot;sLast&quot;: &quot;末页&quot;                  },                  &quot;oAria&quot;: {                      &quot;sSortAscending&quot;: &quot;: 以升序排列此列&quot;,                      &quot;sSortDescending&quot;: &quot;: 以降序排列此列&quot;                  }              },              searching:false,              dom: &apos;&lt;&quot;dt-panelmenu clearfix&quot;Bfr&gt;t&lt;&quot;dt-panelfooter clearfix&quot;ip&gt;&apos;,              ajax: &quot;${ctx}/console/job/dtAction?orgID=&quot;+orgID,              columns: [                    { data: &quot;jobname&quot;, className: &quot;center&quot; },                  { data: &quot;jobdesc&quot;, className: &quot;center&quot; },                  { data: &quot;updatetime&quot;, className: &quot;center&quot; }              ],              select: true,              buttons: [                        { extend: &quot;create&quot;, editor: editor },                        { extend: &quot;edit&quot;,   editor: editor },                        { extend: &quot;remove&quot;, editor: editor }              ]           } );        $(&quot;#tree&quot;).fancytree({              source:${orgs},            icons: false, // Display node icons.            clickFolderMode: 2, // 1:activate, 2:expand, 3:activate and expand, 4:activate (dblclick expands)            activate: function(event, data) {                orgID=data.node.data.id;                //console.log(orgID);                //console.log(table);                //console.log(table.context[0]._editor.s.ajax.url);                table.context[0]._editor.s.ajax.url=&quot;${ctx}/console/job/dtAction?job.orgID=&quot;+orgID;                table.ajax.url(&quot;${ctx}/console/job/dtAction?orgID=&quot;+orgID).load();//再次加载            }        });</code></pre><h3 id="后台java代码如下："><a href="#后台java代码如下：" class="headerlink" title="后台java代码如下："></a>后台java代码如下：</h3><pre><code>public void dtAction() {    String action = getPara(&quot;action&quot;, &quot;&quot;);    switch (action) {    case &quot;create&quot;:        Job job = getModel(Job.class);        User user = getSessionAttr(&quot;User&quot;);        job.set(&quot;insertuserid&quot;, user.getStr(&quot;username&quot;));        job.set(&quot;updateuserid&quot;, user.getStr(&quot;username&quot;));        service.save(job);        JSONObject json = new JSONObject();        json.put(&quot;data&quot;, job);        //Map map1 = new HashMap();        //map1.put(&quot;data&quot;, job);        renderJson(json);        break;    case &quot;edit&quot;:        Job job1 = getModel(Job.class);        service.update(job1);        Map map2 = new HashMap();        map2.put(&quot;data&quot;, job1);        renderJson(map2);        break;    case &quot;remove&quot;:        Job job2 = getModel(Job.class);        job2.delete();        renderJson();        break;    default:        String orgID = getPara(&quot;orgID&quot;);        List&lt;Job&gt; jobs = Job.dao.find(&quot;select * from t_job where orgid=?&quot;, orgID);        Map map = new HashMap();        map.put(&quot;data&quot;, jobs);        renderJson(map);        break;    }    return;}</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;页面js代码如下：&quot;&gt;&lt;a href=&quot;#页面js代码如下：&quot; class=&quot;headerlink&quot; title=&quot;页面js代码如下：&quot;&gt;&lt;/a&gt;页面js代码如下：&lt;/h3&gt;
    
    </summary>
    
      <category term="jfinal" scheme="http://www.juedigulang.com/categories/jfinal/"/>
    
    
      <category term="jfinal、datatables-editor" scheme="http://www.juedigulang.com/tags/jfinal%E3%80%81datatables-editor/"/>
    
  </entry>
  
  <entry>
    <title>乱码工具判断工具</title>
    <link href="http://www.juedigulang.com/2017/11/03/%E4%B9%B1%E7%A0%81%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    <id>http://www.juedigulang.com/2017/11/03/乱码工具类/</id>
    <published>2017-11-03T08:37:11.000Z</published>
    <updated>2017-11-03T08:57:56.618Z</updated>
    
    <content type="html"><![CDATA[<p>乱码，指的是“由于本地计算机在用文本编辑器打开源文件时，使用了不相应字符集而造成部分或所有字符无法被阅读的一系列字符。”，造成其结果的原因是多种多样的。<br><a id="more"></a></p><h3 id="乱码工具类代码如下："><a href="#乱码工具类代码如下：" class="headerlink" title="乱码工具类代码如下："></a>乱码工具类代码如下：</h3><pre><code>import java.util.regex.Matcher;import java.util.regex.Pattern;/**  * @author  * @version  * 说明 判断中文字符串是否乱码 */public class ChineseUtil {/**  * @author mo   * @version   * 说明 判断是否是中文 */private static boolean isChinese(char c) {  Character.UnicodeBlock ub = Character.UnicodeBlock.of(c);  if (ub == Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS  || ub == Character.UnicodeBlock.CJK_COMPATIBILITY_IDEOGRAPHS  || ub == Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A|| ub == Character.UnicodeBlock.GENERAL_PUNCTUATION  || ub == Character.UnicodeBlock.CJK_SYMBOLS_AND_PUNCTUATION  || ub == Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS) {  return true;  }  return false;  }  /**  * @author mo   * @version   * 说明 判断是否乱码 */public static boolean isMessyCode(String strName) {  Pattern p = Pattern.compile(&quot;\\s*|\t*|\r*|\n*&quot;);  Matcher m = p.matcher(strName);  String after = m.replaceAll(&quot;&quot;);  String temp = after.replaceAll(&quot;\\p{P}&quot;, &quot;&quot;);  char[] ch = temp.trim().toCharArray();  float chLength = 0 ;  float count = 0;  for (int i = 0; i &lt; ch.length; i++) {  char c = ch[i];  if (!Character.isLetterOrDigit(c)) {  if (!isChinese(c)) {  count = count + 1;  }  chLength++;   }  }  float result = count / chLength ;  if (result &gt; 0.4) {  return true;  } else {  return false;  }  }}</code></pre><p>将上面的工具类放入带到项目中，在需要引用的项目中引入这个工具类即可   </p><pre><code>String zgbm = request.getParameter(&quot;zgbm&quot;);        if(ChineseUtil.isMessyCode(zgbm)){            try {                zgbm = new String(zgbm.getBytes(&quot;ISO8859-1&quot;),&quot;UTF-8&quot;);            } catch (UnsupportedEncodingException e) {                // TODO Auto-generated catch block                e.printStackTrace();            }        }</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;乱码，指的是“由于本地计算机在用文本编辑器打开源文件时，使用了不相应字符集而造成部分或所有字符无法被阅读的一系列字符。”，造成其结果的原因是多种多样的。&lt;br&gt;
    
    </summary>
    
      <category term="java" scheme="http://www.juedigulang.com/categories/java/"/>
    
    
      <category term="乱码" scheme="http://www.juedigulang.com/tags/%E4%B9%B1%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>码云和github公钥的配置</title>
    <link href="http://www.juedigulang.com/2017/11/03/%E7%A0%81%E4%BA%91%E5%85%AC%E9%92%A5%E9%85%8D%E7%BD%AE/"/>
    <id>http://www.juedigulang.com/2017/11/03/码云公钥配置/</id>
    <published>2017-11-03T07:56:49.233Z</published>
    <updated>2017-11-03T08:18:38.521Z</updated>
    
    <content type="html"><![CDATA[<h3 id="用户名和邮箱地址的使用"><a href="#用户名和邮箱地址的使用" class="headerlink" title="用户名和邮箱地址的使用"></a>用户名和邮箱地址的使用</h3><p>用户名和邮箱地址是本地git客户端的一个变量，不随git库而改变。<br>每次commit都会用用户名和邮箱纪录。<br>github的contributions统计就是按邮箱来统计的</p><a id="more"></a><h3 id="查看用户名和邮箱的地址"><a href="#查看用户名和邮箱的地址" class="headerlink" title="查看用户名和邮箱的地址"></a>查看用户名和邮箱的地址</h3><pre><code>$ git config user.name$ git config user.email</code></pre><h3 id="设置用户名和邮箱地址"><a href="#设置用户名和邮箱地址" class="headerlink" title="设置用户名和邮箱地址"></a>设置用户名和邮箱地址</h3><pre><code>$ git config --global user.name &quot;username&quot;$ git config --global user.email &quot;email&quot;</code></pre><h3 id="生成sshKey"><a href="#生成sshKey" class="headerlink" title="生成sshKey"></a>生成sshKey</h3><p>在git命令行中，输入命令： cd ~/.ssh，来检测是否生成过key,没有生成过key，会有相关信息提示；然后输入命令： ssh-keygen -t rsa -C “邮箱地址”，按下回车键；然后根据返回的信息，找到.ssh目录下的两个文件；</p><pre><code>cat ~/.ssh/id_rsa.pub# ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC6eNtGpNGwstc....</code></pre><h3 id="添加后在终端中输入"><a href="#添加后在终端中输入" class="headerlink" title="添加后在终端中输入"></a>添加后在终端中输入</h3><pre><code>ssh -T git@gitee.com</code></pre><p>若返回<br>    Welcome to Gitee.com, yourname!</p><p>则代表添加成功</p><h3 id="github添加是同样的流程"><a href="#github添加是同样的流程" class="headerlink" title="github添加是同样的流程"></a>github添加是同样的流程</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;用户名和邮箱地址的使用&quot;&gt;&lt;a href=&quot;#用户名和邮箱地址的使用&quot; class=&quot;headerlink&quot; title=&quot;用户名和邮箱地址的使用&quot;&gt;&lt;/a&gt;用户名和邮箱地址的使用&lt;/h3&gt;&lt;p&gt;用户名和邮箱地址是本地git客户端的一个变量，不随git库而改变。&lt;br&gt;每次commit都会用用户名和邮箱纪录。&lt;br&gt;github的contributions统计就是按邮箱来统计的&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://www.juedigulang.com/categories/hexo/"/>
    
    
      <category term="ssh公钥" scheme="http://www.juedigulang.com/tags/ssh%E5%85%AC%E9%92%A5/"/>
    
  </entry>
  
  <entry>
    <title>Node.js安装</title>
    <link href="http://www.juedigulang.com/2017/11/02/Nodejs%E5%AE%89%E8%A3%85/"/>
    <id>http://www.juedigulang.com/2017/11/02/Nodejs安装/</id>
    <published>2017-11-02T08:03:22.927Z</published>
    <updated>2017-11-01T07:54:04.481Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Node-js简介"><a href="#Node-js简介" class="headerlink" title="Node.js简介"></a>Node.js简介</h3><p>简单的说 Node.js 就是运行在服务端的 JavaScript。Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。Node.js 的包管理器 npm，是全球最大的开源库生态系统。<br><a id="more"></a></p><h3 id="下载Node-js"><a href="#下载Node-js" class="headerlink" title="下载Node.js"></a>下载Node.js</h3><p>打开官网下载链接:<a href="https://nodejs.org/en/download/" target="_blank" rel="external">https://nodejs.org/en/download/</a><br><img src="https://i.imgur.com/2YWZz1q.png" alt=""></p><h3 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h3><p>1、下载完成后，双击“node-v6.9.2-x64.msi”，开始安装Node.js<br><img src="https://i.imgur.com/CdBixyY.png" alt=""><br>2、点击Next按钮<br><img src="https://i.imgur.com/iFdaq6p.png" alt=""><br>3、勾选复选框，点击【Next】按钮<br><img src="https://i.imgur.com/NBpoDyf.png" alt=""><br>4、修改好目录后，点击【Next】按钮<br><img src="https://i.imgur.com/BFvWQwF.png" alt=""><br><img src="https://i.imgur.com/JlV4gQH.png" alt=""><br>5、安装完后点击【Finish】按钮完成安装<br><img src="https://i.imgur.com/U4Ufq9j.png" alt=""><br>6、至此Node.js已经安装完成，可以先进行下简单的测试安装是否成功了，后面还要进行环境配置<br>在键盘按下【win+R】键，输入cmd，然后回车，打开cmd窗口<br><img src="https://i.imgur.com/PccF3DO.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Node-js简介&quot;&gt;&lt;a href=&quot;#Node-js简介&quot; class=&quot;headerlink&quot; title=&quot;Node.js简介&quot;&gt;&lt;/a&gt;Node.js简介&lt;/h3&gt;&lt;p&gt;简单的说 Node.js 就是运行在服务端的 JavaScript。Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。Node.js 的包管理器 npm，是全球最大的开源库生态系统。&lt;br&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://www.juedigulang.com/categories/hexo/"/>
    
    
      <category term="hexo、node.js" scheme="http://www.juedigulang.com/tags/hexo%E3%80%81node-js/"/>
    
  </entry>
  
  <entry>
    <title>个人博客</title>
    <link href="http://www.juedigulang.com/2017/11/02/Mo/"/>
    <id>http://www.juedigulang.com/2017/11/02/Mo/</id>
    <published>2017-11-02T08:03:22.927Z</published>
    <updated>2017-11-15T12:59:15.619Z</updated>
    
    <content type="html"><![CDATA[<pre><code>我的第一篇个人博客</code></pre><p>欢迎来到我的个人小屋，以后会不定时更新博客</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;我的第一篇个人博客
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;欢迎来到我的个人小屋，以后会不定时更新博客&lt;/p&gt;

      
    
    </summary>
    
      <category term="杂谈" scheme="http://www.juedigulang.com/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="死肥宅" scheme="http://www.juedigulang.com/tags/%E6%AD%BB%E8%82%A5%E5%AE%85/"/>
    
  </entry>
  
  <entry>
    <title>使用hexo+码云搭建个人博客</title>
    <link href="http://www.juedigulang.com/2017/11/02/hexo%E5%AE%89%E8%A3%85/"/>
    <id>http://www.juedigulang.com/2017/11/02/hexo安装/</id>
    <published>2017-11-02T08:03:22.911Z</published>
    <updated>2017-11-18T08:58:28.862Z</updated>
    
    <content type="html"><![CDATA[<h3 id="使用工具介绍"><a href="#使用工具介绍" class="headerlink" title="使用工具介绍"></a>使用工具介绍</h3><p>1、码云 Pages：码云 Pages 是一个免费的静态网页托管服务，您可以使用码云 Pages 托管博客、项目官网等静态网页。这样就不用购买服务器和域名了，如果您使用过 Github Pages 那么您会很快上手使用码云的Pages服务。这里使用码云上的Pages 而不是用Github Pages，主要原因就是在国内没有VPN的话。。。你懂得！还有就是支持国产！链接：<a href="https://git.oschina.net/" target="_blank" rel="external">https://git.oschina.net/</a><br><a id="more"></a><br>2、Hexo：Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。使用者只需要专注于写博客而不需要关注网站是如何生成的。而且还有丰富的博客主题可以选择！链接：<a href="https://hexo.io/zh-cn/（ps：这是国外网站，翻墙吧少年，需要自由门" target="_blank" rel="external">https://hexo.io/zh-cn/（ps：这是国外网站，翻墙吧少年，需要自由门</a> 翻墙软件可以在博客中联系我哦）</p><h3 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h3><p>Node.js安装</p><blockquote><p>参考：<a href="http://www.runoob.com/nodejs/nodejs-install-setup.html（ps：如果没有VPN的用户最好切换一下npm的源，不然后续的步骤可能会让你想砸电脑，安装完后，在命令窗口执行下面代码）" target="_blank" rel="external">http://www.runoob.com/nodejs/nodejs-install-setup.html（ps：如果没有VPN的用户最好切换一下npm的源，不然后续的步骤可能会让你想砸电脑，安装完后，在命令窗口执行下面代码）</a></p></blockquote><pre><code>npm config set registry http://registry.cnpmjs.org #切换npm为淘宝镜像</code></pre><p>Git安装</p><blockquote><p>参考<a href="http://www.runoob.com/git/git-install-setup.html" target="_blank" rel="external">http://www.runoob.com/git/git-install-setup.html</a></p></blockquote><p>Hexo安装。（ ps：安装完Node.js和Git之后不需要配置些什么，只需要安装成功就是了，如果想明白原理的话可以深入的学习。）</p><p>如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。打开命令窗口输入下面代码：</p><pre><code>npm install -g hexo-cli</code></pre><p>安装成功后输入hexo 如果得到下面这个结果，恭喜你！安装成功！<br><img src="https://i.imgur.com/knj5ef9.png" alt=""></p><p>Hexo的常用命令说明：</p><blockquote><p>参考：<a href="https://hexo.io/zh-cn/docs/commands.html" target="_blank" rel="external">https://hexo.io/zh-cn/docs/commands.html</a></p></blockquote><h3 id="本地运行Hexo"><a href="#本地运行Hexo" class="headerlink" title="本地运行Hexo"></a>本地运行Hexo</h3><p>安装 Hexo 完成后，请依次执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。将<folder> 替换成项目存放的文件夹目录，</folder></p><pre><code>hexo init &lt;folder&gt;cd &lt;folder&gt;npm installhexo generate   </code></pre><p>新建完成后，指定文件夹的目录如下：</p><p><img src="https://i.imgur.com/TxNmAPZ.png" alt=""></p><p>进行到这步后就可以先在本地运行下，看看效果了。执行下面命令：</p><pre><code>cd &lt;folder&gt; #切换到项目目录下npm install       #install before start blogginghexo server #运行本地服务</code></pre><p>浏览器输入<a href="http://localhost:4000就可以看到效果。如下：" target="_blank" rel="external">http://localhost:4000就可以看到效果。如下：</a></p><p><img src="https://i.imgur.com/0orsKgO.png" alt=""></p><h3 id="修改Hexo的主题"><a href="#修改Hexo的主题" class="headerlink" title="修改Hexo的主题"></a>修改Hexo的主题</h3><p>当然，上面运行的只是Hexo官方默认的主题配置效果，想要个性一点？，下面我们就将他改造成自己想要的个性主题。</p><p>Hexo的主题都是一些前端民间高手写的模版，可以在官方收录的主题中去挑选：<a href="https://hexo.io/themes/" target="_blank" rel="external">https://hexo.io/themes/</a></p><p>看上一个主题后点击下图位置，进入下载主题文件。如下图：</p><p><img src="https://i.imgur.com/9prhX8U.png" alt=""></p><p>主题下载完成后，将主题文件解压到Hexo项目的thems文件夹下面（ps:我这里的项目目录是在桌面的Hexo文件夹里面。）</p><p><img src="https://i.imgur.com/Owv5y5K.png" alt=""></p><p>接下来就是修改Hexo的配置文件_config.yml，将里面theme 对应的值改为之前下载的主题的文件夹名字，本文里面下载的主题文件夹名字为hexo-theme-smackdown-master。</p><p><img src="https://i.imgur.com/oUoij99.png" alt=""></p><p>注意：这里“：”后面必须要有一个空格，而且这个空格要在英文输入法下，不然会报一些稀奇古怪的错。</p><p>按照之前步骤本地重新运行后，如下图：</p><p><img src="https://i.imgur.com/1PYd8n8.png" alt=""></p><p>关于Hexo中_config.yml 文件的其他配置，大家可以参考官方的文档，这里就不多赘述了：</p><pre><code>文档链接 https://hexo.io/zh-cn/docs/configuration.html</code></pre><p>下载的每个主题中，有一个配置文件，名字也叫_config.yml，这里大家千万不要和之前Hexo根目录下的_config.yml搞混淆了，这里面配置的主要是些与主题相关的东西，比如一些文章阅读量，多说插件，cnzz站长工具等等的配置信息。一般里面也都有注释，这里就不赘述了，不懂得可以在我的博客问我。</p><p>一些主题在GitHub上面也都有主题安装的一些文档，写的都很详细。推荐一个主题的文档，结合官方的文档看完之后，基本上也就明白了。</p><pre><code>推荐一个主题的文档https://github.com/yscoder/hexo-theme-indigo/wiki</code></pre><h3 id="编写博客文章"><a href="#编写博客文章" class="headerlink" title="编写博客文章"></a>编写博客文章</h3><p>如果你使用过MarkDown 来写博客文章的话，接下来就简单多了，没使用过也没关系，推荐大家一个编辑工具马克飞象 链接：<a href="https://maxiang.io/，在编辑器里面写好文章后，复制或另存为.md文件" target="_blank" rel="external">https://maxiang.io/，在编辑器里面写好文章后，复制或另存为.md文件</a>, 与普通的.md文件不同 要在文件开头添加下面代码</p><pre><code>title: #文章标题date: #文章日期tags: #文章标签categories: #文章分类---</code></pre><p>在.md文件的开头添加上面代码，是为了让Hexo框架在生成网页的时候，设置相应的参数。例如下图所示：<br><img src="https://i.imgur.com/r3ofBm7.png" alt=""></p><p>将写好的.md文件放入Hexo项目的source 目录下的_posts 文件夹中，可以看到里面有个hello-world.md 文件，这就是默认的文章。</p><p>重新在本地启动项目，访问就可以看到之前添加的文章。</p><h3 id="生成静态Html文件"><a href="#生成静态Html文件" class="headerlink" title="生成静态Html文件"></a>生成静态Html文件</h3><p>现在只能在本地启动项目然后通过本地地址访问博客网站，下面我们就可以利用Hexo生成静态Html，很简单，只需要在命令窗口执行下面代码：</p><pre><code>cd &lt;folder&gt; #切换到项目目录下hexo generate   #生成静态文件到项目根目录的public文件夹中</code></pre><p>发布静态Html文件到码云 Pages上</p><p>注册一个码云帐号，并创建一个项目。如下图：<br><img src="https://i.imgur.com/oo9ylK4.png" alt=""></p><p>创建完项目后得到项目的Https的地址后面要用。地址获取如下图<br><img src="https://i.imgur.com/pvFwdCT.png" alt=""></p><p>这里借用一个插件来帮助我们完成代码上传的工作，安装 hexo-deployer-git。安装代码如下</p><pre><code>npm install hexo-deployer-git --save#把public里面生成的文件推上到码云上。</code></pre><p>配置项目根目录_config.yml 文件，修改deploy 的值，如下图：</p><p><img src="https://i.imgur.com/Pye8eMq.png" alt=""></p><p>修改完后在命令窗口执行下面命令：<br>    cd <folder> #切换到项目目录下<br>    hexo deploy #一键部署功能</folder></p><p>之后会弹出一个对话框，输入码云的帐号密码。</p><p>部署成功之后，登录码云，查看之前创建的项目中出现了本地项目中public 文件夹中的文件，这时候代表之前的部署是成功的。</p><p>然后如下图，启动码云的pages功能：<br><img src="https://i.imgur.com/5pFYcZR.png" alt=""></p><p>访问链接<br><img src="https://i.imgur.com/Os6lpWc.png" alt=""></p><p>这时候就看到之前和本地启动一样的效果了。博客部署完成，在这之后，只需要每次用马克飞象写好文章后，放入Hexo项目的source 目录下的_posts 文件夹中，在按照之前步骤更新博客就OK了。还可以随时切换博客的主题哦！</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;使用工具介绍&quot;&gt;&lt;a href=&quot;#使用工具介绍&quot; class=&quot;headerlink&quot; title=&quot;使用工具介绍&quot;&gt;&lt;/a&gt;使用工具介绍&lt;/h3&gt;&lt;p&gt;1、码云 Pages：码云 Pages 是一个免费的静态网页托管服务，您可以使用码云 Pages 托管博客、项目官网等静态网页。这样就不用购买服务器和域名了，如果您使用过 Github Pages 那么您会很快上手使用码云的Pages服务。这里使用码云上的Pages 而不是用Github Pages，主要原因就是在国内没有VPN的话。。。你懂得！还有就是支持国产！链接：&lt;a href=&quot;https://git.oschina.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://git.oschina.net/&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://www.juedigulang.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://www.juedigulang.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.juedigulang.com/2017/11/02/hello-world/"/>
    <id>http://www.juedigulang.com/2017/11/02/hello-world/</id>
    <published>2017-11-02T08:03:22.911Z</published>
    <updated>2017-10-27T08:08:10.515Z</updated>
    
    <content type="html"><![CDATA[<h3 id="创建一个文件"><a href="#创建一个文件" class="headerlink" title="创建一个文件"></a>创建一个文件</h3><p>$ hexo new “My New Post”</p><h3 id="运行本地服务"><a href="#运行本地服务" class="headerlink" title="运行本地服务"></a>运行本地服务</h3><p>$ hexo server</p><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><p>$ hexo generate</p><h3 id="部署到服务器"><a href="#部署到服务器" class="headerlink" title="部署到服务器"></a>部署到服务器</h3><p>$ hexo deploy</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;创建一个文件&quot;&gt;&lt;a href=&quot;#创建一个文件&quot; class=&quot;headerlink&quot; title=&quot;创建一个文件&quot;&gt;&lt;/a&gt;创建一个文件&lt;/h3&gt;&lt;p&gt;$ hexo new “My New Post”&lt;/p&gt;
&lt;h3 id=&quot;运行本地服务&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
    
  </entry>
  
</feed>
